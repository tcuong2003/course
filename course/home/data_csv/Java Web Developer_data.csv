course,sub_course,module,sub_module,content_html_list,img_list,video_url
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,Lesson 1: Java Web Developer Nanodegree Orientation,1.1  Welcome to Udacity,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Welcome to Udacity!</h3>\n<p class=""chakra-text css-o3oz8b"">I am Sebastian, the founder of Udacity.</p>\n<p class=""chakra-text css-o3oz8b"">Our mission is to power careers through tech education. We’re honored that you’ve chosen us to help in your career journey. Whether embarking on a new path. Curious about a new field. Or advancing in your own field. I want you to know, you’re in the right place. We are here to help you accomplish your goals.</p>\n<p class=""chakra-text css-o3oz8b"">I can’t wait to see where this journey takes you!</p></div>']",[],https://www.youtube.com/embed/9QadFJRKrEA
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,Lesson 1: Java Web Developer Nanodegree Orientation,1.2  The Udacity Experience,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If this is your first Nanodegree program, welcome.\nIf you have taken a Nanodegree program with us before, you already know a little bit of what to expect. Udacity is always improving our learning experience for students. So you can watch this to see what is changed or skip ahead. You can also read this in the FAQ located in the resources tab.</p>\n<p class=""chakra-text css-o3oz8b"">Let’s get started.</p>\n<p class=""chakra-text css-o3oz8b"">We truly believe you couldn’t have chosen a better place to learn. A lot of people have worked tirelessly to create the course material and platform features, as we all want you to get the most of your learning journey. Our pledge is to provide you with resources and services that will further enable you to succeed in your Nanodegree program. As you go through the lessons, you may find some to be difficult and may feel discouraged. If this happens, we encourage you to take advantage of your community channels and mentor services to help clarify the concepts, or just to share your doubts. Our mentors are there to help you! You will get advice and guidance to ensure you are on track to complete the projects. We WANT you to succeed and graduate with a Udacity Nanodegree certificate.</p>\n<p class=""chakra-text css-o3oz8b"">We value the trust you have put in us by making this investment in your future career. We take it seriously and we are here to help you achieve whatever you came here to accomplish.</p></div>']",[],https://www.youtube.com/embed/gd0Z0S58Y68
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,Lesson 1: Java Web Developer Nanodegree Orientation,1.3  How to Succeed,[],[],https://www.youtube.com/embed/hVwUijsLKzw
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,"Lesson 2: Knowledge, Community, and Careers",2.1  Getting Help,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As questions come up during this course, click on the Help button on the left sidebar of your classroom. You’ll see four options, each for a separate type of support:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Technical Mentor Help</strong>: is available on Knowledge, our expert Q&amp;A platform, by clicking on ""Mentor Help"". You can search for answers to questions similar to yours or post new questions related to your project or lessons. Udacity’s expert technical mentors answer all new questions.</li><li class=""css-cvpopp""><strong>Udacity Support Community:</strong> Receive peer support and find answers to your non-technical questions quickly through <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://udacity.zendesk.com/hc/en-us/community/topics"">Udacity Support Community<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Receive peer support from our global community of lifelong learners that help each other succeed by sharing their experience and expertise. Start a discussion <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://udacity.zendesk.com/hc/en-us/community/topics"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp""><strong>General Account Help</strong>: This is where you can get details on non-technical issues such as 3rd party tools, billing, deadlines, and more. You can even find additional help here via. live chat. Simply click on Account Help or visit our <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://udacity.zendesk.com/hc"">Help Center<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> to find answers.\n.</li></ul></div>']",[],
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,"Lesson 2: Knowledge, Community, and Careers",2.2  Mentor Help,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Technical Mentor Support</strong>: is provided through Knowledge, our expert Q&amp;A platform. You can search for answers to questions similar to yours or post new questions related to your project or lessons. <strong>Udacity’s expert technical mentors answer all-new questions.</strong></p>\n<h3 class=""chakra-heading css-k57syw"">How to Use Knowledge</h3>\n<p class=""chakra-text css-o3oz8b"">To ensure you’re getting the quality and prompt support you need, it’s helpful to follow these best practices and guidelines for Knowledge.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Search for Similar Existing Questions</strong>:\nwith tens of thousands of students enrolled in our programs, many of your questions may have already been asked and answered. To look for existing answers to similar questions that may provide the immediate support you need, use the <strong>filter on the left side of your screen</strong> to select your course and related project or write in the key terms related to your question in the <strong>search bar</strong> at the top of the page.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Ask a New Question</strong>:\nif you want to ask a new question, select “Ask a Mentor” at the top of the page. Kindly remember that Knowledge is for technical questions only; for other types of support and feedback, please write to support at <a class=""chakra-link css-190botj"" href=""mailto:support@udacity.com"">support@udacity.com<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">When you ask a new question, the platform immediately assigns it to one of our expert mentors spread across the globe to ensure prompt replies. Of note, when a mentor answers your question, you will see “Mentor” next to their name to differentiate their support from comments your fellow learners may also provide.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If you don\'t see your question, simply create a new post. You are likely to get an answer within 24 hours and you\'ll be helping future students who may encounter the same problem.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">How to Ask a Good Question?</h3>\n<p class=""chakra-text css-o3oz8b"">Students that follow these tips typically receive the strongest initial support and avoid back-and-forth with mentors:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Ask Specific Questions</strong>: if you have closely related questions that form part of a general theme, it’s okay to ask them all together. But consider using bullet points to separately list each of the questions in your post. Keeping your questions organized helps ensure mentors provide clear answers to each specific question. If your questions are less closely connected, it’s best to submit new, separate questions for each one.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Provide Details and Links:</strong> explaining what (if anything) you’ve already attempted to solve the problem helps mentors know where to start when answering your question. Likewise, if your question is not related specifically to a project, but rather to an exercise, quiz, or lesson, it’s helpful to include information such as lesson or quiz name, screenshots, and classroom links.</p>\n</li></ul>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Overall the key to asking a good question is to imagine yourself trying to answer your own question. Imagine you were coming to it without any prior knowledge. Does the question make complete sense? Or are there gaps around the context?</p>\n</blockquote>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Start with a Clear Question Title</strong>: attempt to summarize your entire question in one sentence. You may even write the title at the end, just before posting the question. This will help you summarize the issue before you include details in the question itself.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Share Code Correctly</strong>:  by using the “Code Block” option to properly format your code. If your question concerns a piece of external code, include a link to the file on Github.</p>\n</li></ul>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">In fact, Github lets you create a link to a specific line in a file.  To do so, just click to the left of the line number, and then select <em class=""chakra-text css-o3oz8b"">copy permalink</em> in the ellipsis that appears in the margin. Paste the <em class=""chakra-text css-o3oz8b"">permalink</em> right into the Github box on your question submission form.</p>\n</blockquote>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Figuring out Errors</strong>: if your question is about an error message or stack trace, include the entire error message, by either formatting the error message using the “Code Block” option or creating a Gist or a Paste on Pastebin, and including a link to it in the description.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Avoid Screenshots of Code or Error Messages</strong>: do not use screenshots of code or error messages. They are hard to read and the text cannot be copied to debug it.</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">If you receive a helpful answer, kindly select it as the “accepted answer.” For questions from other students, if you see other helpful answers kindly select the “upvote” option. Conversely, if you don’t think an answer strongly answers a question, select the “downvote” option.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Getting Additional Support</h3>\n<p class=""chakra-text css-o3oz8b"">At times, students want support from a different mentor. As everyone learns differently, we want to make this a simple process for learners like you.</p>\n<p class=""chakra-text css-o3oz8b"">If you receive an answer that you are not satisfied with and want a different mentor to chime in, kindly select the option at the top of the page in Knowledge. If you reply directly in the comments section, without clicking on the link at the top of the page, your question will not be answered by another mentor.</p></div>']","['https://video.udacity-data.com/topher/2020/May/5ebeb959_knowledge1/knowledge1.png', 'https://video.udacity-data.com/topher/2020/May/5ebeb9eb_k2/k2.png', 'https://video.udacity-data.com/topher/2020/May/5ebeb997_image2/image2.png', 'https://video.udacity-data.com/topher/2020/May/5ebeb954_lastimage/lastimage.png']",
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,"Lesson 2: Knowledge, Community, and Careers",2.3  Udacity Support Community,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Welcome to Udacity’s Support Community!</strong></p>\n<p class=""chakra-text css-o3oz8b"">Become a part of our global community of lifelong learners that help each other succeed by sharing their experience and expertise. Receive peer support and find answers to your non-technical questions quickly through Udacity Support Community.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Find answers to your questions</strong></p>\n<p class=""chakra-text css-o3oz8b"">Search Udacity Support Community for answers to commonly asked questions.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Receive peer support</strong></p>\n<p class=""chakra-text css-o3oz8b"">Ask the community by posting a question and following discussions.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Share your expertise</strong></p>\n<p class=""chakra-text css-o3oz8b"">Get recognized for sharing your insights, experiences, and tips with fellow learners.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Checkout status of your Support tickets</strong></p>\n<p class=""chakra-text css-o3oz8b"">Manage and streamline your view of the support tickets, community conversations, and people you follow in the \'My Profile\' section.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Solved, helpful, and recommended posts</strong></p>\n<p class=""chakra-text css-o3oz8b"">Let other learners know which posts solved your problem, highlight helpful responses, and get the answers you want faster with recommended posts.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Build your reputation in the community</strong></p>\n<p class=""chakra-text css-o3oz8b"">Explore and participate in Support Community programs to earn points, levels, and badges. Have fun and unlock rewards along the way.</p>\n<h3 class=""chakra-heading css-k57syw"">Join the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://udacity.zendesk.com/hc/en-us/community/topics"">Support Community<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> now</h3></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.1  Meet Your Instructor,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hi, everyone! My name is <strong>Peter Zastoupil</strong>.</p>\n<p class=""chakra-text css-o3oz8b"">I\'m an enterprise software developer and teacher at Cook Systems, an IT solutions and training company. My background includes many languages and tools, but Java and Spring are two of my oldest skills. I\'m excited to share them with you!</p></div>']",[],https://www.youtube.com/embed/NaWbj5NxxtA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.2  Prerequisites,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To get the most out of this course, you should already be familiar with the basics of Java, SQL, and IDEs.</p>\n<p class=""chakra-text css-o3oz8b"">If you\'re looking to get started with Java, Udacity has a free <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.udacity.com/course/java-programming-basics--ud282"">Java Programming Basics<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> course, which as a bonus introduces IntelliJ IDEA as an IDE. Another resource is the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/tutorial/index.html"">Java Tutorials<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> from Oracle. These are also an excellent reference, especially if you\'re already familiar with another language and just need to know what\'s different in Java. That being said, we do expect you to be very familiar with Java in this course, so proceed at your own risk if you\'re attempting to come here from another language!.\nIf SQL is a no for you: check out Udacity\'s free <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.udacity.com/course/intro-to-relational-databases--ud197"">Intro to Relational Databases<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> course, where you\'ll learn both to design and query SQL databases.</p>\n<p class=""chakra-text css-o3oz8b"">If IntelliJ IDEA is new territory, you can take a look at their <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/idea/features/"">feature overview<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> to get a sense of what\'s possible. Note that we will be using the open-source Community Edition of IntelliJ in lessons. If you want to pay for the Ultimate Edition, you are free to, but it is not required. If IDEs are new to you entirely, check out the last lesson of Udacity\'s free <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.udacity.com/course/java-programming-basics--ud282"">Java Programming Basics<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> course for an introduction.</p></div>']",[],https://www.youtube.com/embed/3wJW64VN5GI
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.3  Introduction,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Web Development means building web applications, and in a standard web application, there are three main components:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Data Storage</li><li class=""css-cvpopp"">Application Logic</li><li class=""css-cvpopp"">Client Access</li></ul>\n<p class=""chakra-text css-o3oz8b"">By the end of the course, you\'re going to learn how to build and manage each of those components in Java using Spring Boot.</p>\n<h3 class=""chakra-heading css-k57syw"">Data Storage</h3>\n<p class=""chakra-text css-o3oz8b"">Some of those beans will be responsible for interacting with the database. We will be using a SQL database called H2, which is an in-memory SQL database hosted by Spring Boot. You\'ll learn to use MyBatis, a Java library for database interaction, to generate data-access beans, which will be used by other services in your application logic to satisfy client requests.</p>\n<h3 class=""chakra-heading css-k57syw"">Application Logic</h3>\n<p class=""chakra-text css-o3oz8b"">Application logic manages client access and database interaction. For this course, you\'re going to learn how to use Spring Boot to maintain a collection of beans, which are small components of application logic that can interact with each other to carry out complex tasks.</p>\n<h3 class=""chakra-heading css-k57syw"">Client Access</h3>\n<p class=""chakra-text css-o3oz8b"">The client that will access our application is a web browser, which will send HTTP requests to our app and usually expects HTML in return. Using Spring MVC and Spring Security, libraries provided to us by Spring Boot, you will learn to create special beans called <em class=""chakra-text css-o3oz8b"">controllers</em> that you can configure to respond to client requests and generate HTML responses. Controllers act as the entry points of your application, from a client\'s perspective.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Architecture of a Web Application</strong>: Notice which Spring concepts intersect with which roles!</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed7eb47_l0-10-intro-to-web-development/l0-10-intro-to-web-development.jpg'],https://www.youtube.com/embed/9O5ywNRPecE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.4  Why Java Web Development,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Learning web development is valuable because it\'s how the digital apps and services that we use every day are built. Being able to visualize the architecture of a web application will make you a better developer and give you tools to use when turning an app idea into reality.</p>\n<p class=""chakra-text css-o3oz8b"">Learning Java is valuable because it\'s a widely-used industry mainstay, and it has a massive community of developers and open-source projects, like Spring Boot. Learning Spring Boot matters because it\'s a core Java library that supports and defines language-wide best practices. Mastery of Spring will make you an excellent Java developer and expose you to the Java-standard solutions to a wide range of common problems. Learning to recognize those common problems will make you a better developer. Wherever you go, whatever language you use, the same problems will arise, and you\'ll know what kind of solutions to look for.</p></div>']",[],https://www.youtube.com/embed/k-cTY5niqNc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.5  Business Stakeholders,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On a professional development team, many people are involved in the choice of language and framework:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Developers</strong> who write the code.</li><li class=""css-cvpopp""><strong>Testers</strong> who write and run tests.</li><li class=""css-cvpopp""><strong>Designers</strong> who create prototypes for the developers to implement.</li><li class=""css-cvpopp""><strong>Project Architects</strong> who choose the technologies best suited to a project\'s requirements</li><li class=""css-cvpopp""><strong>Business Analysts</strong> who write technical specifications for the developers to follow.</li><li class=""css-cvpopp""><strong>Project Managers</strong> who plan development efforts.</li></ul>\n<p class=""chakra-text css-o3oz8b"">This course is for anyone in these roles who is looking to do web development with Java and Spring.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>How the Choice of Java and Spring Affects Members of a Development Team</strong></p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed80359_l0-18-business-stakeholders/l0-18-business-stakeholders.jpg'],https://www.youtube.com/embed/SZ7VPAzBVpc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.6  Spring vs Spring Boot,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.7  When to Use Spring Boot,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When deciding if the topics you will learn in this course are a good fit for a project you\'re working on, consider your environment, project features, and testing goals.</p>\n<p class=""chakra-text css-o3oz8b"">If you feel comfortable with Java and your environment supports it, it\'s a great language for any size project. But if you need ultra-high performance, a bare-metal language like C, C++, Rust, or Go might be a better choice.</p>\n<p class=""chakra-text css-o3oz8b"">If your project aims to connect simultaneous users on different clients, you probably need to build a server, which Spring Boot can help with. If you\'re making a website with dynamic data, Spring Boot provides <strong>Thymelea</strong>f as an HTML template engine. If you store and manage data in a database, Spring Boot supports a plethora of Java libraries that provide database access, including <strong>MyBatis</strong>, which we cover in this course. As long as you need a server, Spring Boot is probably the right choice.</p>\n<p class=""chakra-text css-o3oz8b"">If you need to test your application by automating a web browser, <strong>Selenium</strong> is the industry standard. There are libraries for many languages to use Selenium, and Java is one of them. Selenium also has integrations with Spring Boot that make testing server behavior a breeze.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following projects is not a good fit for Java and Spring Boot?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A graphics processing application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An e-commerce website</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A note-taking app</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An online video game</p></div>']",[],https://www.youtube.com/embed/_uzSCyHH42U
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.8  History,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Networked computing has existed for nearly sixty years. First, specific programs were designed to speak to each other, but over the years several standards for different data protocols were established. In this era, the server/client dichotomy reigned supreme, with specialized server and client programs developed for individual network tasks like file sharing and email exchange. This changed with the development of the world wide web, HTTP, and HTML. As web sites became more complex, the web servers took on more and more roles as the mediator between the user\'s browser and other relevant services. This amalgamation of web server responsibilities coincided with the release and popularity of Java, which was soon accompanied by official web servlet and application container specifications which solved common problems when constructing complex, feature-rich web servers.</p>\n<p class=""chakra-text css-o3oz8b"">With the rise of the web, software developers began to meet and share ideas in open source communities online. These groups developed useful tools and utilities, including Spring, which aimed to build on Java\'s rich server architecture and provide a boilerplate-free enterprise development experience. It has grown into an industry standard, and an umbrella project that supports a vast array of powerful utilities and frameworks.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Check all the factors that directly led to the rise of Spring.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">TCP/IP</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open Source Communities</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Network Engineers</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application Containers</p></div>']",[],https://www.youtube.com/embed/VJfJFGOwPxE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.9  Course Outline,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Structure of this Course and the Dependencies between Lessons</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Course Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Basics of <strong>Java server architecture</strong>, dependency management in Java, and how Spring integrates with both.</li><li class=""css-cvpopp""><strong>Core Spring principles</strong>. We\'ll be covering dependency injection, bean configuration, service development, and server-wide configuration.</li><li class=""css-cvpopp""><strong>Spring MVC and Thymeleaf</strong>, an HTML template engine. We\'ll talk about Spring controllers, Thymeleaf template attributes, and connecting the two with the MVC pattern.</li><li class=""css-cvpopp""><strong>Connecting your Spring app to a database</strong> and securing it with <strong>Spring Security</strong>. We\'ll cover the basics of ORM and MyBatis, an ORM tool for Java. We\'ll use the database to store user credentials securely and use them to authenticate users with Spring Security.</li><li class=""css-cvpopp""><strong>Testing and web browser automation with Selenium</strong>. We\'ll cover how to set up and run tests with JUnit, how a web driver works, and how to simulate user actions in the browser with Selenium. We\'ll also discuss page objects, Selenium\'s powerful abstraction tool.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed805e9_l0-30-course-outline/l0-30-course-outline.jpg'],https://www.youtube.com/embed/6y49Lv8u9b8
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,"1.10  Tools, Environment & Dependencies","['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To get the tools required for this course:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Download the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.oracle.com/java/technologies/javase-downloads.html"">JDK 15<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Accept the license agreements and run the downloaded installer.</li><li class=""css-cvpopp"">Download the Community Edition of <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/idea/download/"">IntelliJ IDEA<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Run the downloaded installer.</li><li class=""css-cvpopp"">Make sure you have a modern web browser installed. We recommend <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.google.com/chrome/"">Google Chrome<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As you set up your system for the course, check the tasks off the list below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download and install JDK 15.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download and install IntelliJ IDEA Community Edition.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Check if you have a modern web browser installed. If not, install Google Chrome.</p></div>']",[],https://www.youtube.com/embed/RZS0KjxRcYg
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.11  Project: SuperDuperDrive,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The End Product of the Project</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For the final project of the course, you\'re going to put all of your skills to the test to build a fully-functional web app with Spring Boot. You\'ll be developing a personal storage app that allows users to store files, personal notes, and website credentials securely for a new company in the cloud storage business, <strong>Super<em class=""chakra-text css-o3oz8b"">Duper</em>Drive</strong>. You\'ll have some help, in the form of a database schema and website prototype HTML files provided by your tech lead at the company. You\'ll be responsible for developing the registration, login, and data storage features of the application, as well as writing tests to verify the app is feature-complete.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed80794_superduperdrive/superduperdrive.png'],https://www.youtube.com/embed/cLvTm8qKeKc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.12  Recap,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Overview of Curriculum Goals and Applications</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In this course, we\'re going to:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Build web apps with Java and Spring Boot.</li><li class=""css-cvpopp"">Learn what a Java web server is and how to build applications for it with Spring.</li><li class=""css-cvpopp"">Present our applications on the web with Thymeleaf and Spring MVC, and we\'ll connect to a database to store user data with MyBatis.</li><li class=""css-cvpopp"">Learn how to secure our website with Spring Security and test it with JUnit and Selenium.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Together, these skills are going to allow us to build secure, maintainable, and reliable web applications with ease. You\'ll be capable of taking on any web development scenario with confidence, especially one that involves registering and authenticating users, storing user-submitted data, and allowing the user to access and edit their data through a web site. Something like a file-storage app, perhaps?</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed989cf_l0-42-recap/l0-42-recap.jpg'],https://www.youtube.com/embed/OLNq1QU84UE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.13  Good Luck!,[],[],https://www.youtube.com/embed/25HzguEoP5s
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.1  Web Development in Java,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>This Lesson is Your Introduction to Java Web Development</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<p class=""chakra-text css-o3oz8b"">In this lesson, you\'ll be introduced to the following ideas and tools:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Java Application Servers:</strong> We introduce the basics of server-side web development and how a Java Application Server simplifies things.</li><li class=""css-cvpopp""><strong>Java Servlets:</strong> We discuss the central feature of the Application Server, the Servlet, and how it allows developers to access the conveniences provided by the Application Server.</li><li class=""css-cvpopp""><strong>Spring Applications:</strong> We introduce Spring Framework, a collection of Java libraries and tools that build on the Application Server and Servlet to provide a huge amount of utility to Java web developers.</li><li class=""css-cvpopp""><strong>Spring Starter Packs:</strong> We discuss the various ""starter packs"" available through Spring Boot\'s project generator, which can be used to quickly get up and running with a new Spring Boot project configured for specific features.</li><li class=""css-cvpopp""><strong>Maven and the POM file:</strong> We introduce Maven, a dependency management tool for Java that allows developers to easily use powerful open-source libraries in their projects. We discuss how dependencies are declared in Maven\'s <code class=""chakra-code css-1u83yg1"">pom.xml</code> file.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Source Code</h3>\n<p class=""chakra-text css-o3oz8b"">All the code examples and exercise solutions of the current course (all lessons) are available in this <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples"">Github repository<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.\nWe recommend you to download the course repository to look at the code examples present in the <code class=""chakra-code css-1u83yg1"">udacity-jwdnd-c1-snippets-master</code> directory in conjunction with watching the demonstration-videos.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> - In the Github repository, the lesson and exercise numbers start from 0, just like it does in array-indexes.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">How to download a Git repository</h3>\n<p class=""chakra-text css-o3oz8b"">If you are not familiar with Git, refer to our free course <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.udacity.com/course/version-control-with-git--ud123"">Version Control with Git<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, and learn about basic commands, such as <code class=""chakra-code css-1u83yg1"">init</code>, <code class=""chakra-code css-1u83yg1"">clone</code>, <code class=""chakra-code css-1u83yg1"">add</code>, <code class=""chakra-code css-1u83yg1"">commit</code>, and <code class=""chakra-code css-1u83yg1"">push</code>, which you may need moving forward.</p>\n<p class=""chakra-text css-o3oz8b"">In general, the steps for downloading (clone) a Github repository are:<br>\n<strong>Step 1.</strong> Download and install the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://git-scm.com/downloads"">Git for your OS<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> <br><br>\n<strong>Step 2.</strong> Open terminal (macOS/Linux) or Git Bash (Windows). <br><br>\n<strong>Step 3.</strong> Run the following commands:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Change your directory</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">cd</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>path to a directory where you want to download the repository</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Download the repository</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">git</span><span> clone https://github.com/udacity/nd035-c1-spring-boot-basics-examples.git\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Go inside the downloaded repository</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">cd</span><span> nd035-c1-spring-boot-basics-examples\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># List the files in the current directory</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ls</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b""><strong>Once downloaded, you can import the downloaded repository (or sub-folders) into the IntelliJ IDE to view, and run the application code.</strong></p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> - Github doesn\'t support downloading <em class=""chakra-text css-o3oz8b"">only</em> a sub-folder from a Github repository, although there are workarounds available. Instead, Github allows us to download the entire repository.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Recommendation</h3>\n<p class=""chakra-text css-o3oz8b"">In the IntelliJ IDE, create a separate project for each new exercise you will practice in this course.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed80dde_l1-lesson-outline/l1-lesson-outline.png'],https://www.youtube.com/embed/t0Oj-CM31XE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.2   Programming for the Web in Java,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>How a Java Application Server Connects Applications to the Web</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A web server\'s primary role is listening for HTTP requests and handling them with application logic, sending an HTTP response to the client that indicates the result of the operation. Simple HTTP servers host directories of HTML files directly, sending files in response to requests for specific URLs. This is enough for static websites with no dynamic server operations, but modern web apps support users accounts, complex interactions, and persistent data. Java application servers make these features more accessible by hosting many individual applications, managing them over a common interface, the servlet. This allows developers to focus on application logic and features, with HTTP request handling and routing handled by the server.</p>\n<p class=""chakra-text css-o3oz8b"">Spring provides additional sets of libraries that integrate with the servlet interface to provide applications with even more utilities that focus on database access, security, and HTML generation, and it\'s the tool we\'ll use to build our web applications.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Choose the correct statement about Java Application Servers and their place in web development.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">They allow developers to share open-source libraries</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">They host many specialized applications in parallel</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">They host HTML files for web browsers</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What are some services that Spring helps manage for us?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Login Security</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HTML Generation</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Responding to Browser Requests</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Database Access</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Running Multiple Java Programs in Parallel</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>HTTP Request/Response:</strong> HTTP, or <strong>H</strong>yper<strong>T</strong>ext<strong>T</strong>ransfer<strong>P</strong>rotocol, is a binary data format for communication between programs over the web. It can be broken down into two basic message types: requests and responses. Clients send requests for resources to servers, which respond with the requested data. <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages"">Read more about the protocol here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><strong>HTTP <code class=""chakra-code css-1u83yg1"">GET</code> and <code class=""chakra-code css-1u83yg1"">POST</code>:</strong> Every HTTP request has an important header that determines its <em class=""chakra-text css-o3oz8b"">method</em>. <code class=""chakra-code css-1u83yg1"">GET</code> and <code class=""chakra-code css-1u83yg1"">POST</code> are two of the most common; <code class=""chakra-code css-1u83yg1"">GET</code> indicates a request for data from the server, and <code class=""chakra-code css-1u83yg1"">POST</code> represents a request to ""post"" new data to the server - this usually represents some action on server data like submitting search terms, posting an update, or adding new data to the server.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed8365b_l1-06-big-picture/l1-06-big-picture.jpg'],https://www.youtube.com/embed/JI6cbTaOapQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.3  Web Development with Java,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When building a web application, there are a lot of helpful tools that can solve common problems for you. How do you decide what you need to implement a given feature?</p>\n<p class=""chakra-text css-o3oz8b"">Since we\'re going to be building web apps with Java and Spring boot, the first step is to research what Spring supports and recommends for that feature. <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects"">Spring\'s website<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> includes documentation and examples for a wide range of features and libraries, and is a great place to start. Once you\'ve decided on a library to use, the next step is finding its website and documentation. Most open-source libraries have extensive documentation that covers getting started, usage examples, and complete references. You can use these resources to implement your feature and debug issues along the way. Finally, if you encounter issues that documentation alone can\'t solve, you should search Google for to find similar issues and solutions others have encountered.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match the stage of development to the next step you should consider at that stage.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Starting a new feature</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Research if and how Spring supports the feature</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Using a library for the first time</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Read the library\'s getting-started documentation and usage examples</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Debugging a feature that uses a library</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Review the library\'s reference documentation and search the web for similar issues</p></div>']",[],https://www.youtube.com/embed/VYA8VzMDJ90
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.4  Java Application Server,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A Java Application Server is a <em class=""chakra-text css-o3oz8b"">pluggable architecture</em> that can host many deployed applications at once. It provides utilities like multi-threading, request filtering, and resource sharing to each application. Those applications must expose endpoints that handle the requests routed to them by the server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Structure of a Java Application Server</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>HTTP</strong>: Hypertext Transfer Protocol. A binary protocol that originally defined the mechanics of requesting and sending HTML over the internet.</li><li class=""css-cvpopp""><strong>Web Server</strong>: A program that listens for and responds to HTTP requests over the internet</li><li class=""css-cvpopp""><strong>Application Server</strong>: A program that hosts other applications, forwarding incoming requests to the appropriate application according to a filter. Provides shared access to resources and multi-threading.</li><li class=""css-cvpopp""><strong>Pluggable Architecture</strong>: A pluggable architecture refers to any piece of software that allows parts of it to be added, replaced, and removed. Usually, this is achieved through a common interface for every ""pluggable"" component. Sometimes the architecture can even replace components at runtime, as is the case with Servlets in an Application Server.</li><li class=""css-cvpopp""><strong>Threads/Threading</strong>: These terms come from concurrent programming - a thread is essentially one track of computation, and multi-threading is running multiple threads in parallel. This gets a little complicated because your CPU has a limited number of physical cores that can process instructions in parallel, while the number of threads you can have can be many more than your computer has cores, but that\'s a topic for another time!</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Oracle documentation for <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://javaee.github.io/tutorial/overview005.html#BNABO"">Java EE Containers/Servers<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed836cc_l1-16-the-java-application-server/l1-16-the-java-application-server.jpg'],https://www.youtube.com/embed/eggveTIXAx0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.5  Java Application Server Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What’s the role of HTTP when your browser makes a request for a web page?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HTTP is a protocol for creating the web page returned by the request</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HTTP is a protocol for formatting web requests so that your Application Server can understand them</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HTTP is a protocol describing how the Application Server talks to your application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Choose the correct benefits of a Java application server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It automatically handles multiple client connections simultaneously.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It can be configured to forward requests with custom logic.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It can share heavyweight or universal components with each of its applications.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It can display web pages by itself.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It can respond to HTTP requests with application data by itself.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.6  Java Servlets,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">Servlet</code> class is the main connection between the apps you develop and the application server they run on. By extending <code class=""chakra-code css-1u83yg1"">Servlet</code>, you can create endpoints that handle incoming requests in a way specific to your application needs, and you can map specific request URLs to specialized servlets by adding entries to a <code class=""chakra-code css-1u83yg1"">web.xml</code> file. The app server uses this configuration to instantiate and manage your servlets. It interacts with each through three standard methods, <code class=""chakra-code css-1u83yg1"">init</code>, <code class=""chakra-code css-1u83yg1"">service</code>, and <code class=""chakra-code css-1u83yg1"">destroy</code>:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">service</code> is where requests are handled, and the server will call this method when a request is routed to the servlet it\'s called on.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">init</code> is where initialization of the servlet is handled, and the server will call this method directly after instantiating the servlet.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">destroy</code> is where servlet resource cleanup is handled, and is called directly before the server terminates the servlet instance.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Lifecycle of a Servlet in an Application Server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">A quick note on Java Application Files:</h3>\n<p class=""chakra-text css-o3oz8b"">When you compile a Java program and <em class=""chakra-text css-o3oz8b"">package</em> it to be run, the Java compiler creates what is called a <strong>J</strong>ava <strong>AR</strong>chive, or JAR file. This file contains a compressed file hierarchy, with folders that represent Java packages that contain Java <code class=""chakra-code css-1u83yg1"">.class</code> files, which are the compiled versions of <code class=""chakra-code css-1u83yg1"">.java</code> source code files. It can also contain arbitrary resource files, either at the root level or deeply nested in the package hierarchy. These files often contain metadata related to the app or library contained in the JAR file, which can be read by any program that interacts with the JAR.</p>\n<p class=""chakra-text css-o3oz8b"">When you want to deploy an app to an app server, you have to package it as a <strong>W</strong>eb application <strong>AR</strong>chive, or WAR file. A WAR file is almost identical to a JAR file, but includes configuration files specific to web applications. When we copy a WAR file into the deployment directory of an app server, the server unpackages it, looks for a <code class=""chakra-code css-1u83yg1"">web.xml</code> file, and uses that file to find the classes and resources required by the application. This uses advanced Java features like reflection and class loading to programmatically load Java class definitions and instantiate them which is quite a nifty trick! It allows us to dynamically load, start, stop, and replace any number of applications in a web server at any time.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Endpoints</strong>: An <em class=""chakra-text css-o3oz8b"">endpoint</em> is the address at which a client can reach a specific part of a server\'s functionality. Usually, this is a URL path, the <code class=""chakra-code css-1u83yg1"">/words/and/slashes</code> that follow the domain of a URL, like <code class=""chakra-code css-1u83yg1"">.com</code> or <code class=""chakra-code css-1u83yg1"">.org</code>.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">Servlet</code></strong>: A class defined as a part of the Java: Enterprise Edition specification. Provides an implementable interface for web server request processing, defining a <code class=""chakra-code css-1u83yg1"">service</code> method that the server invokes on an instantiated servlet to handle a <code class=""chakra-code css-1u83yg1"">ServletRequest</code> and <code class=""chakra-code css-1u83yg1"">ServletResponse</code> object for an incoming request. The servlet also defines lifecycle methods for the server to invoke when initializing or destroying a servlet.</li><li class=""css-cvpopp""><strong>JAR</strong>: A Java Archive file, which stores compiled <code class=""chakra-code css-1u83yg1"">.class</code> files in a folder hierarchy that matches the code\'s package structure. Includes an optional manifest file.</li><li class=""css-cvpopp""><strong>WAR</strong>: A variation on the JAR for web applications, which optionally includes web resources like HTML files and configuration files like <code class=""chakra-code css-1u83yg1"">web.xml</code> for servlet registration/mapping.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Official documentation of the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://javaee.github.io/tutorial/servlets.html#BNAFD""><code class=""chakra-code css-1u83yg1"">Servlet</code> API<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp"">Official documentation for the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/jar/package-summary.html"">Java JAR API<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp"">Official documentation for <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://javaee.github.io/tutorial/packaging003.html#BCGHAHGD"">packaging WAR files<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed837a2_screen-shot-2020-06-03-at-4.51.26-pm/screen-shot-2020-06-03-at-4.51.26-pm.png'],https://www.youtube.com/embed/DNZVE0NJlZ0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.7  Java Servlets Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What\'s the relationship between the Application Server and a Servlet?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Servlets handle routing HTTP requests to an Application Server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application Servers receive HTTP requests, parse the information, and send it to all the Servlets at once.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Servlets request information from the Application Server when a new HTTP request arrives.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application Servers receive HTTP requests, parse the information, and decide which Servlet should receive a request object.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements are true?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application Servers can execute any methods of your Application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The init method of your Servlet is called only once, after being instantiated.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The service method of your Servlet can be called many times.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The HTTP requests received by the Application Server indicate which Servlet should process them.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An Application Server can load Servlets from a WAR file at any time.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.8  Spring Applications,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring is an <em class=""chakra-text css-o3oz8b"">application framework</em>, which means that instead of choosing when to invoke it from your application, you choose when it invokes your application code. This pattern of software development is called Inversion of Control (IoC), and it\'s powerful because it allows developers to develop specialized application components and use Spring to connect them with each other using dependency injection. This is good for clean, separated code and for code reuse. This is evident when looking at the vast number of Spring modules and Spring-integrated third-party tools that are available. This course focuses on a few of them:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Spring MVC</strong>, a generic web controller library for Spring that supports a wide variety of utilities to simplify the handling of HTTP requests</li><li class=""css-cvpopp""><strong>Thymeleaf</strong>, a third party template engine that can integrate with Spring MVC to simplify the generation of web pages as responses to HTTP requests</li><li class=""css-cvpopp""><strong>Spring Security</strong>, a generic authentication library for Spring that can integrate with many different credential sources and authentication protocols to automatically manage request authentication and security contexts</li><li class=""css-cvpopp""><strong>MyBatis</strong>, a third-party database access library that provides simple SQL/Java mapping tools that can be defined in Spring components</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">The End of Boilerplate: Spring Boot</h3>\n<p class=""chakra-text css-o3oz8b"">So Spring adds a lot of features, but it still sounds like a lot of configuration. We still have to deploy it to an application server, right? And we still have to create a servlet for Spring to live in. It also sounds like getting all of these modules and utilities to work together might take some work.</p>\n<p class=""chakra-text css-o3oz8b"">In the past, Spring did require a lot of configuration, but over time, the development world has moved towards a convention-over-configuration approach. Spring Boot is a project that provides an a-la-cart Spring experience, complete with a web page for generating and downloading starter projects based on the application needs. Most Spring Boot applications today also contain an embedded application server with a default, pre-configured servlet definition. All you have to do to run your Spring-enabled code as a server is to run a main method.</p>\n<p class=""chakra-text css-o3oz8b"">With the rise of containerized architectures like Docker, this style of application development has become as popular as the pluggable application server, and in this course, we\'ll be exclusively using this mode. However, if you do want to deploy your Spring Boot application to a traditional application server, there are built-in tools that allow you to package the application as a standard WAR file.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>IoC</strong>: Inversion of Control, which is the practice of designing libraries as <em class=""chakra-text css-o3oz8b"">application runners</em>. This allows developers to focus on application-specific logic and rely on IoC containers to connect application components with one another, eliminating a lot of boilerplate and encouraging a clean separation of development concerns.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Inversion of Control still seem a little hard to conceptualize? <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.youtube.com/watch?v=vFzP2SaMyA0"">Watch this video<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> from Udacity for a dead-simple explanation of the basics.</li><li class=""css-cvpopp"">Official Spring framework <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/"">website<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp"">An <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.martinfowler.com/articles/injection.html"">article<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> about Inversion of Control by Martin Fowler from the beginning of the pattern\'s popularity.</li></ul></div>']",[],https://www.youtube.com/embed/Cla07Uh3Ctc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.9  Spring Applications Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What’s the relationship between Spring and a Java Application Server?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring dispatches Servlet requests from the Application Server to specific Java code to handle the requests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring instantiates specific Servlets for each request based on definitions the web.xml file.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Application Server instantiates Spring whenever it receives a web request.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Inversion of Control is one of the main features of Spring. It allows Spring to manage instances of dependencies and provide them when needed.</p>\n<p class=""chakra-text css-o3oz8b"">We could say that Spring’s ability to inject dependencies is just like the Application Server’s ability to provide what?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HTTP Responses</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Endpoints</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Servlets</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Database Connections</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring provides a lot of additional features that can help us receive requests and create responses. What are some things Spring can help us do?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use templates to generate webpages as responses to HTTP requests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Manage security contexts and authenticate requests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Route HTTP requests to specific application code.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Inject object instances into services that need to use them.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.10  Exercise: Spring Applications,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here is the list of parameters that you can specify at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://start.spring.io/"">start.spring.io<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> before generating the project zip:</p>\n<h4 class=""chakra-heading css-1dlhxqh"">General Configuration</h4>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Parameter</strong></th><th class=""css-zl9m57""><strong>Value</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Project (dependency management system)</td><td class=""css-1eywhk4"">Maven</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Language</td><td class=""css-1eywhk4"">Java</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Spring Boot version</td><td class=""css-1eywhk4"">Choose a stable version, <code class=""chakra-code css-1u83yg1"">2.3.0</code> or higher</td></tr></tbody></table></div>\n<h4 class=""chakra-heading css-1dlhxqh"">Project Metadata</h4>\n<p class=""chakra-text css-o3oz8b"">Though you can choose the values of your choice, here are sample values for your first Spring application:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Parameter</strong></th><th class=""css-zl9m57""><strong>Value</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Group</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">com.udacity.jdnd</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Artifact</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">course1</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Name</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">course1</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Description</td><td class=""css-1eywhk4"">Type the description of your choice, such as <code class=""chakra-code css-1u83yg1"">My first project for Spring Boot</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Package name</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">com.udacity.jdnd.course1</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Packaging</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">Jar</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Java version</td><td class=""css-1eywhk4"">Select the Java version installed on your system.</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Dependencies</td><td class=""css-1eywhk4"">Select <strong>Spring Web</strong>. This dependency is used for building RESTful web applications using Spring MVC. <br> It uses Apache Tomcat as the default embedded container.</td></tr></tbody></table></div></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Set up a new Spring Boot project:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Navigate to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https:%5Cstart.spring.io"">start.spring.io<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> in your browser.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select a group, artifact, name, Java version, and packaging of your choice. For example, you could set the group to <code class=""chakra-code css-1u83yg1"">com.udacity.jdnd</code> and have your project named <code class=""chakra-code css-1u83yg1"">course1</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add the dependency <strong>Spring Web</strong>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Click the ‘Generate’ button at the bottom of the page to download the project. Extract it to the location you want your project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open IntelliJ IDEA.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">From the File menu, select Open and then navigate to the location you extracted your project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In the Project structure pane, navigate to the only class in the project. If you used the names above, this will be <code class=""chakra-code css-1u83yg1"">com.udacity.jdnd.course1.Course1Application.java</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Right click this class and run it. This should launch the application.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.11  Solution: Spring Applications,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Spring Initializr</h3>\n<p class=""chakra-text css-o3oz8b"">This is a helpful page for generating our starter projects. Here’s an example of the configuration for a simple starter project using Spring Web:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Example Spring Initializr Configuration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Once you’ve generated the starter project, open it in IntelliJ using the File menu and selecting Open. You can open a directory and IntelliJ will create a new project and import your dependencies.</p>\n<p class=""chakra-text css-o3oz8b"">Navigate to the package <code class=""chakra-code css-1u83yg1"">src/main/java/com.udacity.jdnd</code> and find the <code class=""chakra-code css-1u83yg1"">Course1Application.java class</code>. This is the main class that launches the Spring Boot application. You can run it by simply right clicking on it and choosing “Run Course1Application.java”.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed92bd2_screen-shot-2020-06-04-at-10.12.47-am/screen-shot-2020-06-04-at-10.12.47-am.png'],https://www.youtube.com/embed/UoiFv7915QQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.12  Spring Starter Packs,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Spring Starter Packs Setup</h3>\n<p class=""chakra-text css-o3oz8b"">Spring is a collection of open-source libraries that solve common web development problems. But how do we get those libraries? In this course, we\'ll be using Maven, a dependency management tool that lets us define dependencies on open-source libraries based on their names and version numbers. We define those in a file in our projects called <code class=""chakra-code css-1u83yg1"">pom.xml</code>, which Maven reads and uses to download the required libraries. We can also have our projects inherit dependencies from some base project, which is a feature that Spring Boot uses to make setting up a new Spring project easy as pie. We\'ll be using Spring Initializr, an online project generator, to choose specific Spring dependencies to add to new Spring projects.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Boot is best experienced with the help of Spring Initializr, an official project generator. You can use it to configure metadata and build properties of a project as well as what starter dependencies you want to include. These include:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/1.5.16.RELEASE/reference/html/using-boot-devtools.html"">Spring Dev Tools<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>: utilities including hot reloading changed code into a running application</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html"">Spring MVC<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>: web layer utilities that make developing server-side web apps easy</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects/spring-data"">Spring Data<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>: a common interface for many different types of database access</li><li class=""css-cvpopp"">And <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects"">many more<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>\nOnce you\'ve selected your dependencies and chosen your language, build tool, and project identifiers, Spring Initializr will generate a zip file that includes a ready-to-run server with all of the choices you made reflected in its <code class=""chakra-code css-1u83yg1"">pom.xml</code> file, as well as the package structure.</li></ul></div>']",[],https://www.youtube.com/embed/vhDtf0kxPU4
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.13  Spring Starter Packs Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match the following fields on the Spring Initializr page to their function:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Used to specify whether a project should run as a standalone application or be deployed to an application server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Packaging</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Used to specify which external libraries to make available to your program</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Dependencies</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Used to specify the project name</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Artifact</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Used to specify the classpath of project artifacts</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Group</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Spring Starter Packs Quiz</h3>\n<p class=""chakra-text css-o3oz8b"">Pretend it’s time to make a new project having a basic user interface, using the Spring Initializr and you must decide <em class=""chakra-text css-o3oz8b"">what requirements to include</em>. Assume that we would include at least <em class=""chakra-text css-o3oz8b"">Spring MVC</em>, <em class=""chakra-text css-o3oz8b"">Thymeleaf</em>, <em class=""chakra-text css-o3oz8b"">Spring Security</em>, and <em class=""chakra-text css-o3oz8b"">MyBatis</em>, as mentioned earlier in this course. Please answer the following quiz question.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following dependencies do you think we should include in a project that wants to use these tools to support REST web services and writes to a PostgreSQL database?</p>\n<p class=""chakra-text css-o3oz8b"">Click the ‘Add’ button on the start.spring.io page to see descriptions of different dependencies.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Boot DevTools</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Web</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Web Services</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Thymeleaf</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Security</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JDBC API</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">MyBatis Framework</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">PostgreSQL Driver</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Integration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Boot Actuator</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As the instructions said, we definitely need Thymeleaf, SPring Security, and MyBatis. Thymeleaf requires Spring Web to function, so we need that too. MyBatis requires a database driver, and the only one listed is PostgreSQL, so that needs to be added as well. Finally, Spring DevTools provides valuable utilities for development on any Spring Boot project, so it should be included as well. The other dependencies are either already covered by the dependencies we\'ve listed, or they aren\'t relevant to our goals. JDBC is covered by MyBatis - both are APIs for database access. Spring Integration and Spring Actuator are high-level libraries for coordinating multiple servers or services, and we don\'t need them right now.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.14  Exercise: Spring Starter Packs,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.15  Solution: Spring Starter Packs,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are two ways to add a dependency to your project:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Using the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://start.spring.io/"">Spring Initializr<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></strong>: You can look up the values for new dependencies by adding them to a new project in Spring Initializr and then clicking the <strong>Explore</strong> button to browse the pom.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Manually in the IntelliJ IDE</strong>: You can also add dependency elements manually, and IntelliJ will try to find and suggest artifacts that match your entries. The auto-suggest feature is called <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/help/idea/auto-completing-code.html?keymap=secondary_macos"">Code completion<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>IntelliJ Suggesting Artifacts When Adding a Dependency to</strong>  <code class=""chakra-code css-1u83yg1"">pom.xml</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here’s an example <code class=""chakra-code css-1u83yg1"">pom.xml</code> that includes our new dependency:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 153, 153); font-weight: bold;"">&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">project</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">xmlns</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">http://maven.apache.org/POM/4.0.0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">xmlns:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">xsi</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">http://www.w3.org/2001/XMLSchema-instance</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">      </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">xsi:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">schemaLocation</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">modelVersion</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>4.0.0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">modelVersion</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">parent</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-starter-parent</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>2.2.7.RELEASE</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">relativePath</span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span> </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">&lt;!-- lookup parent from repository --&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">parent</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>com.udacity.jdnd</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>course1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>0.0.1-SNAPSHOT</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>course1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">description</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>My Super Cool Project</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">description</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">properties</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">java.version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>14</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">java.version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">properties</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependencies</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-starter-thymeleaf</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-starter-web</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-starter-test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">exclusions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">exclusion</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>              </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.junit.vintage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>              </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>junit-vintage-engine</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">exclusion</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">exclusions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependencies</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">build</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">plugins</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">plugin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-maven-plugin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">plugin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">plugins</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">build</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">project</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>']",['https://video.udacity-data.com/topher/2020/June/5ed92e5d_screen-shot-2020-06-04-at-10.24.03-am/screen-shot-2020-06-04-at-10.24.03-am.png'],https://www.youtube.com/embed/yevgULcdHmk
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.16  Edge Case: When You Can't Use Spring Boot,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the following scenarios and decide if you can use Spring Boot in each of them. Mark each scenario where Spring Boot is a viable choice.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A project that already uses Spring</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A project that uses Java EE Enterprise Java Beans and JNDI</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A project that uses Oracle WebLogic as an Application Server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A project that uses plain Servlets to handle requests</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Boot is great, but sometimes you’ll have to configure Spring manually or work in an environment where Spring is not available. Which of the following scenarios might result in a configuration that doesn’t use Spring Boot?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project uses Java EE instead of Spring</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project that needs to work with a legacy database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project utilizes many features specific to one application server in particular</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Sometimes, it\'s not an option to use Spring Boot in a project. Usually, this is because some form of IoC has already been implemented, or it would take a lot of time to rewrite the code to use Spring Boot. Sometimes, though, it\'s worth adding Spring or Spring Boot to a project by refactoring the code and adding the Spring Servlet manually. More information on this can be found in the Further Research section, but this won\'t be a focus for the course - just remember that it takes a decision and some setup to use Spring in an application, and not all applications do!</p></div>']",[],https://www.youtube.com/embed/274bwKHmqzI
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.17  Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Each lesson in this course, you will build on a single project, adding more features as we learn about them. For this lesson, you need to set that project up! Create a spring starter project with the dependencies used in this course, and verify the program runs successfully.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Go to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://start.spring.io/"">Spring Initializr<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> and add the following starter dependencies:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Spring Boot DevTools</li><li class=""css-cvpopp"">Spring Web</li><li class=""css-cvpopp"">Thymeleaf</li><li class=""css-cvpopp"">Spring Security</li><li class=""css-cvpopp"">H2 Database</li><li class=""css-cvpopp"">MyBatis Framework</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Make sure the metadata is set correctly:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">It\'s configured as a Maven project</li><li class=""css-cvpopp"">It\'s configured to use Java</li><li class=""css-cvpopp"">The group id is set to <code class=""chakra-code css-1u83yg1"">com.udacity.jwdnd.c1</code></li><li class=""css-cvpopp"">The artifact id is set to <code class=""chakra-code css-1u83yg1"">review</code></li><li class=""css-cvpopp"">The packaging is set to <code class=""chakra-code css-1u83yg1"">JAR</code></li><li class=""css-cvpopp"">The Java version is 14</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download the project somewhere you won\'t forget it!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the project in IntelliJ.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run the main application class and verify that it runs without errors.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.18  Solution: Final Review,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.19  Lesson Conclusion,[],[],https://www.youtube.com/embed/3fwD0T38Ja0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.1  Web Development,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Spring Boot\'s Building Blocks</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Lesson Outline</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Spring IoC Configuration</strong>: We discuss the basic mechanism at the core of Spring, Inversion of Control, and how to configure it for our applications.</li><li class=""css-cvpopp""><strong>Spring Components and Services</strong>: We introduce a mental model for developing with Spring, built around classes that we define called components and services.</li><li class=""css-cvpopp""><strong>Server-Wide Configuration</strong>: We learn how to configure certain server-wide properties of a Spring Boot application.</li><li class=""css-cvpopp""><strong>XML-Based Configuration</strong>: We discuss an older form of Spring configuration, still in use, that uses XML files to define dependencies, server-wide options, and more.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed93efc_l2-03-lesson-outline/l2-03-lesson-outline.png'],https://www.youtube.com/embed/q84URC4H6YM
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.2  The Spring Framework,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Spring Transformation</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows that Spring takes the component class files and dependency configuration from the developer and instantiates a system of Java objects with references to each other.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Of all the tools we\'ll be using in this course, Spring is the most important because it defines our entire style of application development. Spring is a framework for Inversion of Control, which means that to use it, we have to package our code into individual component classes, telling Spring which components need each other to function. Spring takes the component classes we define and the dependencies we define between them and instantiates a system of matching Java objects with references to each other. This frees us from having to write so-called ""glue code"" to instantiate, connect, and manage components manually, and allows us to instead focus on writing so-called business logic, or code that concerns itself exclusively on the conceptual model of the application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Inversion of Control (IoC)</strong>: A design pattern in which the developer creates independent application components and uses a framework to connect them, rather than writing the integration code themselves</li><li class=""css-cvpopp""><strong>Business Logic</strong>: Code that relates exclusively to an application\'s conceptual model and featureset. Contrast with utility code like database access, HTTP request parsing, etc.</li><li class=""css-cvpopp""><strong>Persistent Components</strong>: Java Objects that Spring maintains over time; they\'re persistent because they\'re created and maintained for as long as the application needs them to be.</li><li class=""css-cvpopp""><strong>Dependency Injection</strong>: A mechanism by which IoC may be implemented. Components are configured with dependencies on other components, which are injected at runtime. Injection is quite literal - a component\'s dependencies are usually expressed as annotated fields on the component class, and Spring will populate those fields with the dependencies at runtime.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What benefits of Spring help enable structured software development?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Encourage development of single-purpose components that can be combined to implement business features.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Forcing developer to identify the order components should be instantiated.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Injecting resources into whichever classes use them.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Matching dependency requests to resources by Java type, component name, or a configuration property.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Injecting values, strings, and numbers, but requiring complex objects to be created by the programmer.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed93f8f_l2-10-big-picture/l2-10-big-picture.png'],https://www.youtube.com/embed/nC57a-Gjm10
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.3  What is Spring,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/resisttheurge/udacity-jwdnd-c1-snippets/tree/master/src/main/java/com/udacity/jwdnd/c1/snippets/l2"">The code snippets for this lecture can be found here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">When designing Spring applications, the most important principle to keep in mind is separation of concerns. What that really means is that for every problem your application has to solve has a home in a component class that is easy to find and flexible to use. By building your application out of small but focused components, you\'ll make the most of Spring\'s boilerplate-crushing power, and when it\'s time to add new features, you\'ll know exactly where to put them. On a larger team, this means greater coordination and less time spent trying to find and eliminate redundancies and conflicts.</p>\n<p class=""chakra-text css-o3oz8b"">But in order to allow your components to communicate effectively with one another, you\'ll need a system of data types to share between them. These are simple classes designed to store structured data, and little else. They\'re useful as conceptual representations of application data, like user profiles, or shipment invoice details, but made to be used and manipulated by the components of an application. A good rule of thumb to decide which is which is the <code class=""chakra-code css-1u83yg1"">new</code> keyword test. A component should never be manually instantiated with the new keyword - components are managed by Spring, which means we need to rely on dependency injection to get a component reference. Data types, on the other hand, are no more special than Java\'s collections, and we can manually instantiate them with the <code class=""chakra-code css-1u83yg1"">new</code> keyword whenever we\'d like. Of course, we can use Spring (and its related libraries) to instantiate them for us as well, and in the coming lessons we sometimes will.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms:</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Separation of Concerns</strong>: A code organization philosophy that emphasizes single-purpose components. In Java and Spring, this means keeping all methods related to a specific problem domain in the same class, for the sake of maintainability and reducing code reuse.</li><li class=""css-cvpopp""><strong>Data Types</strong>: Sometimes called POJOs (plain-old-java-objects), Data Types are classes in application designed purely to hold structured application data, like users, profiles, or anything else an application might manage. These objects are helpful for us to maintain a good conceptual model of an application, and are created and accessed frequently during execution.</li><li class=""css-cvpopp""><strong>Components</strong>: Components are persistent class instances managed by Spring in an application. They usually resemble libraries more than typical objects, with methods that must be called to perform specific actions. Components are only created when Spring is configured to create them, usually at server startup.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the code examples below. Which ones might <strong>not</strong> reflect the best practices of using Spring we’ve discussed so far?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public void updateUserName(String name){\n</span>   User user = new User();\n   user.setName(name);\n   UserService userService = new UserService();\n   userService.updateUser(user);\n}```</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public interface IUserService {\n</span>   void updateUser(User user);\n   User findUser(String name);\n}\npublic interface IDeliveryService {\n   void scheduleDelivery(String address, LocalDate date);\n   LocalDate findNextDeliveryDate(String address);\n}```</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public interface IUserService {\n</span>   void updateUser(User user);\n   User findUser(String name);\n   void scheduleDelivery(String address, LocalDate date);\n   LocalDate findNextDeliveryDate(String address);\n}```</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public class User {\n</span>   private String name;\n   public User updateUser(){\n       userService.updateUser(this);\n       return this;\n   } / *rest of class omitted*/\n}```</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Below is a list of scenarios. In some cases, you should add new Spring components, while in other cases you should use existing components. Select the scenarios in which you should add a new component.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Your UserService currently can find users by name, but you want to be able to find them by birthday as well.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Your application currently stores user data, but now you want to save and access shoe data as well.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You want to add a shoe size attribute to your User data.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Your need to expose your UserService methods to a REST endpoint, which your application currently does not do.</p></div>']",[],https://www.youtube.com/embed/qJV8KRC9Xhc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.4  Spring Boot IoC Configuration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Under the hood, Spring is just a Java application itself - and it responds to our configuration in a predictable way. When a Spring application starts, it scans your code base for specially-marked class files and configuration options. It uses that information to instantiate your application components as Java objects, and it stores them in a special data structure called the application context. This context is ultimately very similar to a <code class=""chakra-code css-1u83yg1"">Map</code> or a python dictionary, and it can be queried at runtime to find specific components when needed. This is a closed system, so components instantiated outside of Spring won\'t automatically be injected with dependencies like those instantiated by Spring. Mind the <code class=""chakra-code css-1u83yg1"">new</code> keyword!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>How Spring Processes an IoC Configuration.</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows an example of how Spring processes an IoC configuration. The general steps are:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">A bean without dependencies is initialized first and placed within the application context.</li><li class=""css-cvpopp"">A service is instantiated by Spring, and the first bean is retrieved from the app context to be injected as a dependency, after which Spring places the service in the application context.</li><li class=""css-cvpopp"">Finally, another bean is initialized by Spring, which retrieves the previous two components to be injected as dependencies, after which the new bean is placed in the app context, and the application is fully initialized.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Configuration Files</strong>: Project files that configure some part of Spring\'s operation. Some are embedded in Java classes, like we just discussed, and others are <code class=""chakra-code css-1u83yg1"">.properties</code>, <code class=""chakra-code css-1u83yg1"">.yaml</code>, and <code class=""chakra-code css-1u83yg1"">.xml</code> files that we\'ll discuss later this lesson. Some of them configure the IoC context, like the ones we just discussed, and others configure more abstract pieces of Spring\'s system.</li><li class=""css-cvpopp""><strong>Component Annotations</strong>: Component annotations are annotations that identify application components for Spring to manage. <code class=""chakra-code css-1u83yg1"">@Bean</code> and <code class=""chakra-code css-1u83yg1"">@Configuration</code> are examples from the most recent videos, and in the next section we\'ll discuss <code class=""chakra-code css-1u83yg1"">@Component</code> and <code class=""chakra-code css-1u83yg1"">@Service</code> as well.</li><li class=""css-cvpopp""><strong>Application Context</strong>: Spring\'s application context is just a giant data structure that holds all application component instances. It can be queried to gain access to a specified component at runtime, and it\'s what Spring uses to resolve dependencies.</li><li class=""css-cvpopp""><strong>Beans</strong>: ""Beans"" are Spring\'s name for generic application components, and include any value Spring has stored in the application context. A bean is always either an object or primitive value.</li><li class=""css-cvpopp""><strong>Closed System</strong>: Spring\'s application context is a closed system, which means that it manages all of the components stored within. It is not possible to instantiate a component manually and still link it fully with Spring - it will never be aware of the components inside of Spring\'s application context, and vice versa.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code></strong>: An annotation put on the main application class of a Spring Boot project. It serves as an alias of three other annotations, <code class=""chakra-code css-1u83yg1"">@Configuration</code>, <code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code>, and <code class=""chakra-code css-1u83yg1"">@ComponentScan</code></li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Configuration</code></strong>: A class annotated with <code class=""chakra-code css-1u83yg1"">@Configuration</code> is instantiated and managed by Spring as a component, but also as a bean factory. Any methods of the configuration class that are annotated with <code class=""chakra-code css-1u83yg1"">@Bean</code> are used by Spring to create new beans to add to the application context.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Bean</code></strong>: A method annotated with <code class=""chakra-code css-1u83yg1"">@Bean</code> inside of a configuration class will be used by Spring to generate a bean of the method\'s return type. This means that the developer can manually configure beans to be included in the application context.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code></strong>: A class annotated with <code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code> tells Spring to try to automatically match beans to dependencies based primarily on type. This reduces the need for boilerplate code explicitly identifying individual beans as dependencies.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Primary</code></strong>: This annotation distinguishes the annotated bean method as the default dependency of its type. This is used to resolve conflicts that arise from having multiple bean definitions of the same type when auto configuration is enabled.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Qualifier</code></strong>: This annotation distinguishes the annotated bean method or dependency declaration as a qualified bean or dependency. Qualified beans are considered for unqualified dependencies, but only matching qualified beans are considered for qualified dependencies. You can read more about it <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-autowired-annotation-qualifiers"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements about Spring’s IoC Configuration are true:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code> annotation is shorthand for three other annotations: <code class=""chakra-code css-1u83yg1"">@Configuration</code>, <code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code>, and <code class=""chakra-code css-1u83yg1"">@Bean</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@Qualifier</code> annotation helps Spring figure out which bean to use if there are multiple options.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@Configuration</code> annotation allows the current class to extend Spring’s ApplicationContext.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You must use the <code class=""chakra-code css-1u83yg1"">@Bean</code> annotation for each component Spring needs to initialize.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans"">Official Spring IoC Documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-annotation-config"">Official Spring Annotation-Based Configuration Documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed946f4_screen-shot-2020-06-04-at-12.08.59-pm/screen-shot-2020-06-04-at-12.08.59-pm.png'],https://www.youtube.com/embed/QjtzCdGnV9Y
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.5  Components and Services,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If we want to declare custom classes as Spring Components, the best way to do it is to make use of <code class=""chakra-code css-1u83yg1"">@ComponentScan</code>, an annotation that tells Spring to search your code base for classes annotated with <code class=""chakra-code css-1u83yg1"">@Component</code>. These classes will automatically be instantiated as Spring beans, so there\'s no need to define an <code class=""chakra-code css-1u83yg1"">@Bean</code>-annotated method if you already have <code class=""chakra-code css-1u83yg1"">@Component</code> on you classes. There are other variants of <code class=""chakra-code css-1u83yg1"">@Component</code> that identify specific roles for each component to play. We\'ll see some examples of these in the coming lectures, but if you want to learn more, check out the link below.</p>\n<p class=""chakra-text css-o3oz8b"">One important thing to keep in mind is that <code class=""chakra-code css-1u83yg1"">@ComponentScan</code> only marks the <em class=""chakra-text css-o3oz8b"">package</em> of the class it\'s annotating for scanning - any classes outside of that package or its subpackages will be excluded by Spring. Here are the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html"">official Spring docs for <code class=""chakra-code css-1u83yg1"">@ComponentScan</code><span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> as well as the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/4.3.27.RELEASE/spring-framework-reference/htmlsingle/#beans-stereotype-annotations"">official Spring docs explaining the how different <em class=""chakra-text css-o3oz8b"">stereotype</em> annotations like <code class=""chakra-code css-1u83yg1"">@Component</code>, <code class=""chakra-code css-1u83yg1"">@Service</code>, <code class=""chakra-code css-1u83yg1"">@Repository</code>, and others, function<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Onion Architecture</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the basic structure of Onion Architecture. External requests must first pass through a layer of controllers or request handlers whose only purpose is to handle these external requests. These controllers then use the next layer of the onion, the services, to process the actions or analysis triggered by the request. The services, in turn, use each other and the next layer, repositories and data access, to persist the results of the actions triggered by the request.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Onion Architecture</strong>: An architectural pattern in which an application is separated into nested layers. In order for a request to be processed by the application, it must first travel through an outer layer of external interfaces and controllers, then through a middle layer of services and business logic, and finally through a persistence layer of data access objects. The separation of these layers emphasizes clean separation of concerns.</li><li class=""css-cvpopp""><strong>Application Component</strong>: In Spring, this is any @Component-annotated class that is instantiated by Spring and placed in Spring\'s application context. Architecturally speaking, this is a logical unit of an application - a single-purpose library or object that solves a particular problem an application faces.</li><li class=""css-cvpopp""><strong>Service</strong>: In Spring, this is any <code class=""chakra-code css-1u83yg1"">@Service</code>-annotated class, handled identically to an <code class=""chakra-code css-1u83yg1"">@Component</code>-annotated class. The difference between the two is semantics - a component is the most generic type of bean, and can be any kind of shared application structure. A service is specifically a collection of library methods that manage one aspect of an application\'s business logic. For example, a <code class=""chakra-code css-1u83yg1"">UserService</code> would expose high-level actions related to the users of an application, and an <code class=""chakra-code css-1u83yg1"">AuthenticationService</code> would expose actions for registering and authenticating a user. Services represent the middle layer of an onion architecture, and should contain the bulk of an application\'s business logic.</li><li class=""css-cvpopp""><strong>Repository</strong>: In Spring, an <code class=""chakra-code css-1u83yg1"">@Repository</code>-annotated class is treated identically to an <code class=""chakra-code css-1u83yg1"">@Component</code>-annotated one, but as with <code class=""chakra-code css-1u83yg1"">@Service</code>, the semantics are different. In an onion architecture, repositories are the inner layer - each repository should act like an interface to a specific set of stored or persistent data. For example, a <code class=""chakra-code css-1u83yg1"">UserRepository</code> would expose an interface capable of create/read/update/delete and query operations on the <code class=""chakra-code css-1u83yg1"">users</code> table of the database.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed94796_l2-29-components-and-services/l2-29-components-and-services.png'],https://www.youtube.com/embed/s9R8zH5M-eY
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.6  Components and Services Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements about Spring Components are true:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Beans created in your <code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code> class can\'t use beans found by <code class=""chakra-code css-1u83yg1"">@ComponentScan</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@ComponentScan</code> only looks for Component classes in the same package as your <code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code>, or its subpackages.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@Service</code>, <code class=""chakra-code css-1u83yg1"">@Controller</code>, and <code class=""chakra-code css-1u83yg1"">@Repository</code> are all types of <code class=""chakra-code css-1u83yg1"">@Component</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You can declare beans in their own class by using <code class=""chakra-code css-1u83yg1"">@Component</code> annotations, but you have to use the default constructor.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider a program that stores a list of Users and Shoes. We have the following components:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">UserService</code> - Provides methods to find and modify users, including setting the users’ current pair of shoes.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">ShoeService</code> - Provides methods to find and modify the inventory of shoes.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">UserController</code> - Provides REST endpoints for our webpage to request information about users, and set the user’s shoes.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Which statements are probably true?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">UserService</code> beans have a reference to a <code class=""chakra-code css-1u83yg1"">ShoeService</code> bean.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">UserController</code> has references to both the <code class=""chakra-code css-1u83yg1"">UserService</code> and <code class=""chakra-code css-1u83yg1"">ShoeService</code> beans.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">UserService</code> bean has a reference to the <code class=""chakra-code css-1u83yg1"">UserController</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">ShoeService</code> bean doesn’t have references to any of the other beans.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Feeling Stuck? Here\'s an Explanation!</h3></div>']",[],https://www.youtube.com/embed/g2peW7Iq1Xw
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.7  Exercise: Components and Services,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.8  Solution: Components and Services,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are quite a few classes in this example, but only some of them need annotations. WE can figure out which ones by following the chain of dependencies - <code class=""chakra-code css-1u83yg1"">FoodController</code> references <code class=""chakra-code css-1u83yg1"">FoodService</code> which references <code class=""chakra-code css-1u83yg1"">FoodRepository</code>, which means all of them need some variation of <code class=""chakra-code css-1u83yg1"">@Component</code> on each. Yes, even <code class=""chakra-code css-1u83yg1"">FoodController</code> at the top of the chain - remember that in order for Spring fill dependencies, <em class=""chakra-text css-o3oz8b"">all</em> related components must be configured for IoC.</p>\n<p class=""chakra-text css-o3oz8b"">We also need to annotate our main application class with <code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code>. Remember that this is what configures Spring\'s component scanning and auto-configuration, so without this, the <code class=""chakra-code css-1u83yg1"">@Component</code> variants we used above wouldn\'t be seen by Spring.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">Course1ExercisesApplication.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>/**\n</span>* This annotation will, among other things, enable component\n* scanning for our project\n*/\n@SpringBootApplication \npublic class Course1ExercisesApplication {\n\n  public static void main(String[] args) {\n     SpringApplication.run(Course1ExercisesApplication.class, args);\n  }\n\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">FoodController.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>/**\n</span>* Controller for receiving requests.\n* This class needs to be a Spring Component so that Spring can\n* automatically create instances of it to receive web requests. We use\n* the @Controller annotation variation of @Component for this purpose.\n*/\n\n@Controller\n@RequestMapping(""/food"")\npublic class FoodController {\n\n   private FoodService foodService;\n\n   public FoodController(FoodService foodService) {\n       this.foodService = foodService;\n   }\n\n   @GetMapping\n   public String getHomePage(FoodForm foodForm, Model model) {\n       foodService.addFood(foodForm.getFoodName(), foodForm.getCalories(), foodForm.getMealTime());\n       return ""foodAdded"";\n   }\n\n}\n</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">FoodService.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>/**\n</span>* Food Service that performs business logic operations regarding food\n* This class needs to be a component, because our Controller has a reference to\n* it that it doesn\'t create itself. Marking this as a @Service lets Spring know\n* to make instances of this bean available to other classes, though @Component would work as well.\n*/\n@Service\npublic class FoodService {\n   private FoodRepository foodRepository;\n\n   public FoodService(FoodRepository foodRepository) {\n       this.foodRepository = foodRepository;\n   }\n\n   public Boolean isFoodAvailableAtMealTime(String foodName, MealTime mealTime) {\n       return foodRepository.getFood(mealTime).stream()\n               .filter(food -&gt; food.getName().equals(foodName))\n               .findFirst()\n               .isPresent();\n   }\n\n   public void addFood(String foodName, Integer calories, MealTime mealTime) {\n       foodRepository.addFood(mealTime, new FoodData(foodName, calories));\n   }\n\n   public FoodRepository getFoodRepository() {\n       return foodRepository;\n   }\n\n   public void setFoodRepository(FoodRepository foodRepository) {\n       this.foodRepository = foodRepository;\n   }\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">FoodRepository.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>/**\n</span>* Pretend repository implementation\n* This class needs to be a Spring component as well, because our FoodService relies on it. We use\n* the @Repository annotation here to denote its function, but for this example @Component would work just\n* fine as well.\n*/\n@Repository\npublic class FoodRepository {\n   private Map&lt;MealTime, List&lt;FoodData&gt;&gt; foodDatabase = new EnumMap&lt;&gt;(MealTime.class);\n\n   public List&lt;FoodData&gt; getFood(MealTime mealTime) {\n       return foodDatabase.getOrDefault(mealTime, new ArrayList&lt;&gt;());\n   }\n\n   public void addFood(MealTime mealTime, FoodData food) {\n       foodDatabase.getOrDefault(mealTime, new ArrayList&lt;&gt;()).add(food);\n   }\n}</code></div></div></pre></div>']",[],https://www.youtube.com/embed/Xxtlhczz1w0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.9  Server-Wide Configuration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l2-server-config-master"">The lecture code example can be found here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">Spring Boot does a lot to simplify the setup of a new Spring application, but sometimes, you need to change how it works. That\'s what the <code class=""chakra-code css-1u83yg1"">application.properties</code> file is for! You can find it in the <code class=""chakra-code css-1u83yg1"">src/main/resources</code> folder of a generated Spring Boot project, and it allows you to configure anything from the server\'s hostname and port to the size and colors of the Spring logo that appears in the console when starting an application.</p>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html"">You can find reference documentation for all of the available config options here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Properties File</strong>: A file with the <code class=""chakra-code css-1u83yg1"">.properties</code> extension that consists of plain-text <code class=""chakra-code css-1u83yg1"">key=value</code> pairs separated by new lines. This format is often used by Java libraries and frameworks because it provides a simple way to specify named constants in a plain text file.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring properties are usually pretty descriptive. See if you can figure out what these properties are used for:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">logging.level.org.springframework</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Sets the log level for the specified package</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">spring.datasource.url</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Specifies the path to the primary data source</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">server.address</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Specifies the address for this server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">spring.http.encoding.charset</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Specifies the character encoding for the HTTP requests and responses</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">spring.gson.date-format</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Specifies the date format to be used when converting JSON</p></div>']",[],https://www.youtube.com/embed/bDj3gJpQ5Uw
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.10  Exercise: Server-Wide Configuration,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.11  Solution: Server-Wide Configuration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hopefully you were able to find all these without too much trouble! Most of the time, your properties will be driven by specific goals you need to accomplish. You’ll want to be prepared to look them up like you did for this exercise.</p>\n<p class=""chakra-text css-o3oz8b"">However, Spring’s intelligent defaults means that your application will often work fine with nothing in your properties file at all! That means we can usually rely on the defaults, and just be ready to look up the properties in the documentation when we need to.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.12  XML Configuration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Given the following XML configuration for spring, which choice represents the equivalent java configuration?</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">beans</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">bean</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">      </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">      </span><span class=""token"" style=""color: rgb(2, 124, 124);"">class</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">com.udacity.example.IndexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">bean</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">      </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">indexApp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">      </span><span class=""token"" style=""color: rgb(2, 124, 124);"">class</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">com.udacity.example.IndexApp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">constructor-arg</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">ref</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">bean</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">beans</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexService.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// ...</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexApp.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Component</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>  \n<span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>indexService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexService.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Component</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> indexApp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> indexApp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>indexApp </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> indexApp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexApp.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// ...</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexService.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Bean</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// ...</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexApp.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Bean</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>  \n<span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setIndexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>indexService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexService.java</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// ...</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexApp.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Component</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>  \n<span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>indexService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/blob/master/udacity-jwdnd-c1-snippets-master/src/main/resources/l2/beans.xml"">You can find the <code class=""chakra-code css-1u83yg1"">beans.xml</code> sample code from the lecture here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">Spring\'s annotation-based configuration is really convenient and allows us to see directly in our Java code how Spring is configured. This is a new API, though, and Spring\'s original configuration format was through XML.</p>\n<p class=""chakra-text css-o3oz8b"">We won\'t be using this older format in the course, but it\'s important to be aware of because it\'s still supported by Spring, and many older projects still use it. The key thing to remember is that Spring\'s annotation- and XML-based configuration systems are both equally capable of configuring Spring, so if you ever find yourself in a situation where you need one but only know how to do it in the other, you can always find a way to translate between them.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Legacy</strong>: In a programming context, <em class=""chakra-text css-o3oz8b"">legacy</em> usually refers to older code that still functions or is expected to function, but is on the verge of being made obsolete by newer technologies. A legacy application is one that is no longer being actively built upon, and is instead in maintenance mode.</li><li class=""css-cvpopp""><strong>XML</strong>: e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage. This is a flexible data format that allows for extension, as the name suggests. Many applications and libraries use XML as a way to store structured application data out of memory, and it\'s also a popular data interchange format on the web.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/4.3.27.RELEASE/spring-framework-reference/htmlsingle/#beans-annotation-config"">Here are the official Spring docs for annotation-based configuration, which feature a discussion of XML vs. annotations and many examples of how the two relate to each other<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ul></div>']",[],https://www.youtube.com/embed/fWZ62Ik-rAk
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.13  Final Review,"['<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Start with previous final review exercise.</li><li class=""css-cvpopp"">Create a bean with data.</li><li class=""css-cvpopp"">Create a service that uses that data.</li><li class=""css-cvpopp"">Test that the service receives the bean with logging.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a no-dependencies bean called <code class=""chakra-code css-1u83yg1"">message</code>. It should be a String like <code class=""chakra-code css-1u83yg1"">""Hello, Spring!""</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a class component called <code class=""chakra-code css-1u83yg1"">MessageService</code> that depends on the <code class=""chakra-code css-1u83yg1"">message</code> bean.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add an <code class=""chakra-code css-1u83yg1"">uppercase</code> method to the <code class=""chakra-code css-1u83yg1"">MessageService</code> class that returns an uppercase version of the <code class=""chakra-code css-1u83yg1"">message</code> bean.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a <code class=""chakra-code css-1u83yg1"">lowercase</code> method to the <code class=""chakra-code css-1u83yg1"">MessageService</code> class that returns an lowercase version of the <code class=""chakra-code css-1u83yg1"">message</code> bean.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a bean called <code class=""chakra-code css-1u83yg1"">uppercaseMessage</code> that depends on <code class=""chakra-code css-1u83yg1"">MessageService</code>. It should be a String that is the uppercase version of <code class=""chakra-code css-1u83yg1"">message</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a bean called <code class=""chakra-code css-1u83yg1"">lowercaseMessage</code> that depends on <code class=""chakra-code css-1u83yg1"">MessageService</code>. It should be a String that is the lowercase version of <code class=""chakra-code css-1u83yg1"">message</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add <code class=""chakra-code css-1u83yg1"">System.out.println</code> statements to log when each bean is created.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run the application and use the log messages to verify that the beans were initialized in the correct order: first <code class=""chakra-code css-1u83yg1"">message</code>, then <code class=""chakra-code css-1u83yg1"">MessageService</code>, then <code class=""chakra-code css-1u83yg1"">uppercaseMessage</code> and <code class=""chakra-code css-1u83yg1"">lowercaseMessage</code>.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.14  Solution: Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l2-final-review-solution-master"">My solution code for this final review can be found here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<h3 class=""chakra-heading css-k57syw"">Glossary</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Inversion of Control (IoC)</strong>: A design pattern in which the developer creates independent application components and uses a framework to connect them, rather than writing the integration code themselves</li><li class=""css-cvpopp""><strong>Business Logic</strong>: Code that relates exclusively to an application\'s conceptual model and featureset. Contrast with utility code like database access, HTTP request parsing, etc.</li><li class=""css-cvpopp""><strong>Persistent Components</strong>: Java Objects that Spring maintains over time; they\'re persistent because they\'re created and maintained for as long as the application needs them to be.</li><li class=""css-cvpopp""><strong>Dependency Injection</strong>: A mechanism by which IoC may be implemented. Components are configured with dependencies on other components, which are injected at runtime. Injection is quite literal - a component\'s dependencies are usually expressed as annotated fields on the component class, and Spring will populate those fields with the dependencies at runtime.</li><li class=""css-cvpopp""><strong>Separation of Concerns</strong>: A code organization philosophy that emphasizes single-purpose components. In Java and Spring, this means keeping all methods related to a specific problem domain in the same class, for the sake of maintainability and reducing code reuse.</li><li class=""css-cvpopp""><strong>Data Types</strong>: Sometimes called POJOs (plain-old-java-objects), Data Types are classes in application designed purely to hold structured application data, like users, profiles, or anything else an application might manage. These objects are helpful for us to maintain a good conceptual model of an application, and are created and accessed frequently during execution.</li><li class=""css-cvpopp""><strong>Components</strong>: Components are persistent class instances managed by Spring in an application. They usually resemble libraries more than typical objects, with methods that must be called to perform specific actions. Components are only created when Spring is configured to create them, usually at server startup.</li><li class=""css-cvpopp""><strong>Configuration Files</strong>: Project files that configure some part of Spring\'s operation. Some are embedded in Java classes, like we just discussed, and others are <code class=""chakra-code css-1u83yg1"">.properties</code>, <code class=""chakra-code css-1u83yg1"">.yaml</code>, and <code class=""chakra-code css-1u83yg1"">.xml</code> files that we\'ll discuss later this lesson. Some of them configure the IoC context, like the ones we just discussed, and others configure more abstract pieces of Spring\'s system.</li><li class=""css-cvpopp""><strong>Component Annotations</strong>: Component annotations are annotations that identify application components for Spring to manage. <code class=""chakra-code css-1u83yg1"">@Bean</code> and <code class=""chakra-code css-1u83yg1"">@Configuration</code> are examples from the most recent videos, and in the next section we\'ll discuss <code class=""chakra-code css-1u83yg1"">@Component</code> and <code class=""chakra-code css-1u83yg1"">@Service</code> as well.</li><li class=""css-cvpopp""><strong>Application Context</strong>: Spring\'s application context is just a giant data structure that holds all application component instances. It can be queried to gain access to a specified component at runtime, and it\'s what Spring uses to resolve dependencies.</li><li class=""css-cvpopp""><strong>Beans</strong>: ""Beans"" are Spring\'s name for generic application components, and include any value Spring has stored in the application context. A bean is always either an object or primitive value.</li><li class=""css-cvpopp""><strong>Closed System</strong>: Spring\'s application context is a closed system, which means that it manages all of the components stored within. It is not possible to instantiate a component manually and still link it fully with Spring - it will never be aware of the components inside of Spring\'s application context, and vice versa.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code></strong>: An annotation put on the main application class of a Spring Boot project. It serves as an alias of three other annotations, <code class=""chakra-code css-1u83yg1"">@Configuration</code>, <code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code>, and <code class=""chakra-code css-1u83yg1"">@ComponentScan</code></li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Configuration</code></strong>: A class annotated with <code class=""chakra-code css-1u83yg1"">@Configuration</code> is instantiated and managed by Spring as a component, but also as a bean factory. Any methods of the configuration class that are annotated with <code class=""chakra-code css-1u83yg1"">@Bean</code> are used by Spring to create new beans to add to the application context.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Bean</code></strong>: A method annotated with <code class=""chakra-code css-1u83yg1"">@Bean</code> inside of a configuration class will be used by Spring to generate a bean of the method\'s return type. This means that the developer can manually configure beans to be included in the application context.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code></strong>: A class annotated with <code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code> tells Spring to try to automatically match beans to dependencies based primarily on type. This reduces the need for boilerplate code explicitly identifying individual beans as dependencies.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Primary</code></strong>: This annotation distinguishes the annotated bean method as the default dependency of its type. This is used to resolve conflicts that arise from having multiple bean definitions of the same type when auto configuration is enabled.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Qualifier</code></strong>: This annotation distinguishes the annotated bean method or dependency declaration as a qualified bean or dependency. Qualified beans are considered for unqualified dependencies, but only matching qualified beans are considered for qualified dependencies. You can read more about it <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-autowired-annotation-qualifiers"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp""><strong>Onion Architecture</strong>: An architectural pattern in which an application is separated into nested layers. In order for a request to be processed by the application, it must first travel through an outer layer of external interfaces and controllers, then through a middle layer of services and business logic, and finally through a persistence layer of data access objects. The separation of these layers emphasizes clean separation of concerns.</li><li class=""css-cvpopp""><strong>Application Component</strong>: In Spring, this is any @Component-annotated class that is instantiated by Spring and placed in Spring\'s application context. Architecturally speaking, this is a logical unit of an application - a single-purpose library or object that solves a particular problem an application faces.</li><li class=""css-cvpopp""><strong>Service</strong>: In Spring, this is any <code class=""chakra-code css-1u83yg1"">@Service</code>-annotated class, handled identically to an <code class=""chakra-code css-1u83yg1"">@Component</code>-annotated class. The difference between the two is semantics - a component is the most generic type of bean, and can be any kind of shared application structure. A service is specifically a collection of library methods that manage one aspect of an application\'s business logic. For example, a <code class=""chakra-code css-1u83yg1"">UserService</code> would expose high-level actions related to the users of an application, and an <code class=""chakra-code css-1u83yg1"">AuthenticationService</code> would expose actions for registering and authenticating a user. Services represent the middle layer of an onion architecture, and should contain the bulk of an application\'s business logic.</li><li class=""css-cvpopp""><strong>Repository</strong>: In Spring, an <code class=""chakra-code css-1u83yg1"">@Repository</code>-annotated class is treated identically to an <code class=""chakra-code css-1u83yg1"">@Component</code>-annotated one, but as with <code class=""chakra-code css-1u83yg1"">@Service</code>, the semantics are different. In an onion architecture, repositories are the inner layer - each repository should act like an interface to a specific set of stored or persistent data. For example, a <code class=""chakra-code css-1u83yg1"">UserRepository</code> would expose an interface capable of create/read/update/delete and query operations on the <code class=""chakra-code css-1u83yg1"">users</code> table of the database.</li><li class=""css-cvpopp""><strong>Properties File</strong>: A file with the <code class=""chakra-code css-1u83yg1"">.properties</code> extension that consists of plain-text <code class=""chakra-code css-1u83yg1"">key=value</code> pairs separated by new lines. This format is often used by Java libraries and frameworks because it provides a simple way to specify named constants in a plain text file.</li><li class=""css-cvpopp""><strong>Legacy</strong>: In a programming context, <em class=""chakra-text css-o3oz8b"">legacy</em> usually refers to older code that still functions or is expected to function, but is on the verge of being made obsolete by newer technologies. A legacy application is one that is no longer being actively built upon, and is instead in maintenance mode.</li><li class=""css-cvpopp""><strong>XML</strong>: e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage. This is a flexible data format that allows for extension, as the name suggests. Many applications and libraries use XML as a way to store structured application data out of memory, and it\'s also a popular data interchange format on the web.</li></ul></div>']",[],https://www.youtube.com/embed/20KMZjwtIWg
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.15  Lesson Conclusion,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Congratulations, you\'ve made it through one of the toughest lessons in this course! Working with Spring requires an entirely new mentality when it comes to application design, and we had a lot of ground to cover in this lesson to lay the foundations for the rest of the course. Next lesson, we\'ll be adding some real functionality to our applications by integrating Spring MVC and Thymeleaf to render web pages for our clients.</p></div>']",[],https://www.youtube.com/embed/s-EyLno-X78
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.1  Spring MVC and Thymeleaf,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Spring MVC and Thymeleaf</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>MVC and You:</strong> We introduce the model-view-controller pattern and discuss how Spring MVC adapts it for use on the web.</li><li class=""css-cvpopp""><strong>HTML Templates and Thymeleaf:</strong> We look at how Thymeleaf\'s HTML templates work and how we can populate them with data using Spring controllers.</li><li class=""css-cvpopp""><strong>Connecting Controllers to Templates:</strong> We dive deeper into the relationship between controllers and templates to see how to bind data from a web form to a controller method.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed9745e_l3-03-lesson-outline/l3-03-lesson-outline.png'],https://www.youtube.com/embed/gA3tNZ05vQs
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.2  Developing Web Sites from the Back-End,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Relationship Between Spring MVC and the Client</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the relationship between Spring MVC and the client. Spring MVC uses HTML templates and application data to render a view for the client browser to display. The view exposes certain actions to the user, which when triggered are sent to Spring MVC, which processes the actions and renders new views for the client.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Interacting with a  simple web application</h3>\n<p class=""chakra-text css-o3oz8b"">In a web application, there are two components: the client that sends HTTP requests, and the server, which sends HTTP responses back. In the case of a web browser client, the responses the server sends need to be in the format of HTML, the document language of the web. The HTML that is sent to the client both defines the data that the user sees, as well as the actions a user can take - things like buttons, links, and input forms are all part of what the server is responsible for generating.</p>\n<p class=""chakra-text css-o3oz8b"">This process of generating an entire UI from HTML would be tedious if we had to do it by hand. Luckily, we don\'t have to - Thymeleaf is an HTML template engine that, when used with Spring MVC, can simplify things greatly.</p>\n<h3 class=""chakra-heading css-k57syw"">HTML templates</h3>\n<p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">HTML templates are essentially just HTML files with special tags and attributes that can be combined with a data model by a template engine like Thymeleaf to generate fully functional HTML documents.</em>  Spring MVC provides a standard way to choose a template and supply the necessary data model when a request comes in, which allows for a truly dynamic user experience.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Data model defines how the application stores and retrieves (serialize and deserialize) the Java objects into/from the database. Data modeling starts with designing the database tables which are analogous to the Java classes (""model"" classes of the MVC).</p>\n</blockquote>\n<p class=""chakra-text css-o3oz8b"">You\'ll learn and practice HTML templates in the current lesson, and data model in the Data Persistence lesson.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">GET</code> Request:</strong> an HTTP request for data at a specific URL. This type of request cannot include any additional data.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">POST</code> Request:</strong> and HTTP request that usually represents ""posting"" new data to the server. This is a common catch-all request method used for many data-bearing requests to the server.</li><li class=""css-cvpopp""><strong>Dynamic:</strong> Something that is dynamic changes in response to external stimuli. In the case of HTML templates, dynamic sections of the template are ones that can be replaced or configured with data on-demand.</li><li class=""css-cvpopp""><strong>Static:</strong> Something that is static does not change. In the case of HTML templates, static sections of the template are the ones that cannot be changed and will be the same no matter what data is used with the template.</li><li class=""css-cvpopp""><strong>MVC:</strong> <strong>M</strong>odel-<strong>V</strong>iew-<strong>C</strong>ontroller, a design pattern that emphasizes the separation of application components into those three categories or layers for more-structured user-facing application development.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Think about how templating allows us to populate reusable html structures with server data. What are some advantages to this approach over creating the html structures ourselves?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Manually generating syntactically-correct HTML is hard work!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Templates allow us to programmatically construct HTML in our Spring <code class=""chakra-code css-1u83yg1"">@Controller</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Templates are more secure</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Many layout and visual elements are the same on multiple pages, so templating allows us to reuse them.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed974a8_l3-7-big-picture/l3-7-big-picture.png'],https://www.youtube.com/embed/qnkzSh2Bc9A
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,"4.3  Servers, Templates, and MVC","['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are three basic scenarios that comprise the majority of web-based user interaction flows.</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The first is when a user follows a link to our application from an external source, like a marketing email or google search. This kind of cold-call request means will always be a <code class=""chakra-code css-1u83yg1"">GET</code> request, and our application\'s responsibility is to choose a response template (appropriate for the request URL - you don\'t want to send the <code class=""chakra-code css-1u83yg1"">register.html</code> if the link the user clicked was for <code class=""chakra-code css-1u83yg1"">/shopping-cart</code>!) and populate it with relevant application data.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The second scenario is when a user navigates within our app, either by clicking a link or a button or performing some action we need to process on the server, like adding an item to their shopping cart. This case is very similar to the first, as it involves the server choosing a response template and populating it with data, but in this case, the action the user performs is completely up to us - since they\'re initiating the action from a web page we designed, only the actions we included in that design are available. We can use this to add additional data to requests at the template-level, for example by generating each ""add item to cart"" button to include the item\'s identifier in the request that is sent.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The final scenario is when the user submits completely custom data to our app using form input. This is again similar to the previous two, in that the exact shape of the form is something our template design determines, and that we still need to choose a template to send in response and the data we should use to populate this template. The main difference is that the request no longer includes ""safe"" data - when a user can enter any data that they\'d like, our application is responsible for vetting and validating that data, showing the user an error if something goes wrong.</p>\n</li></ol>\n<p class=""chakra-text css-o3oz8b"">These scenarios may seem simple, but they are the building blocks of web development. Regardless of the application, user interaction flows on the web are all built out of these basic building blocks.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following workflows best describes the interaction between the web server, the Spring controller, and the HTML template?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Spring controller receives an HTTP request and sends it to the web server. The web server selects a template and passes the template to the Spring controller to populate.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The web server receives an HTTP request and uses it to select a template. It then sends the template to the Spring controller to populate.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The web server receives a template and uses it to call a method in the Spring controller. The Spring controller populates the corresponding model object and returns it to the web server, which populates the template with data from the model object.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The web server receives an HTTP request and uses it to call a method in the Spring controller. The Spring controller populates a model object and returns a String with the view id. The template corresponding to the view id is populated with data from the model object.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements about servers, templates, and MVC are true?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Controller connects the data to the template.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The web server defines the data and actions available to the user.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">User data can be either encoded into the request URL or sent in the body of the request message.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Controller methods return a model object that the web server uses to select a template.</p></div>']",[],https://www.youtube.com/embed/DJsfz_IaUzA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.4  MVC and You,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">MVC is an acronym that stands for Model-View-Controller, and it\'s a common software pattern for user interface design. Traditionally, it divides the roles of components in an app into three layers:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">the <strong>Model</strong>, which is responsible for maintaining the state of an application,</li><li class=""css-cvpopp"">the <strong>View</strong>, which is responsible for displaying the UI to the user,</li><li class=""css-cvpopp"">and the <strong>Controller</strong>, which is responsible for processing user actions (sent from the View) to update the Model, and for forwarding those updates back to the View</li></ul>\n<p class=""chakra-text css-o3oz8b"">MVC is an abstract pattern, though, and every library implements it differently. Spring MVC is built around the browser as a platform, and it organizes these roles like this:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>HTML templates</strong> are the views - each one represents a specific screen or screen component that the user is shown.</li><li class=""css-cvpopp""><strong>Spring beans</strong> are the controllers - specifically, Spring MVC gives an <code class=""chakra-code css-1u83yg1"">@Controller</code> annotation that we can use to register our beans as controllers. Think of Spring bean controllers as specialized application components that can define methods to handle specific user requests. Those methods are responsible for choosing the HTML template that is generated in response, as well as for populating the <code class=""chakra-code css-1u83yg1"">Model</code> object for that template.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">Model</code> objects</strong> are the models - every controller method can take an optional <code class=""chakra-code css-1u83yg1"">Model</code> argument, and by reading and changing the data inside of it, the controller can read user-submitted data and populate the template with the changes. Think of the Model class a simple data-transfer object: something that can store various bits of data with keys to look that data up, and that can be passed between the browser, the template engine, and the controller to facilitate the transfer of data between the user and the application.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Let\'s Get Coding!</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-mvc-and-you-1-master"">You can find the lecture sample code from the video above here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In order to start using Spring MVC, we need two main elements: an HTML template to define the user interface, and a Spring MVC <code class=""chakra-code css-1u83yg1"">@Controller</code>-annotated bean to serve that template and populate it with data.</p>\n<p class=""chakra-text css-o3oz8b"">In our example so far, our ""template"" is actually just a static HTML page that displays a greeting. The main takeaway about templates so far is to remember to place them in the right folder - <code class=""chakra-code css-1u83yg1"">src/main/resources/templates</code> under the project root directory. When we choose a template in our controller, we do so by specifying the template name we want to load - our <code class=""chakra-code css-1u83yg1"">home.html</code> template in the example is simply referred to as <code class=""chakra-code css-1u83yg1"">""home""</code>. This will only work if your templates are in the right folder, so always double check!</p>\n<p class=""chakra-text css-o3oz8b"">To set up a basic controller to serve this template, we created a new class called <code class=""chakra-code css-1u83yg1"">HomeController</code> and annotated it with <code class=""chakra-code css-1u83yg1"">@Controller</code>. As you may remember from the last lesson, this registers the class as a Spring bean <em class=""chakra-text css-o3oz8b"">and</em> makes it eligible for request handling. That\'s why we can\'t just use <code class=""chakra-code css-1u83yg1"">@Component</code> - Spring MVC only looks at controllers, not all Spring beans.</p>\n<p class=""chakra-text css-o3oz8b"">In order to actually <em class=""chakra-text css-o3oz8b"">bind</em> the controller to a specific request URL - like <code class=""chakra-code css-1u83yg1"">/home</code> in our example - we have to define a method in the controller and annotate it with <code class=""chakra-code css-1u83yg1"">@RequestMapping</code>. We also have to return a String from this method - this is the name of the template we want to render. For this first step into web development, that\'s all we do - return the String <code class=""chakra-code css-1u83yg1"">""home""</code> to indicate that we want the <code class=""chakra-code css-1u83yg1"">home.html</code> template to be rendered when a user requests the <code class=""chakra-code css-1u83yg1"">/home</code> URL.</p>\n<h3 class=""chakra-heading css-k57syw"">Basic User Flow</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-mvc-and-you-2-master"">You can find the lecture sample code from the video above here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In order to actually render dynamic data in a template, we again need to approach it from both the template and the controller.</p>\n<p class=""chakra-text css-o3oz8b"">In the template, we need to add Thymeleaf <em class=""chakra-text css-o3oz8b"">attributes</em> to our HTML. In our example so far, we added the <code class=""chakra-code css-1u83yg1"">th:text</code> attribute to the heading we want to be dynamic, like so:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-XHTML"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>&lt;h1 th:text=""${welcomeMessage}""&gt;Hello, homepage!&lt;/h1&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This attribute will cause Thymeleaf to replace the text inside the <code class=""chakra-code css-1u83yg1"">h1</code> tag (<code class=""chakra-code css-1u83yg1"">Hello, homepage!</code>) with a string generated by evaluating the expression in the <code class=""chakra-code css-1u83yg1"">th:text</code> attribute (<code class=""chakra-code css-1u83yg1"">${welcomeMessage}</code>). The syntax of this expression is fairly simple: the <code class=""chakra-code css-1u83yg1"">${}</code> indicates an expression to evaluate, and by using a <em class=""chakra-text css-o3oz8b"">name</em> like <code class=""chakra-code css-1u83yg1"">welcomeMessage</code> inside of it, we\'re telling Thymeleaf to look up a value in the model supplied for this template with the same name.</p>\n<p class=""chakra-text css-o3oz8b"">For that to work, though, we need to add a value named <code class=""chakra-code css-1u83yg1"">welcomeMessage</code> to the model - and we do that in the controller method like so:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    @RequestMapping(""/home"")\n</span>    public String getHomePage(Model model) {\n        model.addAttribute(""welcomeMessage"", ""Hi Hello"");\n        return ""home"";\n    }</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">First we need to add an argument to the controller method - the <code class=""chakra-code css-1u83yg1"">Model</code> object you see above. This is a special class that Spring MVC will send to Thymeleaf to render the template, and we can set various <em class=""chakra-text css-o3oz8b"">attributes</em> on it to add named values. As you can see, we\'re adding a value of <code class=""chakra-code css-1u83yg1"">""Hi Hello""</code> to the model with the name <code class=""chakra-code css-1u83yg1"">""welcomeMessage""</code> - which is exactly the name we\'re referencing in our template! Now when we render the template, the message <code class=""chakra-code css-1u83yg1"">Hi Hello</code> will appear on the web page instead of <code class=""chakra-code css-1u83yg1"">Hello, homepage!</code></p>\n<p class=""chakra-text css-o3oz8b"">Nice!</p>\n<p class=""chakra-text css-o3oz8b"">We can replace the hardcoded <code class=""chakra-code css-1u83yg1"">""Hi Hello""</code> string in our controller with any Java value or expression, and it will be set every time the controller method is called, which means every time a request comes in for <code class=""chakra-code css-1u83yg1"">/home</code>. That means we can set it dynamically, even based on the request that comes in. If we replace it with <code class=""chakra-code css-1u83yg1"">Instant.now().toString()</code>, we end up with a welcome message that shows the current time, and updates every time we reload the page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Spring MVC Architecture</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the Spring MVC\'s architecture. The browser represents the view, and requests from the browser are user actions. When Spring MVC processes a request, it creates a <code class=""chakra-code css-1u83yg1"">Model</code> object that represents the dynamic data associated with the view and passes it to a controller method that matches the request. The controller updates the model and chooses a template to render in response. Spring MVC passes the template and the updated model to Thymeleaf, which generates an updated view, which Spring sends in response to the browser.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>MVC</strong>: MVC is an acronym that stands for <strong>M</strong>odel-<strong>V</strong>iew-<strong>C</strong>ontroller, and it\'s a common software pattern for user interface design</li><li class=""css-cvpopp""><strong>Model</strong>: in MVC, the Model is responsible for maintaining the state of an application,</li><li class=""css-cvpopp""><strong>View</strong>: in MVC, the View is responsible for displaying the UI to the user,</li><li class=""css-cvpopp""><strong>Controller</strong>: in MVC, the Controller is responsible for processing user actions (sent from the View) to update the Model, and for forwarding those updates back to the View</li><li class=""css-cvpopp""><strong>Template</strong>: In software development, templates are used in many different contexts - in general, they are a way to define some often-repeated or reused text or code in a specific format, like HTML, along with <em class=""chakra-text css-o3oz8b"">code hooks</em> that indicate portions of the template that should be replaced dynamically when the template is rendered. In our context, we mostly use Thymeleaf\'s <em class=""chakra-text css-o3oz8b"">HTML templates</em>, which mostly look like plain HTML with a few extra Thymeleaf-specific attributes. These attributes are our <em class=""chakra-text css-o3oz8b"">code hooks</em>, and allow us to define what data Thymeleaf uses when generating the final HTML from our template.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/guides/gs/serving-web-content/"">Getting Started - Tutorial on Serving Web Content with Spring MVC<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> - This tutorial will walk you through many new concepts that you will learn next in this course.</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://uniandes-se4ma.gitlab.io/books/chapter8/mvc-mvvm-mv-mvwhat.html"">High-level Overview of Different MVC Variants<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed975e7_l3-21-mvc-and-you/l3-21-mvc-and-you.png'],https://www.youtube.com/embed/OImSIFbkFB8
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.5  MVC and You Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the following interactions. They’re all valid design patterns, but most of them are not used by Spring. Which one mostly closely describes Spring’s approach to MVC?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The model data is observable, and the subscribers receive updates of state change events.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All user actions and view updates are exchanged as HTTP request and response objects. The controller is responsible for choosing templates and populating the model data.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">One component retrieves data and processes it, another component formats the visual presentation data, and the controller handles the flow between the first two components.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The controller is the master of both the model and the view. All interactions are defined by the controller, which updates the model and returns the view as necessary.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">MVC and patterns like it can be found throughout the software world. Think about the scenarios below and check the ones that employ a Model-View-Controller design.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A browser communicates with a web server, which updates information in a database and returns a response to the browser.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An operating system uses a file explorer to present the contents of its file system to users.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A mobile game provides a touch-screen interface to communicate with a game server that updates game state in memory on the server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A phone system that allows users to submit credit card payments through an automated menu.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A waitperson taking a customer order and relaying it to the kitchen, where food is then prepared and brought back to the customer.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Feeling Stuck? Here\'s the Solution!</h3></div>']",[],https://www.youtube.com/embed/mpTzYRpsmPE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.6  HTML Templates,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The nature of Spring MVC\'s data flow - the controller has to provide the data for the template it wants to render - means that often, when designing a new user-facing feature, it makes sense to start with the template.</p>\n<p class=""chakra-text css-o3oz8b"">Thymeleaf is the HTML <em class=""chakra-text css-o3oz8b"">template engine</em> we\'re using in this class, which means that it\'s a library that can take a template, a data model, and combine them to generate a final HTML document.</p>\n<p class=""chakra-text css-o3oz8b"">The way that Thymeleaf applies the data model to the template is based on the Thymeleaf <em class=""chakra-text css-o3oz8b"">attributes</em> we add to the template, like <code class=""chakra-code css-1u83yg1"">th:text</code> from the previous lecture on MVC. These attributes can have complex expressions as their values, which are processed by Thymeleaf in the context of the data model provided. In the next video, we\'ll look at some of the effects those attributes and expressions can achieve!</p>\n<h3 class=""chakra-heading css-k57syw"">More Greetings!</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-html-templates-master"">For the full lecture sample code from this lecture, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In addition to setting text values, we can use Thymeleaf attributes to perform basic <em class=""chakra-text css-o3oz8b"">control flow</em> in our templates. The main two types of control flow in templates are iteration and conditional rendering.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Iteration</strong> in Thymeleaf templates works very similarly to an enhanced for-loop in Java. The main attribute used in template iteration is <code class=""chakra-code css-1u83yg1"">th:each</code>, and its use looks like this:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-XHTML"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>&lt;h1  th:each=""msg : ${greetings}"" th:text=""${msg}""&gt;Hello, homepage!&lt;/h1&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">We can read the attribute <code class=""chakra-code css-1u83yg1"">th:each=""msg : ${greetings}""</code> as ""for each <code class=""chakra-code css-1u83yg1"">msg</code> in <code class=""chakra-code css-1u83yg1"">greetings</code>"", and it essentially means ""repeatedly render this element for each value in the <code class=""chakra-code css-1u83yg1"">greetings</code> collection, and name that element <code class=""chakra-code css-1u83yg1"">msg</code> for any expressions that need that name to have a value associated with it.</p>\n<p class=""chakra-text css-o3oz8b"">So in this example, the <code class=""chakra-code css-1u83yg1"">h1</code> tag will be repeatedly rendered, once for each element in <code class=""chakra-code css-1u83yg1"">greetings</code>, and the text rendered by <code class=""chakra-code css-1u83yg1"">th:text=""${msg}""</code> will be the current element of greetings being rendered. If <code class=""chakra-code css-1u83yg1"">greetings</code> contained the Strings ""Hi"" and ""Hello"", the final rendered html would be</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-XHTML"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>&lt;h1&gt;Hi&lt;/h1&gt;\n</span>&lt;h1&gt;Hello&lt;/h1&gt;</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b""><strong>Conditional rendering</strong> in Thymeleaf usually looks like an if statement in Java, or occasionally a switch statement. The attribute we examined in the example was <code class=""chakra-code css-1u83yg1"">th:unless</code>, as in:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-XHTML"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>&lt;h1  th:unless=""${msg.contains(\'goodbye\')}"" th:text=""${msg}""&gt;Hello, homepage!&lt;/h1&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">In this case, if the <code class=""chakra-code css-1u83yg1"">msg</code> contains the String <code class=""chakra-code css-1u83yg1"">""goodbye""</code>, the <code class=""chakra-code css-1u83yg1"">h1</code> tag <strong>will not</strong> be rendered. This is particularly useful when choosing whether or not to render an error message, for example. If you need the opposite condition, in this case <em class=""chakra-text css-o3oz8b"">only</em> showing messages that contain <code class=""chakra-code css-1u83yg1"">""goodbye""</code>, you can simply replace the <code class=""chakra-code css-1u83yg1"">th:unless</code> with <code class=""chakra-code css-1u83yg1"">th:if</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>How Thymeleaf Renders a View</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows how Thymeleaf renders a view. In order to render a view, Thymeleaf must be given a template and a model to use. Thymeleaf scans through the template to find dynamic data expressions and resolves the variables in those expressions using the model. Some dynamic data expressions result in iterated or conditional rendering in addition to more typical text replacement.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>User Action</strong>: Broadly, a user action is simply some specific action a user can take, provided by the user interface they\'re interacting with. In the case of web applications, we usually think of user actions as clicks on a web page that often result in a HTTP request sent to the backend.</li><li class=""css-cvpopp""><strong>Prototype/Wireframe</strong> In the development process for a web application, it\'s common to first design the full HTML and CSS for all of the screens a user is expected to see. These pages have no actual functionality, and are usually called prototypes. Wireframes are an even earlier product of the design process, and usually are simple images that show what the prototypes should look like.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Reading</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#introducing-thymeleaf"">The official Thymeleaf tutorial<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, which explains the entire framework from first principles.</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax"">The official Thymeleaf expression syntax tutorial<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> - Read this section if all those <code class=""chakra-code css-1u83yg1"">${}</code>s aren\'t making much sense to you.</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/4.3.10.RELEASE/spring-framework-reference/html/expressions.html"">The official Spring Expression Language docs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> - This will tell you how to perform various computations inside of the Thymeleaf expression brackets</li></ul></div>']",['https://video.udacity-data.com/topher/2020/July/5f247177_l3-32-html-templates-with-thymeleaf-1/l3-32-html-templates-with-thymeleaf-1.png'],https://www.youtube.com/embed/1PHTH1uRtlk
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.7  HTML Templates Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider a simple HTML snippet:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Welcome to the future!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">If your Model object has an attribute <code class=""chakra-code css-1u83yg1"">superGreatString</code>, what attribute can you add to your HTML to replace the text on the page with the value of <code class=""chakra-code css-1u83yg1"">superGreatString</code>?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">&lt;p th:field=”${superGreatString}”&gt;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">&lt;p th:text=”${superGreatString}”&gt;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">&lt;p th:object=”${superGreatString}”&gt;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">&lt;p th:string=”${superGreatString}”&gt;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the HTML snippets below. Some have valid Thymeleaf annotations, while some have invalid annotations. Select the valid snippets.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">tbody</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">tr</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">each</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">cat : ${cats}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">td</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">text</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat.color}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">td</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">text</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat.maxSpeedMph}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">tr</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">tbody</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">text</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat.name} + </span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);""> is </span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);""> + ${cat.color}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>```</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">if</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat.maxSpeedMph &gt; 10}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Pretty fast</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">elseif</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat.maxSpeedMph &lt;= 10}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Not as fast</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/cat</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">object</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">for</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">newCatText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Name your cat: </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">text</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">newCatName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">name</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">newCatName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">field</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">*{name}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Erratum</strong> - For the second question, the correct options shown in the <em class=""chakra-text css-o3oz8b"">solution video</em> above have a missing/misplaced <em class=""chakra-text css-o3oz8b"">double-quote mark</em> ("" ""). However, the options displayed in the quiz are correct.</p>\n</blockquote></div>']",[],https://www.youtube.com/embed/1YD-dhb8sG0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.8  Exercise: HTML Templates,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.9  Solution: HTML Templates,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This example should be pretty simple. Here’s the <code class=""chakra-code css-1u83yg1"">&lt;body&gt;</code> text of our webpage:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/simplehome</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">value</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">Visit me</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">if</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${firstVisit}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Hello, homepage!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">unless</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${firstVisit}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Welcome back!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">You can see we took the following steps:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Set <code class=""chakra-code css-1u83yg1"">th:action</code> to our /simplehome endpoint</li><li class=""css-cvpopp"">Set the method of our form to POST</li><li class=""css-cvpopp"">Used <code class=""chakra-code css-1u83yg1"">th:if</code> and <code class=""chakra-code css-1u83yg1"">th:unless</code> to choose which message to display depending on the variable <code class=""chakra-code css-1u83yg1"">firstVisit.</code></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-html-templates-master"">Here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> is the complete solution code with analogous variable names and corresponding values.</p></div>']",[],https://www.youtube.com/embed/2tkoFO11mSQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.10  Connecting Controllers,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The final piece of the Spring MVC puzzle we need to build fully capable web apps is the ability to handle user-submitted data. As before, there are two main components to this, one on the template side, the other on the controller side.</p>\n<p class=""chakra-text css-o3oz8b"">On the template side, we need to define input fields for each piece of data we want to capture, and a <code class=""chakra-code css-1u83yg1"">&lt;form&gt;</code> element to group them. When the form is submitted, the data will be encoded in the HTTP request that is sent, and can be extracted on the Spring side.</p>\n<p class=""chakra-text css-o3oz8b"">On the Spring side of things, we need to define a POJO to hold the form data. We\'ll look at code details in the next video, but by defining this POJO we can pre-fill the form by setting its fields and adding it as a Model attribute when first rendering the template, and Spring can automatically extract the request data into that POJO when the form is submitted. Let\'s see how that works!</p>\n<h3 class=""chakra-heading css-k57syw"">User-Inputted Data</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-connecting-controllers-1-master"">For the full lecture sample code in the previous video, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this video, we looked at the HTML tags and Thymeleaf attribute we need to set up a form for the user to fill and submit to the server. Here\'s the template code saw:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-XHTML"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>&lt;form th:object=""${newMessage}"" th:action=""@{/home}"" action=""#"" method=""POST""&gt;\n</span>    &lt;input th:field=""*{text}"" type=""text""&gt;\n    &lt;input type=""submit""&gt;\n&lt;/form&gt;</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">We use the <code class=""chakra-code css-1u83yg1"">th:object</code> attribute to choose the POJO our form data should be added to, and the <code class=""chakra-code css-1u83yg1"">th:action</code>attribute to choose the URL to send the form submission HTTP request to. We use the special <code class=""chakra-code css-1u83yg1"">@{}</code> syntax in the latter to tell Thymeleaf to make sure the URL is always relative to the actual server address - this doesn\'t make a huge difference in our current project, but it\'s good practice when referring to URLs on our server in a Thymleaf template.</p>\n<p class=""chakra-text css-o3oz8b"">We also set <code class=""chakra-code css-1u83yg1"">method=""POST""</code> on the form to set the HTTP method of the resulting request. This is important! Remember that  <code class=""chakra-code css-1u83yg1"">GET</code> requests cannot contain any custom data - we need to use <code class=""chakra-code css-1u83yg1"">POST</code> for our form data to actually get sent!</p>\n<p class=""chakra-text css-o3oz8b"">In order to bind the individual form input data fields to the form-backing POJO\'s fields, we need to add the <code class=""chakra-code css-1u83yg1"">th:field</code> attribute. We also need to use another special Thymeleaf expression syntax - <code class=""chakra-code css-1u83yg1"">*{}</code>. This allows us to refer to fields on the form-backing POJO without using dot syntax - <code class=""chakra-code css-1u83yg1"">th:field=""*{text}""</code> in this example is equivalent to <code class=""chakra-code css-1u83yg1"">th:field=""${newMessage.text}""</code>.</p>\n<h3 class=""chakra-heading css-k57syw"">Persisting Data</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-connecting-controllers-2-master"">For the full lecture sample code from the previous video, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this video, we looked at how to handle user-submitted data from the Spring controller side of things. Here are the finalized controller methods we saw:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    @GetMapping(""/home"")\n</span>    public String getHomePage(@ModelAttribute(""newMessage"") MessageForm newMessage, Model model) {\n        model.addAttribute(""greetings"", this.messageListService.getMessages());\n        return ""home"";\n    }\n\n    @PostMapping(""/home"")\n    public String addMessage(@ModelAttribute(""newMessage"") MessageForm messageForm, Model model) {\n        messageListService.addMessage(messageForm.getText());\n        model.addAttribute(""greetings"", messageListService.getMessages());\n        messageForm.setText("""");\n        return ""home"";\n    }</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The key elements to focus on are the new arguments to each of these methods - the <code class=""chakra-code css-1u83yg1"">MessageForm</code> class is a POJO specifically designed to hold the form data we defined in the previous video.</p>\n<p class=""chakra-text css-o3oz8b"">For the <code class=""chakra-code css-1u83yg1"">GET</code> request handling method, we declare the <code class=""chakra-code css-1u83yg1"">MessageForm</code> argument to ensure that the object exists and is added to the model by Spring automatically. This is necessary, because Thymeleaf needs an object with the name <code class=""chakra-code css-1u83yg1"">newMessage</code> to be present in the model to render properly, even if there isn\'t any data in the object yet.</p>\n<p class=""chakra-text css-o3oz8b"">For the <code class=""chakra-code css-1u83yg1"">POST</code> request handling method, we declare the <code class=""chakra-code css-1u83yg1"">MessageForm</code> argument to tell Spring that it should look for data that matches that in the body of the request we\'re handling. Spring will then automatically extract that data and put it in a <code class=""chakra-code css-1u83yg1"">MessageForm</code> object before calling our method, passing it to us so we can use the data as we see fit.</p>\n<p class=""chakra-text css-o3oz8b"">In both cases, we\'re annotating this argument with <code class=""chakra-code css-1u83yg1"">@ModelAttribute</code>. This allows us to specify that Spring should add the object to our <code class=""chakra-code css-1u83yg1"">Model</code> before asking Thymeleaf to render the template. That means we don\'t have to add it manually! Pretty handy.</p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Form-Backing Object</strong>: This is a term used by Spring MVC and Thymeleaf to mean an object that represents the data contained in a form. On the Spring side, this is usually an additional argument to the relevant Controller method, and on the Thymeleaf side, this is referred to in the <code class=""chakra-code css-1u83yg1"">th:object</code> attribute on the form.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html"">Official Spring MVC docs with some discussion of form-backing objects<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html#creating-a-form"">Official Thymeleaf docs for writing forms and integrating with Spring<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ul></div>']",[],https://www.youtube.com/embed/FftIxiuGpKo
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.11  Connecting Controllers Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match each of the functions below with the attribute or annotation that helps perform that function.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify form elements that capture user data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">th:field</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify objects that contain form data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@ModelAttribute</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify which endpoint to call on form submission</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">th:action</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify the path for a given controller</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@RequestMapping</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here’s a modified version of the code we looked at earlier in the lesson. We’ll update the body of the html to use a simple form that lets you send someone a high five:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/home</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">object</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${messageForm}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">GET</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">for</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">highFiveText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Send a high five to someone: </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">text</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">highFiveText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">name</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">highFiveText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">field</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">*{text}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">each</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">msg : ${greetings}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">text</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${msg}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">unless</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${msg.contains(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">Goodbye</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">)}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Hello, homepage!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">We’ll also use the following two methods in our controller to handle the page when it loads and when we submit the form. Assume a messageListService exists that will work just like it did in the video. It starts with no messages and can add new messages to keep a list of all the messages added so far.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Controller</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@RequestMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/home""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HomeController</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MessageListService</span><span> messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HomeController</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MessageListService</span><span> messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>messageListService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@GetMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">lowFive</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MessageForm</span><span> messageForm</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Model</span><span> model</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addMessage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""low five.""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       model</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addAttribute</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""greetings""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getMessages</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""home""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@PostMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">highFive</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MessageForm</span><span> messageForm</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Model</span><span> model</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addMessage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""high five, ""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> messageForm</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""!""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       model</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addAttribute</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""greetings""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getMessages</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""home""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">What will happen when you first visit the page, and what will happen when you enter the name ""Terry"" and then click the button?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When you first load the page, it will display ‘low five.’ When you click the button, it will only display ‘high five, Terry!’</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When you first load the page it will display ‘low five.’ When you click the button, it will display ‘low five.’ and ‘high five, Terry!’</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When you first load the page, it will display ‘low five.’ When you click the button, there will be an error.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When you first load the page it will display ‘low five.’ When you click the button, it will display ‘low five.’ and then it will display ‘low five.’ again below that.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Feeling Stuck? Here\'s the Solution!</h3></div>']",[],https://www.youtube.com/embed/hHftl3xElR0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.12  Exercise: Connecting Controllers,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.13  Solution: Connecting Controllers,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here’s the <code class=""chakra-code css-1u83yg1"">&lt;body&gt;</code> text that completes this assignment:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/animal</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">object</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${messageForm}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">for</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">animalText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Enter an Animal: </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">text</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">animalText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">name</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">animalText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">field</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">*{animalName}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">for</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">adjective</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Enter an Adjective:</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">text</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">adjective</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">name</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">adjective</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">field</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">*{adjective}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">unless</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${#lists.size(greetings) &gt; 5}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">each</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">msg : ${greetings}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">text</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${msg}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Hello, homepage!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">if</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${#lists.size(greetings) &gt; 5}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>I think that\'s enough!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">You can see we made a few revisions to the <code class=""chakra-code css-1u83yg1"">&lt;form&gt;</code> element:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">We added <code class=""chakra-code css-1u83yg1"">th:action</code> to set the target of the form submission.</li><li class=""css-cvpopp"">We used <code class=""chakra-code css-1u83yg1"">th:object</code> to bind the form to <code class=""chakra-code css-1u83yg1"">messageForm</code>.</li><li class=""css-cvpopp"">We added a method=”POST” attribute.</li></ul>\n<p class=""chakra-text css-o3oz8b"">We also added the <code class=""chakra-code css-1u83yg1"">th:field</code> attribute to our input to reference the <code class=""chakra-code css-1u83yg1"">animalName</code> and <code class=""chakra-code css-1u83yg1"">adjective</code> values on our <code class=""chakra-code css-1u83yg1"">messageForm</code>.</p>\n<p class=""chakra-text css-o3oz8b"">To display the list of greetings, we use <code class=""chakra-code css-1u83yg1"">th:each</code> and set the <code class=""chakra-code css-1u83yg1"">th:text</code> for each row to the <code class=""chakra-code css-1u83yg1"">msg</code> value.</p>\n<p class=""chakra-text css-o3oz8b"">Lastly, we use <code class=""chakra-code css-1u83yg1"">th:if</code> and <code class=""chakra-code css-1u83yg1"">th:unless</code> to show or hide our two text elements. Note that they don’t have to be in any particular order. <code class=""chakra-code css-1u83yg1"">th:if</code> and <code class=""chakra-code css-1u83yg1"">th:unless</code> both can operate independently.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-connecting-controllers-2-master"">Here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> is the complete solution code with analogous variable names and corresponding values.</p></div>']",[],https://www.youtube.com/embed/SXZGcceGBeY
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.14  Special Inputs,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You\'ve been asked to write a Spring MVC controller that will manage file uploads. Which of these options looks like a method signature for a controller method that is meant to receive a file upload request?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@PostMapping\n</span>public String uploadFile(@RequestParam MultiPartFile file, Model model)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@PostMapping\n</span>public String uploadFile(@ModelAttribute FileUploadForm fileUploadForm, Model model)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@GetMapping\n</span>public String uploadFile(@RequestParam File file, Model model)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@PutMapping\n</span>public String uploadFile(@RequestParam InputStream fileStream, Model model)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@PostMapping\n</span>public String uploadFile(@ModelAttribute String filePath, Model model)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the following statements. Check all that are false.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There\'s no effective way to upload large files to a Spring MVC application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There\'s no effective way to send browser cookie data to a Spring MVC application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There\'s no effective way to extract HTTP request headers in a Spring MVC controller method.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There\'s no effective way to extract URL path segments as variables in a Spring MVC Controller method.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Sometimes when we build web applications with Spring, we need to account for special request types and data formats. The key takeaway from this edge case is that usually, we can accomplish this by adding the correct argument to our controller method. In this example, we looked at <code class=""chakra-code css-1u83yg1"">MultiPartFile</code>, a special request data class provided by Spring to handle large file uploads. As with any special data type, simply by adding it as an argument to our controller method, Spring knows to treat the incoming request appropriately.</p>\n<p class=""chakra-text css-o3oz8b"">On the Thymeleaf side of things, we also learned how to set up a form for file upload using the <code class=""chakra-code css-1u83yg1"">enctype=""multipart/form-data""</code> attribute. This is another important takeaway - when we want to send special data types from the frontend to Spring, we need to find out how to configure the form properly.</p>\n<p class=""chakra-text css-o3oz8b"">This specific example will be relevant in the final project, but in general, be on the lookout for cases where you might need to handle special request data. Implementing it might take some research!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/MultipartFile.html"">Official Spring MultiPartFile Javadocs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/guides/gs/uploading-files/"">Official Spring MVC file upload tutorial<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],https://www.youtube.com/embed/HFnfUCP8eHA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.15  Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It\'s time to build our basic chat app! Update your previous final review project according to the tasks below, and refer back to the instructions above for the high-level goals and code snippets to include in your project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Start with previous final review exercise</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Comment out the Spring Security dependencies in the POM file</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a <code class=""chakra-code css-1u83yg1"">chat.html</code> template that includes a form to submit new messages and display the chat message history</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a class, <code class=""chakra-code css-1u83yg1"">ChatForm</code>, to store the form data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a class, <code class=""chakra-code css-1u83yg1"">ChatMessage</code>, to represent a message with a username attached</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the <code class=""chakra-code css-1u83yg1"">MessageService</code> class to store a list of those <code class=""chakra-code css-1u83yg1"">ChatMessage</code> objects</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the <code class=""chakra-code css-1u83yg1"">MessageService</code> to add a method to add new messages to the stored list.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a <code class=""chakra-code css-1u83yg1"">ChatController</code> class to serve the <code class=""chakra-code css-1u83yg1"">chat.html</code> template and handle the form submission, both at the <code class=""chakra-code css-1u83yg1"">/chat</code> URL.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Finally, test your app in the browser! Try to add messages from two browser windows with different user names. Do the messages show up for both users? Do the messages have the correct usernames attached?</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.16  Solution: Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-final-review-solution-master"">You can find the full final review solution code here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<h3 class=""chakra-heading css-k57syw"">Glossary</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">GET</code> Request:</strong> an HTTP request for data at a specific URL. This type of request cannot include any additional data.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">POST</code> Request:</strong> and HTTP request that usually represents ""posting"" new data to the server. This is a common catch-all request method used for many data-bearing requests to the server.</li><li class=""css-cvpopp""><strong>Dynamic:</strong> Something that is dynamic changes in response to external stimuli. In the case of HTML templates, dynamic sections of the template are ones that can be replaced or configured with data on-demand.</li><li class=""css-cvpopp""><strong>Static:</strong> Something that is static does not change. In the case of HTML templates, static sections of the template are the ones that cannot be changed and will be the same no matter what data is used with the template.</li><li class=""css-cvpopp""><strong>MVC:</strong> <strong>M</strong>odel-<strong>V</strong>iew-<strong>C</strong>ontroller, a design pattern that emphasizes the separation of application components into those three categories or layers for more-structured user-facing application development.</li><li class=""css-cvpopp""><strong>Model</strong>: in MVC, the Model is responsible for maintaining the state of an application,</li><li class=""css-cvpopp""><strong>View</strong>: in MVC, the View is responsible for displaying the UI to the user,</li><li class=""css-cvpopp""><strong>Controller</strong>: in MVC, the Controller is responsible for processing user actions (sent from the View) to update the Model, and for forwarding those updates back to the View</li><li class=""css-cvpopp""><strong>Template</strong>: In software development, templates are used in many different contexts - in general, they are a way to define some often-repeated or reused text or code in a specific format, like HTML, along with <em class=""chakra-text css-o3oz8b"">code hooks</em> that indicate portions of the template that should be replaced dynamically when the template is rendered. In our context, we mostly use Thymeleaf\'s <em class=""chakra-text css-o3oz8b"">HTML templates</em>, which mostly look like plain HTML with a few extra Thymeleaf-specific attributes. These attributes are our <em class=""chakra-text css-o3oz8b"">code hooks</em>, and allow us to define what data Thymeleaf uses when generating the final HTML from our template.</li><li class=""css-cvpopp""><strong>User Action</strong>: Broadly, a user action is simply some specific action a user can take, provided by the user interface they\'re interacting with. In the case of web applications, we usually think of user actions as clicks on a web page that often result in a HTTP request sent to the backend.</li><li class=""css-cvpopp""><strong>Prototype/Wireframe</strong> In the development process for a web application, it\'s common to first design the full HTML and CSS for all of the screens a user is expected to see. These pages have no actual functionality, and are usually called prototypes. Wireframes are an even earlier product of the design process, and usually are simple images that show what the prototypes should look like.</li><li class=""css-cvpopp""><strong>Form-Backing Object</strong>: This is a term used by Spring MVC and Thymeleaf to mean an object that represents the data contained in a form. On the Spring side, this is usually an additional argument to the relevant Controller method, and on the Thymeleaf side, this is referred to in the <code class=""chakra-code css-1u83yg1"">th:object</code> attribute on the form.</li></ul></div>']",[],https://www.youtube.com/embed/YYRUBJ9Ek80
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.17  Lesson Conclusion,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Wow, good job making it this far! You\'ve taken your first visible step into the world of Java web development by learning how Spring MVC and Thymeleaf work. You should have all the tools you need to start developing the user interface for an application. Next lesson, we\'ll look at how we can make that application feel more permanent and robust by introducing data persistence and security - see you there!</p></div>']",[],https://www.youtube.com/embed/UMJnQ0m7eZg
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.1  Data Persistence & Security,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Lesson Outline</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>ORM is the Norm:</strong> We introduce ORM, or object-relational-mapping, a software pattern that leverages the similarities between Java classes and SQL tables to eliminate boilerplate in data access code.</li><li class=""css-cvpopp""><strong>MyBatis Mappers:</strong> We introduce MyBatis, a dead-simple ORM tool for Java that integrates well with Spring. We discuss the ""Mapper"" classes MyBatis wants us to design to access the database.</li><li class=""css-cvpopp""><strong>Practical Example - User Credentials and Authentication:</strong> As a motivating example for using ORM, we discuss how to implement basic login security with a User table, MyBatis, and Spring Security. We walk through a lengthy sample project that implements the entirety of this motivating example.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5eda98b5_l4-03-lesson-outline-1/l4-03-lesson-outline-1.png'],https://www.youtube.com/embed/RwSu3hThoKE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.2  ORM and Security,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Growing Layers of Our Application</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the growing layers of our application. By adding MyBatis, we now have a translation from the Java and Spring world to the world of databases and SQL.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Why a database is required?</h3>\n<p class=""chakra-text css-o3oz8b"">Adding a database to our application is a way to externalize data persistence problems. When storing data in memory at runtime, we struggle to deal with:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Storage Space</li><li class=""css-cvpopp"">Concurrency</li><li class=""css-cvpopp"">Persistence of Data</li></ul>\n<p class=""chakra-text css-o3oz8b"">Using a database allows us to isolate these concerns from the rest of our application, so we can focus on the business logic of our application.</p>\n<h3 class=""chakra-heading css-k57syw"">How to interact with a database?</h3>\n<p class=""chakra-text css-o3oz8b"">There are many ways to manage the communication between an application and a database. For this course, we\'ll be using the library <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mybatis.org/mybatis-3/index.html"">MyBatis<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> <em class=""chakra-text css-o3oz8b"">to transform Java objects to SQL query parameters and to transform SQL query results into Java objects.</em></p>\n<p class=""chakra-text css-o3oz8b"">We\'ll create MyBatis Mappers as Spring beans, so we can inject them into any other beans that need them. For example, if we think about an online-shopping example, we might have a UserMapper that manages credentials and profile information and a CartMapper that manages the contents of an individual user\'s cart. We can inject the UserMapper into a Checkout Service that also receives the CartMapper to apply the charges in a User\'s cart to that User\'s stored payment information.</p>\n<p class=""chakra-text css-o3oz8b"">Later in this lesson, we\'ll combine our MyBatis mappers with Spring Security to authenticate each user\'s session automatically. To continue our earlier example, this means we could inject the UserMapper in some kind of Authentication Service to check client credentials on login.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements describe benefits of using Object Relational Mapping (ORM) to save persistent data?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It’s faster than using JDBC.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It prevents us from having to write queries that reference every field in our object.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It allows us to more easily work with our persistent data as Java objects.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It can handle multiple queries at once.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Reading</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Briefly read the research paper titled <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.457.1205&amp;rep=rep1&amp;type=pdf"">Object/relational mapping 2008: hibernate and the entity data model<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> by Elizabeth O\'Neil for a better insight into the ORM.</li><li class=""css-cvpopp"">If you are not familiar with JDBC, refer to this official <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/tutorial/jdbc/overview/index.html"">JDBC Introduction<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, and have a quick look at the underlying architecture. Though, we will not use the JDBC directly. MyBatis will automatically generate JDBC requests. You will learn and implement MyBatis shortly.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5eda82e7_l4-07-big-picture/l4-07-big-picture.png'],https://www.youtube.com/embed/dk0nqMNfyes
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.3  ORM and Security Contd,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">What Data Should be Stored in a Database?</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Data shared across multiple user sessions, like a product inventory</li><li class=""css-cvpopp"">Persistent data that should remain accessible after being logged out, like user profile or shopping cart</li></ul>\n<h3 class=""chakra-heading css-k57syw"">How Should Data be Structured?</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Intuitively. Most data can be stored in a similar format to the data objects that represent it in Java, with attributes matching column names.</li><li class=""css-cvpopp"">Differing. Some data must be stored differently for security reasons, such as encrypted passwords. Other data may require a different format for efficient storage, such as large files.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Thinking about Security</h3>\n<p class=""chakra-text css-o3oz8b"">The main question to ask is: <em class=""chakra-text css-o3oz8b"">“What pages can a user access?”</em></p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">User-Specific Data</li><li class=""css-cvpopp"">Generally Accessible (Unsecured) Data</li><li class=""css-cvpopp"">May Vary by Domain</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following portions of a webpage should require a user to be logged in to view?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Product Catalog</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Full Inventory</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A Specific User Shopping Cart</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A Generic Shopping Cart</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Company Contact Info</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Some data belongs in the database, but if we tried to put everything there our app would be slow and our database would be huge! Imagine you’re making a web page for an online retail store. Which of the following things belong in the database?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">User Profile</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">List of Our Products</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Product Search Results</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Shopping Cart</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Pictures of Our Products</p></div>']",[],https://www.youtube.com/embed/w3JAmWpBmRM
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.4  ORM is the Norm,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The first step in using ORM is to define the data model. Consider the relationship between the following tables:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">user</code> - A table containing the user ID, username, and password for each user.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">user_cart</code> - We are assuming, any user can have one cart at max. The cart would have multiple items (inventory). This table stores the user ID, inventory ID, and the quantity of inventory the user wants to purchase. In this table, the user ID, and inventory ID are the foreign keys respectively. Together, the combination of the user ID and inventory ID can act as a primary key.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">inventory</code> - It stores the inventory ID, name, and unit price of each inventory.</li></ul>\n<p class=""chakra-text css-o3oz8b"">We can represent their relationship in SQL with this image below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Relationship Between SQL Tables</strong> - Image showing the relationship between the <code class=""chakra-code css-1u83yg1"">user</code>, <code class=""chakra-code css-1u83yg1"">user_cart</code>, and <code class=""chakra-code css-1u83yg1"">inventory</code> tables in SQL</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A primary feature of ORM is that this type of relationship should have a natural mapping to Java classes. We can represent this same data in Java using a simple class diagram.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Class Diagram Corresponding to SQL Tables</strong> - The class diagram shows that the columns of the SQL diagram becomes fields of the Java objects <code class=""chakra-code css-1u83yg1"">User</code>, <code class=""chakra-code css-1u83yg1"">CartItem</code>, and <code class=""chakra-code css-1u83yg1"">InventoryItem</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The data types of these class attributes correspond to the data types of the SQL columns. Some Java types can be mapped to many different SQL types, and some SQL types can be mapped to multiple Java types, but in this case the type mappings are obvious. For a full list of the MyBatis type mapping, consult the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mybatis.org/mybatis-3/configuration.html#typeHandlers"">MyBatis 3 TypeHandlers list<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">Once you have defined your data types, MyBatis can automatically map Java objects to SQL statements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>ORM Process Visualization</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The diagram above shows the ORM Process Visualization, displaying how <code class=""chakra-code css-1u83yg1"">createUser(user)</code> is converted into SQL that inserts a row in a table, and <code class=""chakra-code css-1u83yg1"">getUserByName(name)</code> is converted into SQL that returns a result which becomes a Java object.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>ORM</strong>: Object-Relational Mapping. A general term describing a set of technology that can be used to automatically convert data between database representation and application representation.</li><li class=""css-cvpopp""><strong>Mapping</strong>: Drawing a relationship between a field in a Java class and a column in a SQL table.</li><li class=""css-cvpopp""><strong>One to One</strong>: A relationship between two objects in which one entity is on each side of the relationship.</li><li class=""css-cvpopp""><strong>Many to Many</strong>: A relationship between two objects in which multiple copies of each entity can be related to multiple copies of the other entity.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the following list of Java variables. To which types of columns could they correspond?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">String username;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">VARCHAR</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Integer numberOfCats</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">INTEGER</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">LocalDate birthDate</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">DATE</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Double priceOfSalmon</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">DECIMAL</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Boolean passedTheQuiz</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">BOOL</p></div>']","['https://video.udacity-data.com/topher/2020/June/5eda83d2_l4-shopping-cart-erd-/l4-shopping-cart-erd-.png', 'https://video.udacity-data.com/topher/2020/October/5f9983b1_l4-shopping-cart-class-diagram/l4-shopping-cart-class-diagram.png', 'https://video.udacity-data.com/topher/2020/October/5f998407_l4-18-orm-is-the-norm-summary/l4-18-orm-is-the-norm-summary.png']",https://www.youtube.com/embed/p_Oe8ehn2Co
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.5  Exercise: ORM is the Norm,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Taco Delivery Database Diagram</strong></p></div>']",['https://video.udacity-data.com/topher/2020/June/5eda8633_screen-shot-2020-06-05-at-10.51.08-am/screen-shot-2020-06-05-at-10.51.08-am.png'],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.6  Solution: ORM is the Norm,"['<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Erratum</strong> - At timestamp 1:02 in the video above, when the instructor says ""Big Double"", he intends to say ""BigDecimal"".</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You should have created four classes for this exercise: <code class=""chakra-code css-1u83yg1"">Customer</code>, <code class=""chakra-code css-1u83yg1"">Order</code>, <code class=""chakra-code css-1u83yg1"">TacoOrder</code>, and <code class=""chakra-code css-1u83yg1"">Delivery</code>. These class files should live in a new <code class=""chakra-code css-1u83yg1"">data</code> folder in the <code class=""chakra-code css-1u83yg1"">course1</code> folder. The variables in each class should correspond to the variables in the database tables. Here are some sample implementations:</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">Customer.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Customer</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> userName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> password</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>  \n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters not shown</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Pro Tip</strong> - It would be better if the <code class=""chakra-code css-1u83yg1"">password</code> field for the Customer class is <code class=""chakra-code css-1u83yg1"">char[ ]</code> array instead of a <code class=""chakra-code css-1u83yg1"">String</code>. As a developer, you would want to encrypt each character so that you wouldn\'t store the actual password anywhere in the system. A String is immutable by nature, and hence you cannot change/convert the characters of a String.</p>\n</blockquote>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">Order.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Order</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> customerId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters not shown</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">TacoOrder.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> tacoName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// this will work here, but you should often use BigDouble for prices </span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// if you plan to do any math with them</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Double</span><span> tacoPrice</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> count</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters not shown</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Pro Tip</strong> - The <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html"">java.math.BigDecimal<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> data type is better than any of the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"">primitive data types<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, including Double, for precise values, such as currency or <code class=""chakra-code css-1u83yg1"">tacoPrice</code>.</p>\n</blockquote>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">Delivery.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// there are a few types you can use for this. </span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// java.sql.Timestamp contains both date and time</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Timestamp</span><span> time</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters not shown</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In our example above, we have a single item for <code class=""chakra-code css-1u83yg1"">TacoOrder</code> which encapsulates both an order id and also the data about the taco we’re ordering, including its name and price. What if we wanted to store our taco descriptions in another table and reference them in our <code class=""chakra-code css-1u83yg1"">TacoOrder</code> indirectly? What would the new structure of <code class=""chakra-code css-1u83yg1"">TacoOrder</code> be, and what foreign key(s) would you use to make this work?</p></div>']",[],https://www.youtube.com/embed/gjHZVhrRgnA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.7  MyBatis Mappers,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-snippets-master/src/main/java/com/udacity/jwdnd/c1/snippets/l4"">The lecture sample code for the above and next videos can be found here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<h3 class=""chakra-heading css-k57syw"">MyBatis overview</h3>\n<p class=""chakra-text css-o3oz8b"">MyBatis provides a shallow ORM layer over JDBC (Java Database Connectivity). That means it helps map your Java objects to queries that save and retrieve data using JDBC.</p>\n<p class=""chakra-text css-o3oz8b"">MyBatis is mostly used through interface definitions. MyBatis automatically generates classes that implement the interface and makes them available as Spring beans.  This is an example interface that defines a MyBatis Mapper.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Mapper</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">interface</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UserMapper</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Select</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""SELECT * FROM USERS WHERE username = #{username}""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getUser</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> username</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This code above uses <code class=""chakra-code css-1u83yg1"">#{username}</code> to identify the username parameter. It\'s like Thymeleaf parameters, but for SQL!</p>\n<p class=""chakra-text css-o3oz8b"">For more information on the template syntax MyBatis uses for SQL, check out <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mybatis.org/mybatis-3/sqlmap-xml.html#Parameters"">the official documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. There are additional annotations for <code class=""chakra-code css-1u83yg1"">@Insert</code>, <code class=""chakra-code css-1u83yg1"">@Update</code>, and <code class=""chakra-code css-1u83yg1"">@Delete</code> as well. See the further research section below the next video for more info on ways to configure MyBatis.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">@Insert</code> and <code class=""chakra-code css-1u83yg1"">@Options</code> annotation</h3>\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@Insert</code> annotation automatically references attributes on the user object. Note username, firstName, lastName are all referenced directly here, because they are attributes of the user object.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Mapper</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">interface</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UserMapper</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO USERS (username, salt, password, firstname, lastname) ""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""VALUES(#{username}, #{salt}, #{password}, #{firstName}, #{lastName})""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Options</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>useGeneratedKeys </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> keyProperty </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""userId""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This example also demonstrates the <code class=""chakra-code css-1u83yg1"">@Options</code> annotation. <code class=""chakra-code css-1u83yg1"">@Insert</code> normally returns an integer that is the count of rows affected. By using the <code class=""chakra-code css-1u83yg1"">@Options</code> annotation, we\'re telling MyBatis that we want to automatically generate a new key and put it in userId. Now the method will return the new userId once the row has been inserted.</p>\n<p class=""chakra-text css-o3oz8b"">All we have to do to use these methods is inject beans for this interface into our services and MyBatis will automatically create the code for the JDBC requests!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>MyBatis Mappers Lie at the Center of Our Onion Architecture</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The diagram above shows that MyBatis Mappers lie at the center of our onion architecture. Remember, that means that the only beans that should have dependencies on them are in the next layer up, services.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>@Select, @Insert, @Update, @Delete</strong>: Annotations representing SQL statements to be executed. Each annotation takes a string for a SQL statement of the corresponding type. For example, a <code class=""chakra-code css-1u83yg1"">@Select</code> annotation takes a string for a SQL <code class=""chakra-code css-1u83yg1"">SELECT</code> statement.</li><li class=""css-cvpopp""><strong>@Options</strong>: Annotation providing access to switches and configuration options for JDBC statements.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">For a full list of the available MyBatis annotations and some example usage, see the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mybatis.org/mybatis-3/java-api.html"">MyBatis Java API documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp"">For an informal overview of result mapping with MyBatis annotations, see <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://medium.com/@hsvdahiya/mybatis-annotations-result-mapping-spring-79944ff74b84"">this Medium article<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5eda8840_l4-29-mybatis-mappers/l4-29-mybatis-mappers.png'],https://www.youtube.com/embed/VE6Iub-0fOI
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.8  MyBatis Mappers Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements about MyBatis are correct?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">MyBatis generates your Bean from an interface alone.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To add a new user to the database, you should use the <code class=""chakra-code css-1u83yg1"">@Select</code> annotation.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The variables in your MyBatis queries can reference either objects OR object attributes in the method parameters.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Methods with the <code class=""chakra-code css-1u83yg1"">@Insert</code> annotation return the id of the newly created row.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We want to add a new TacoOrder to our database. Here’s the TacoOrder class:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> tacoName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Double</span><span> tacoPrice</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> count</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters not shown</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Which of the following examples would perform our insert?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO TacoOrder (orderId, tacoName, tacoPrice, count)""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"" VALUES (#{tacoOrder)""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addToOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> tacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO TacoOrder (orderId, tacoName, tacoPrice, count)""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"" VALUES (orderId, tacoName, tacoPrice, count)""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addToOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> tacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO TacoOrder (orderId, tacoName, tacoPrice, count)""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"" VALUES (""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""tacoOrder.orderId, tacoOrder.tacoName, ""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""tacoOrder.tacoPrice, tacoOrder.count""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"")""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addToOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> tacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO TacoOrder (orderId, tacoName, tacoPrice, count)""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"" VALUES (#{orderId}, #{tacoName}, #{tacoPrice}, #{count})""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addToOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> tacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.9  Exercise: MyBatis Mappers,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.10  Solution: MyBatis Mappers,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Explanation</h3>\n<p class=""chakra-text css-o3oz8b"">We declared three new methods in our interface. In this solution, they’re named <code class=""chakra-code css-1u83yg1"">findDelivery()</code>, <code class=""chakra-code css-1u83yg1"">insert()</code>, and <code class=""chakra-code css-1u83yg1"">delete()</code>, but you can name them as you like.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Mapper</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">interface</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DeliveryMapper</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Select</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""SELECT * FROM Delivery WHERE id = #{id}""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO Delivery (orderId, time) VALUES(#{orderId}, #{time})""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Options</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>useGeneratedKeys </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> keyProperty </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Delete</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""DELETE FROM Delivery WHERE id = #{id}""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">delete</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The code shown above has the following annotations:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The first annotation is a simple <code class=""chakra-code css-1u83yg1"">@Select</code> like we saw earlier in the lesson.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The second annotation <code class=""chakra-code css-1u83yg1"">@Insert</code> is pretty similar to the earlier example as well. It uses<code class=""chakra-code css-1u83yg1"">INSERT</code> command to create a new row in the Delivery table.\nNote that it only needs to provide the order ID and time values, because the ID itself is generated.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@Options</code> annotation indicates to generate the key for the <code class=""chakra-code css-1u83yg1"">id</code> property and return it from the method. Also, note that our <code class=""chakra-code css-1u83yg1"">VALUES</code> portion of the query just provides order ID and time directly. MyBatis can figure out that they are attributes of our <code class=""chakra-code css-1u83yg1"">Delivery</code> object.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Lastly, <code class=""chakra-code css-1u83yg1"">@Delete</code> is very similar to the <code class=""chakra-code css-1u83yg1"">@Select</code>, but make sure you use the right annotation for it!</p>\n</li></ol></div>']",[],https://www.youtube.com/embed/mF50Rvgl6eQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.11  User Authentication,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Authentication in a web application</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">User support is a common feature in web applications, which means that a user can register an account and use credentials to login to the application in the future.</p>\n<p class=""chakra-text css-o3oz8b"">It\'s important to design databases with the assumption that they will someday be breached, and so we cannot store passwords or other secret credentials in plain text. Two approaches to storing passwords are:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Encryption</strong>: Modifying data before storing it, with the intention of using another algorithm to return the data to its original form once it needs to be used.</li><li class=""css-cvpopp""><strong>Hashing</strong>: Modifying data before storing it with the intention of never returning it to its original form. The modified data will be compared to other modified data only.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Hashing and Encryption should occur in a service dedicated to that purpose, rather than on the front end or in the controller. Hashing sometimes makes use of another technique, Salting. For a more in-depth discussion of salting and hashing passwords, see the further research section below the videos for this section.</p>\n<h3 class=""chakra-heading css-k57syw"">The flow of data</h3>\n<p class=""chakra-text css-o3oz8b"">Remember the separation of concerns and our onion architecture! <em class=""chakra-text css-o3oz8b"">The idea is that all user flows originate externally, travel through a controller, then through one or more services, finally through a data access bean to the database, and then all the way back up the chain.</em>  Structuring applications this way makes it easy to follow dependencies and separate concerns, so that\'s how we\'re going to build applications from now on.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Method in <code class=""chakra-code css-1u83yg1"">UserService.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">createUser</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecureRandom</span><span> random </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecureRandom</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> salt </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(2, 124, 124);"">16</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    random</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">nextBytes</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> encodedSalt </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Base64</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getEncoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">encodeToString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> hashedPassword </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> hashService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getHashedValue</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> encodedSalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> userMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getUsername</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> encodedSalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> hashedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getFirstName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getLastName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The hashing service itself has a single method that takes some data and salt and creates a string representing the hashed value.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Salt</strong>: random data that is combined with the input string when hashing so that the resultant hashed values are unique for each row. This means that two users with the same password would not have the same hash in the database.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Method in <code class=""chakra-code css-1u83yg1"">HashService.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getHashedValue</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> data</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> hashedValue </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">KeySpec</span><span> spec </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">PBEKeySpec</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>data</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">toCharArray</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getBytes</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5000</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">128</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">try</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecretKeyFactory</span><span> factory </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecretKeyFactory</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getInstance</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""PBKDF2WithHmacSHA1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        hashedValue </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> factory</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">generateSecret</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>spec</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getEncoded</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">catch</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">InvalidKeySpecException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">|</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">NoSuchAlgorithmException</span><span> e</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        logger</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">error</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>e</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getMessage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Base64</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getEncoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">encodeToString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>hashedValue</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When a user logs in, we have no way to retrieve their original password, but we can re-hash their user input and see if it matches the hashed value in our database. Below is an example <code class=""chakra-code css-1u83yg1"">AuthenticationService</code> class that implements a Spring interface, the <code class=""chakra-code css-1u83yg1"">AuthenticationProvider</code>. This allows Spring to integrate our provider with many different authentication schemes, but we can see in our <code class=""chakra-code css-1u83yg1"">supports</code> method that we specify that we only support UsernamePasswordAuthentication.</p>\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">authenticate()</code> method takes an Authentication object from spring and returns an authentication token if the user\'s credentials are correct.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">AuthenticationService.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">implements</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationProvider</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UserMapper</span><span> userMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HashService</span><span> hashService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UserMapper</span><span> userMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HashService</span><span> hashService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>userMapper </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> userMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>hashService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> hashService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Authentication</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticate</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Authentication</span><span> authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> username </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> password </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getCredentials</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">toString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span> user </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> userMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getUser</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>username</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>user </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> encodedSalt </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getSalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> hashedPassword </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> hashService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getHashedValue</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>password</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> encodedSalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">equals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>hashedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UsernamePasswordAuthenticationToken</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>username</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> password</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ArrayList</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">boolean</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">supports</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Class</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">?</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">equals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UsernamePasswordAuthenticationToken</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l4-spring-security-basics-master"">For the full lecture sample code from the past two videos, check here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In order for Spring to actually use our <code class=""chakra-code css-1u83yg1"">AuthenticationService</code>, we need to extend our Web Security configuration. We do that with an adapter for the <code class=""chakra-code css-1u83yg1"">WebSecurityConfigurer</code>. This example overrides two configure methods:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>configure(AuthenticationManagerBuilder auth)</strong>: used to tell Spring to use our <code class=""chakra-code css-1u83yg1"">AuthenticationService</code> to check user logins</li><li class=""css-cvpopp""><strong>configure(HttpSecurity http)</strong>: used to configure the <code class=""chakra-code css-1u83yg1"">HttpSecurity object</code> by chaining methods to express security requirements</li></ul>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">SecurityConfig.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Configuration</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@EnableWebSecurity</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityConfig</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">extends</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebSecurityConfigurerAdapter</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationService</span><span> authenticationService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityConfig</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationService</span><span> authenticationService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>authenticationService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> authenticationService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">protected</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">configure</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationManagerBuilder</span><span> auth</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        auth</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticationProvider</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>authenticationService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">protected</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">configure</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpSecurity</span><span> http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Exception</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authorizeRequests</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">antMatchers</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/signup""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/css/**""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/js/**""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">permitAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">anyRequest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticated</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">formLogin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">loginPage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/login""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">permitAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">formLogin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">defaultSuccessUrl</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/home""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">We can see that the second <code class=""chakra-code css-1u83yg1"">configure</code> method does four things:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Allows all users to access the /signup page, as well as the css and js files.</li><li class=""css-cvpopp"">Allows authenticated users to make any request that\'s not explicitly covered elsewhere.</li><li class=""css-cvpopp"">Generates a login form at /login and allows anyone to access it.</li><li class=""css-cvpopp"">Redirects successful logins to the /home page.</li></ul>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/resisttheurge/udacity-jwdnd-c1-l4-spring-security-basics/blob/master/src/main/java/com/udacity/jwdnd/spring_security_basics/service/HashService.java"">To see the <code class=""chakra-code css-1u83yg1"">HashService</code> class used in this example, click here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Onion Pattern</strong>: Sometimes also called Tiered Architecture, Multi-tiered Architecture, or n-tiered Architecture. This is a design pattern that separates areas of the application into controller, service, and data layers (and sometimes more). User flows originate from the controller tier, which passes them to the service tier, which then reaches a data access bean.</li><li class=""css-cvpopp""><strong>Encryption</strong>: Modifying data before storing it, with the intention of using another algorithm to return the data to its original form once it needs to be used.</li><li class=""css-cvpopp""><strong>Hashing</strong>: Modifying data before storing with the intention of never returning it to its original form. The modified data will be compared to other modified data only.</li><li class=""css-cvpopp""><strong>Salt</strong>: random data that is combined with the input string when hashing so that the resultant hashed values are unique for each row. This means that two users with the same password would not have the same hash in the database.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-security/site/docs/current/reference/html5/#jc"">Spring Security Java Configuration<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/builders/HttpSecurity.html"">HttpSecurity JavaDoc<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp"">If you\'d like to learn more about encryption, hashing, and salts, <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.thesslstore.com/blog/difference-encryption-hashing-salting/"">check out this high-level explanation.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match each of the following objects to their descriptions:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Filter</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Interface describing methods for taking action when an HttpRequest is received</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">FilterRegistrationBean</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Object used to association filters with URL patterns</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">AuthenticationProvider</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Interface describing methods for checking user credentials</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">AuthenticationService</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implements the methods for checking user credentials</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HashService</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implements the methods for encrypting our secret data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">SecurityConfig</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implements the methods that modify Spring’s configuration to use our Services</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">WebSecurityConfigAdapter</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Interface describing the methods that modify Spring’s security configuration</p></div>']",[],https://www.youtube.com/embed/MWAX6ppeBoc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.12  Exercise: User Credentials,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.13  Solution: User Credentials,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here is an example <code class=""chakra-code css-1u83yg1"">configure</code> method that meets our requirements:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">protected</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">configure</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpSecurity</span><span> http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Exception</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authorizeRequests</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">antMatchers</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/order""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/css/**""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/js/**""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">permitAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">anyRequest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticated</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">formLogin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">loginPage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/login""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">permitAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">formLogin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">defaultSuccessUrl</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/tacos""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The first method chain permits all requests to the <code class=""chakra-code css-1u83yg1"">/order</code> page or to our <code class=""chakra-code css-1u83yg1"">css</code> and <code class=""chakra-code css-1u83yg1"">js</code> directories, and then it allows authenticated users to make any kind of request. The next chain permits all users to access the auto-generated login page at <code class=""chakra-code css-1u83yg1"">/login</code>. Remember that Spring creates this for us. Lastly, the third method chain redirects successful logins to the <code class=""chakra-code css-1u83yg1"">/tacos</code> page by default.</p></div>']",[],https://www.youtube.com/embed/_atMetazuAQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.14  Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It\'s time to add data persistence and security to our chat application! Update your previous final review project according to the tasks below, and refer back to the instructions above for the high-level goals and code snippets to include in your project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Re-enable Spring Security.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a <code class=""chakra-code css-1u83yg1"">schema.sql</code> file in <code class=""chakra-code css-1u83yg1"">src/main/resources</code> and add the <code class=""chakra-code css-1u83yg1"">USERS</code> and <code class=""chakra-code css-1u83yg1"">MESSAGES</code> table definitions from the instructions above.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create Java classes to model the SQL tables you defined.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create MyBatis mappers for the Java model classes you defined.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add user registration and login support using Spring Security.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Restrict access to the <code class=""chakra-code css-1u83yg1"">/chat</code> URL to logged-in users.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the <code class=""chakra-code css-1u83yg1"">MessageService</code> class to use the mappers you created to add and retrieve messages to and from the database instead of an in-memory list.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the <code class=""chakra-code css-1u83yg1"">chat.html</code> template to remove the username input field from the message submission form.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the <code class=""chakra-code css-1u83yg1"">ChatController</code> to retrieve the currently-logged-in user\'s username from Spring Security when handling a message submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Manually test your app! Are you restricted from accessing the chat page without logging in? Can you register a new user? Can you log in with that new user\'s credentials? When that user sends a message, does their registered username show up next to the message? Can you log in as another user and verify that it still shows up with the first user\'s username?</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.15  Solution: Final Review,[],[],https://www.youtube.com/embed/DW8_R1VXTy8
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.16  Lesson Conclusion,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This lesson covered a lot! First we covered persistent data and learned:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">How to Identify Persistent Data</li><li class=""css-cvpopp"">Where to Store Persistent Data (SQL, in This Case)</li><li class=""css-cvpopp"">How to Use MyBatis, a Simple ORM Framework to Access Our Database</li><li class=""css-cvpopp"">How to Integrate MyBatis with Spring Through Simple Annotations</li></ul>\n<p class=""chakra-text css-o3oz8b"">We also took a peek at Security!</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Explored a Real-World Example of Database Access</li><li class=""css-cvpopp"">Configured Simple Username/Password Authentication</li><li class=""css-cvpopp"">Connected Spring Security’s Configuration with Our User Credentials</li></ul>\n<p class=""chakra-text css-o3oz8b"">We’ve also taken our chat program to the next level by adding persistent storage and authentication to it!</p></div>']",[],https://www.youtube.com/embed/935ABFsq7fg
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.1  Testing with JUnit and Selenium,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Lesson Outline</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Testing with JUnit</strong>: We introduce JUnit, the standard testing and assertion framework for Java. We learn how to write new tests and check out assumptions by using JUnit\'s extensive library of assertion methods.</li><li class=""css-cvpopp""><strong>JUnit in Situ</strong>: We look at how we can use IntelliJ (or any other IDE) to run tests, debug errors, and get reports about code coverage.</li><li class=""css-cvpopp""><strong>Selenium/WebDriver</strong>: We introduce Selenium, a tool for browser automation, through its Java API, <code class=""chakra-code css-1u83yg1"">selenium-java</code>. We look at how to write Selenium scripts to simulate user actions in a browser at a high level.</li><li class=""css-cvpopp""><strong>JUnit and Selenium</strong>: We discuss how to use Selenium\'s java API inside of JUnit tests, which opens the door to an advanced technique: automated user testing.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5edea518_l5-03-lesson-outline/l5-03-lesson-outline.png'],https://www.youtube.com/embed/gvKprZ0TCck
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.2  Why and How,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Test-Driven Development Lifecycle</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the test-driven development lifecycle. First, there is an idea for a new feature. That feature idea is turned into a series of user stories, which are then turned into tests, which fail because the feature does not exist yet. The developers then work on the feature\'s code requirements until all of the tests pass, and the cycle begins anew.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Testing is an important and highly desired part of the software development process. In a world where uptime and user retention means everything, it\'s important to validate that your application actually does what it\'s supposed to <em class=""chakra-text css-o3oz8b"">before</em> it goes into production.</p>\n<p class=""chakra-text css-o3oz8b"">The standard accepted way to enforce this is by adopting a test-driven development lifecycle, or TDD. In this model, the ""red then green"" philosophy is dominant - tests should be written <em class=""chakra-text css-o3oz8b"">before</em> the feature to be tested, meaning that they start off failing - aka, the tests are ""red."" Then, as the feature is implemented, one test after another should start to pass - aka, become ""green.""</p>\n<p class=""chakra-text css-o3oz8b"">To facilitate this approach, it\'s useful to have a standard way to describe features or requirements to be tested. For this, we turn to the concept of a ""user story."" A user story describes the functionality a feature should have from the perspective of a user interacting with the application. Typically, the format of a user story is:</p>\n<p class=""chakra-text css-o3oz8b""><strong>As a user, I can <em class=""chakra-text css-o3oz8b"">take some action</em> in order to <em class=""chakra-text css-o3oz8b"">achieve some goal</em></strong>.</p>\n<p class=""chakra-text css-o3oz8b"">Often a feature will be broken up into many user stories, each of which should correspond to at least one test to be implemented for that feature. If all the tests pass, it means that all of the user stories are successfully implemented, and the feature is complete.</p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Test Driven Development</strong>: a software development methodology that emphasizes writing tests before the code to be tested. This gives developers a roadmap to success - once all the tests are passing, the feature is complete!</li><li class=""css-cvpopp""><strong>User Story</strong>: User stories are short sentences derived from feature requirements in the format of  <em class=""chakra-text css-o3oz8b"">As a user, I can  in order to </em>. These are used to create tests to verify the components of a feature.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following requirements are testable?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As a user, I can click on the ""tacos"" tab to view a list of tacos that are available.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As a user, I can click on the ""order taco"" button next to a taco on the tacos tab to add it to my order.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As a user, I can click on the ""schedule delivery"" button while viewing an order to see a modal window with a time picker and an address field.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As a user, I can click on the ""schedule"" button of the schedule delivery modal to save the time and address selected in the window.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5edea620_l5-07-big-picture/l5-07-big-picture.png'],https://www.youtube.com/embed/V4R_I9IpUEA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.3  Testing,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are many different types of tests meant to validate different types of features and different layers of an application. In this course, we\'re going to focus on two specific types of tests: Unit tests and integration tests.</p>\n<p class=""chakra-text css-o3oz8b"">Unit tests are meant to test a single unit or component of an application or process - these tests should be simple, and verify that a specific method, component, or process step acts as expected according to its inputs. Sometimes you\'ll also use unit tests to verify that the unit under test fails predictably, as well; it\'s good to test both positive and negative conditions in a unit test!</p>\n<p class=""chakra-text css-o3oz8b"">Integration tests are the next layer up from unit tests. Instead of testing a single unit of an application, they test multiple units and how they <em class=""chakra-text css-o3oz8b"">integrate</em> with one another. Often, an integration test will validate an entire user story, for example, while a unit test will validate a single step in the process a user story describes.</p>\n<p class=""chakra-text css-o3oz8b"">The rule of thumb is that unit tests should be used to test invariants - conditions that do not change - and integration tests should be used to test user actions and entire process flows .</p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Unit Tests</strong>: A unit test only validates the smallest unit of a computational process. That might mean a test of a single method, or a single component in an application.</li><li class=""css-cvpopp""><strong>Invariants</strong>: An invariant is a law of computation, something that shouldn\'t change despite changing circumstances. For example, adding 0 to a number should always result in the original number, and dividing by 0 should always result in an error.</li><li class=""css-cvpopp""><strong>Integration Tests</strong>: Integration tests are intended to validate the operation of multiple application components as they interact with each other - or <em class=""chakra-text css-o3oz8b"">integrate</em> with one another.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the earlier requirement: “As a user, I can click on the ""schedule"" button of the schedule delivery modal to save the time and address selected in the window.”</p>\n<p class=""chakra-text css-o3oz8b"">Would this requirement use a Unit Test or an Integration Test?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Unit Test</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Integration Test</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Once more consider the same requirement as above: “As a user, I can click on the ""schedule"" button of the schedule delivery modal to save the time and address selected in the window.”</p>\n<p class=""chakra-text css-o3oz8b"">What are the environment requirements for testing this change?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Browser</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Platform Runtime (JDK)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application Files</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Database</p></div>']",[],https://www.youtube.com/embed/K9Y83WIJ40A
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.4  Testing with JUnit,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JUnit is the standard Java testing framework, and despite its name, it is capable of much more than unit tests. JUnit expects all tests for an application to be collected in class files, just like any other Java code.</p>\n<h3 class=""chakra-heading css-k57syw"">Annotations</h3>\n<p class=""chakra-text css-o3oz8b"">JUnit provides an annotation, <code class=""chakra-code css-1u83yg1"">@Test</code>, that can be placed on a method in a test class to declare a single test. Each method annotated like this can be either executed individually, or in a group - and in both cases, JUnit will generate a report that lists each test that was run, and whether it was successful or not.</p>\n<p class=""chakra-text css-o3oz8b"">In order for JUnit to know if a test is successful or not we need to use <em class=""chakra-text css-o3oz8b"">assertions</em>. <code class=""chakra-code css-1u83yg1"">@Test</code>-annotated methods should not have a return value! Instead, we can use special methods provided by JUnit to check our assumptions about the code under test. We\'ll look at a concrete example of this in the next video. To begin with, see the list of all annotations <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">Sometimes, we need to initialize some data or objects to be used in our test methods. JUnit provides a few extra annotations to define this initialization code. <code class=""chakra-code css-1u83yg1"">@BeforeEach</code>- and <code class=""chakra-code css-1u83yg1"">@AfterEach</code>-annotated methods will be called before an after each <code class=""chakra-code css-1u83yg1"">@Test</code>-annotated method, respectively, and <code class=""chakra-code css-1u83yg1"">@BeforeAll</code>- and <code class=""chakra-code css-1u83yg1"">@AfterAll</code>-annotated methods will be called at the before and after <em class=""chakra-text css-o3oz8b"">all</em> tests have been executed, respectively.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Assertions</h3>\n<p class=""chakra-text css-o3oz8b"">An assertion, in the context of JUnit, is a method we can call to check our assumptions about the behavior of the unit under test. If our assumptions are correct, the assertion silently returns and the test method continues. If they\'re false, the assertion throws a special exception class that JUnit uses to build the final failure report, and the test method halts execution.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Assertions are the static methods defined in the Assertion class. See the list of assertions <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/Assertions.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> , and an example on how to use assertions in a unit test <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n</blockquote>\n<p class=""chakra-text css-o3oz8b"">For example, <code class=""chakra-code css-1u83yg1"">assertEquals(int expected, int actual)</code> is an assertion method you can call in your test method to assert that the actual and expected integer values are equal. Let\'s see an example implementation of annotations and assertions next.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l4-testing-with-junit-master"">For the full lecture sample code from the previous video, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In the previous video example, we looked at some basic JUnit tests to learn more about JUnit\'s annotations and assertions. Some key takeaways:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">In a Maven project, it\'s extremely important to make sure your JUnit test classes are in the right directory. Maven expects tests to be in the <code class=""chakra-code css-1u83yg1"">src/test/java</code> directory. Always double check!</li><li class=""css-cvpopp"">JUnit\'s assertions are all static methods on the <code class=""chakra-code css-1u83yg1"">org.junit.jupiter.api.Assertions</code> class, so to use them you need to statically import the methods you need</li><li class=""css-cvpopp"">The most commonly-used assertion is <code class=""chakra-code css-1u83yg1"">assertEquals</code>, which can be used to check if the result of some action <em class=""chakra-text css-o3oz8b"">is equal</em> to the expected result.</li><li class=""css-cvpopp"">Another common assertion is <code class=""chakra-code css-1u83yg1"">assertThrows</code>, which is used to check if a given piece of code <em class=""chakra-text css-o3oz8b"">does</em> throw an exception as expected. This can be useful to check so-called negative test cases, where we want to make sure our application fails <em class=""chakra-text css-o3oz8b"">in the correct way</em>. This assertion uses Java 8\'s lambda expression syntax to capture a piece of code to test - if you\'re not familiar with this syntax, you can find more information about it in the further research section below.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">@BeforeEach</code>-annotated methods are particularly useful for initializing some data that needs to be in the same state for every test. For example in the video, we used this to ensure that a list under test always has the same values at the beginning of each test.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Lifecycle of a JUnit Test Class</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The diagram above shows the lifecycle of a JUnit test class.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">First, JUnit instantiates the class and calls any method annotated with <code class=""chakra-code css-1u83yg1"">@BeforeAll</code>.</li><li class=""css-cvpopp"">Then it chooses a test to run. It calls any method with the <code class=""chakra-code css-1u83yg1"">@BeforeEach</code> method, then it calls the <code class=""chakra-code css-1u83yg1"">@Test</code>-annotated test method.</li><li class=""css-cvpopp"">Finally it calls the <code class=""chakra-code css-1u83yg1"">@AfterEach</code>-annotated method. It repeats this for each <code class=""chakra-code css-1u83yg1"">@Test</code>-annotated method in the class.</li><li class=""css-cvpopp"">When none remain, it calls the <code class=""chakra-code css-1u83yg1"">@AfterAll</code>-annotated method and destroys the test class instance.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/"">Official JUnit User Guide<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"">Official Java Tutorial on Java 8\'s Lambda Expression Syntax<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5edea5f2_l5-20-testing-with-junit-/l5-20-testing-with-junit-.png'],https://www.youtube.com/embed/Ckz3UlX6Y0k
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.5  JUnit Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following entries describe the order of operations for Test-Driven Development (TDD)?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Tests are created first, then Requirements, then code is written based on the requirements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Code is written first and then Requirements are created. Unit tests are written to verify the requirements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Requirements are created first, and then code is written. Unit tests are created to verify the code meets the requirements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Requirements are created first, and then unit tests are written that verify the requirements. Code is written to make the unit tests pass.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The JUnit Assert class supports many types of assertions, so you may have to use the JUnit documentation to learn about them all. Which of the following are valid assertions?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">assertTrue</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">assertNotNull</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">assertNotEquals</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">assertArrayEquals</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">assertArrayEmpty</code></p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.6  Exercise: JUnit,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project will be built locally on your machine using the following instructions:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download the starter code <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/June/5eded445_l5e1/l5e1.zip"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. It can also be found in the Resources tab titled <code class=""chakra-code css-1u83yg1"">l5e1.zip</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the project in IntelliJ.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the <code class=""chakra-code css-1u83yg1"">Course1ApplicationTests.java</code> and <code class=""chakra-code css-1u83yg1"">FizzBuzzService.java</code> files.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the FizzBuzz algorithm such that is passes all tests in <code class=""chakra-code css-1u83yg1"">Course1ApplicationTests.java</code>!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Supporting Materials</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/June/5eded445_l5e1/l5e1.zip"">L5e1<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.7  Solution: JUnit,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are lots of different ways to solve this problem, but let\'s look at a simple one.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fizzBuzz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This solution passes our first three blocks of tests, but fails on the check for divisible by 3 and 5. That part can be passed by checking for divisible by both 3 and 5 (or checking for divisible by 15) first:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fizzBuzz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&amp;&amp;</span><span> number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">It still fails the final part of the unit test, however. <code class=""chakra-code css-1u83yg1"">assertThrows</code> expects that an <code class=""chakra-code css-1u83yg1"">IllegalArgumentException</code> is thrown in the event that we try to pass in a 0 or -1. Let\'s try adding the negative number check before returning:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fizzBuzz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&amp;&amp;</span><span> number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Value must be greater than 0""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This almost works, but it turns out that 0 mod 3 = 0, and so passing 0 in returns FizzBuzz instead of throwing our exception. The check must be at the top to the top to pass all our unit tests:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fizzBuzz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Value must be greater than 0""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&amp;&amp;</span><span> number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">These unit tests are pretty thorough, but they are not perfect. Consider the following example:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fizzBuzz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">||</span><span> number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Value must be greater than 0""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">15</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">||</span><span> number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">75</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This ALSO passes all our unit tests, despite obviously failing to perform correctly for the values -2 or 30.</p>\n<p class=""chakra-text css-o3oz8b"">It\'s not always practical to test every possible input and output, and so the main goal of our unit tests is to test a good selection of reasonable values, and some typical boundary cases. We could run a loop in this test and look for hundreds of values, but at a certain point you\'re just reimplementing the program inside the unit test and it\'s not worth it. Go for the biggest bang for your buck and rely on integration testing to deal with the occasional outliers!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Assertions are powerful, but what are their limitations? Consider a given method that is hard to test. How would you use JUnit and assertions to test it? How would the test influence a developer to implement the method?</p></div>']",[],https://www.youtube.com/embed/_BqTDhjEqL0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.8  JUnit in Situ,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When we write tests, it\'s with the intention to run them and report on the results. Test runners like JUnit provide many ways to report the results of a test run, but one of the most useful ways to interact with that reporting is through an IDE, like IntelliJ.</p>\n<p class=""chakra-text css-o3oz8b"">There are three main advantages to running JUnit tests from an IDE:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Interactive Reporting</strong>: When we run tests in an IDE, we can usually inspect the results of each test individually. If an assertion fails or an unexpected exception is triggered, the stack trace and circumstances will be shown in the details for each test, and clickable links in the results help you navigate to problem areas in your code.</li><li class=""css-cvpopp""><strong>Interactive Debugging</strong>: When a pernicious problem persists, it can often be helpful to step through the code\'s execution line-by-line to inspect both the control flow and the values in memory used by the program. This is called debugging, and while it\'s technically possible to do outside of an IDE, IDEs like IntelliJ provide many useful tools for making the process as painless as possible.</li><li class=""css-cvpopp""><strong>Code Coverage Reports</strong>: When we run code in an IDE like IntelliJ, we can choose to have the IDE track which lines of our code were visited, and how many times. This can be wildly useful when trying to track down why a branch of a condition isn\'t being reached, as well as when determining how much the entire code base is covered by the currently-implemented tests.</li></ul>\n<p class=""chakra-text css-o3oz8b"">In the next video, we\'ll take a look at some of these features in IntelliJ while exploring a real-world scenario - fixing failing tests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-junit-in-situ-master"">For the full lecture sample code from the previous and next videos, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this first foray into fixing failing tests, we ran our tests within IntelliJ to get a report of the status of all tests. Initially, these were all failing, but by clicking through IntellliJ\'s test report details, we quickly discovered a common problem to all of the tests: some of the data under test wasn\'t being initialized at all! We solved this by adding an <code class=""chakra-code css-1u83yg1"">@BeforeAll</code>-annotated method responsible for that initialization logic. Running the tests again, our report shows that some are slowly turning green - progress! All we needed was a handy overview of the test results, and we could quickly identify a common problem between them.</p>\n<p class=""chakra-text css-o3oz8b"">In the next video, we\'ll explore another tool the IDE provides for this kind of work - debugging.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-junit-in-situ-master"">For the full lecture sample code from the previous and next videos, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this second attempt to fix our failing tests, we used IntelliJ\'s debugger to check our code under test line-by-line. We found that the conditions our test was validating did not match the code under test - which means we had a decision to make.</p>\n<p class=""chakra-text css-o3oz8b"">Usually, in cases like this, where the test does not match the code it is testing, we have to decide which is correct. In a real-world development scenario, we would check both against the technical requirements provided to us, but since this is just an example, we chose to assume that the code under test was correct.</p>\n<p class=""chakra-text css-o3oz8b"">In any case, debugging helped us find an issue that otherwise might be hard to find. In the next video, we\'ll try to get the remaining tests passing, and we\'ll see how code coverage can help us determine if our code is being sufficiently tested.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-junit-in-situ-master"">For the full lecture sample code from the previous videos, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this final push to get our tests passing, we looked at the remaining failing tests. The first was another issue of test/code not being in sync: our test expected a specific exception to be thrown, but the code under test wasn\'t throwing that exception! This is a good example of why <code class=""chakra-code css-1u83yg1"">assertThrows</code> is useful in a testing context; if our feature requirements or documentation say that a method should throw an exception under certain circumstances, it can cause real problems if it does anything else.</p>\n<p class=""chakra-text css-o3oz8b"">Moving on to the remaining failing test, we saw that it was performing the exact same test as a previous successful test. This is usually a good sign that these tests rely on some data that needs to be initialized  identically before each test. Indeed, we found that the data we initialized with an <code class=""chakra-code css-1u83yg1"">@BeforeAll</code>-annotated method actually needed to be initialized before <em class=""chakra-text css-o3oz8b"">each</em> test, not all of them, so we changed the <code class=""chakra-code css-1u83yg1"">@BeforeAll</code> annotation to <code class=""chakra-code css-1u83yg1"">@BeforeEach</code>.</p>\n<p class=""chakra-text css-o3oz8b"">Finally, to verify that our tests weren\'t overlooking anything in our code base, we re-ran them with IntelliJ\'s <em class=""chakra-text css-o3oz8b"">code coverage</em> feature. This showed us that while our tests were covering nearly all of the lines of code in the project, there was one method we weren\'t testing at all. After adding a test for that method and re-running the test suite with coverage, we saw our entire codebase lit up in green. Nice!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Red, Then Green:</strong> The Test-Driven-Development Motto</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Interactive Reporting</strong>: When we run tests in an IDE, we can usually inspect the results of each test individually. If an assertion fails or an unexpected exception is triggered, the stack trace and circumstances will be shown in the details for each test, and clickable links in the results help you navigate to problem areas in your code.</li><li class=""css-cvpopp""><strong>Interactive Debugging</strong>: When a pernicious problem persists, it can often be helpful to step through the code\'s execution line-by-line to inspect both the control flow and the values in memory used by the program. This is called debugging, and while it\'s technically possible to do outside of an IDE, IDEs like IntelliJ provide many useful tools for making the process as painless as possible.</li><li class=""css-cvpopp""><strong>Code Coverage Reports</strong>: When we run code in an IDE like IntelliJ, we can choose to have the IDE track which lines of our code were visited, and how many times. This can be wildly useful when trying to track down why a branch of a condition isn\'t being reached, as well as when determining how much the entire code base is covered by the currently-implemented tests.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/help/idea/performing-tests.html"">An Overview of IntelliJ\'s Test Running Features<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations"">An Overview of All of the Annotations Available in JUnit<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions"">An Overview of Most of the Assertions Available in JUnit<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5edec5e2_l5-37-junit-in-situ-summary/l5-37-junit-in-situ-summary.png'],https://www.youtube.com/embed/Y6hk-YaZS1U
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.9  JUnit in Situ Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What are some advantages IDEs provide when running unit tests?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Code Coverage</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Debugging</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Speed</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Unit Test Reports</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Now that our taco delivery service has gone viral, we need to start making sure our code is appropriately tested. Let’s look at an imperfect example of DeliveryService class and a corresponding test:</p>\n<h3 class=""chakra-heading css-k57syw"">DeliveryService.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DeliveryService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DeliveryMapper</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">OrderService</span><span> orderService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DeliveryService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DeliveryMapper</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">OrderService</span><span> orderService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>deliveryMapper </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>orderService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> orderService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">scheduleDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LocalDateTime</span><span> time</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>time</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">isBefore</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LocalDateTime</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">now</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Cannot schedule a delivery in the past""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>orderService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getTacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">size</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;=</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Cannot schedule a delivery for 0 tacos. Why would you do that??""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Scheduling a Delivery""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> delivery </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setTime</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Timestamp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">valueOf</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>time</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setOrderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setOrderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findTacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findTacosForDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">DeliveryServiceTest.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">testScheduleDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> tacos </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  tacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setTacoName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fish Fiesta""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  tacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setCount</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  tacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setTacoPrice</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3.33</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  orderService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addItemToOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>tacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> ORDER_ID</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  deliveryService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">scheduleDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LocalDateTime</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">now</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">plusHours</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> ORDER_ID</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> delivery </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> deliveryService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>ORDER_ID</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Assertions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>ORDER_ID</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getOrderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Assertions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertArrayEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>tacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>        deliveryService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findTacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getOrderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">toArray</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Your job is to figure out where our unit test is inadequate. Which of the following lines from DeliveryService will be tested by our unit test?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Cannot schedule a delivery in the past""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Cannot schedule a delivery for 0 tacos. Why would you do that??""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Scheduling a Delivery""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findTacosForDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.10  Exercise: JUnit in Situ,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project will be built locally on your machine using the following instructions:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download the starter code <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/June/5eded990_l5e2/l5e2.zip"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. It can also be found in the Resources tab titled <code class=""chakra-code css-1u83yg1"">l5e2.zip</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the project in IntelliJ.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the files <code class=""chakra-code css-1u83yg1"">FizzBuzzService.java</code> and <code class=""chakra-code css-1u83yg1"">FizzBuzzServiceTest.java</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Look at the buzzFizz method in <code class=""chakra-code css-1u83yg1"">FizzBuzzService.java</code> and write unit tests for it in <code class=""chakra-code css-1u83yg1"">FizzBuzzServiceTest.java</code>!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Supporting Materials</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/June/5eded990_l5e2/l5e2.zip"">L5e2<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.11  Solution: JUnit in Situ,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are quite a few holes in this implementation. Here’s one way to organize your tests to identify failures:</p>\n<h3 class=""chakra-heading css-k57syw"">FizzBuzzServiceTest.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">testBuzzFizz_happyPath</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span> fbs </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// expected to pass</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">101</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""101""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">9</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">10</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">15</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">30</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">testBuzzFizz_unclearRepetition</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span> fbs </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// requirements unclear - does ""FizzBuzz"" count as a ""Fizz"" and a ""Buzz"" as well?</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// both these tests fail because they return \'15\', which is ""FizzBuzz""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">18</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">20</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">testBuzzFizz_invalidStrings</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span> fbs </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// should this be case insensitive?</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">//throws number format exception</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// what to do about nonsense input?</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertThrows</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""tacocat""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">testBuzzFizz_boundaryChecking</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span> fbs </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// how should the program represent that no input produces the output. This example would</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// return the integer -1, which is incorrect. Should we throw an exception, return 0 or some other value?</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertThrows</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""-1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// what about integers recurrence? There should never be a second occurrence</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// of ""1"", so what do we expect the program to do?</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertThrows</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// we can also enter invalid occurrence param for ""Fizz"" or ""Buzz"", getting back 0 or negative numbers</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertThrows</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// returns 0</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertThrows</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// returns -5</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span></code></div></div></pre></div>']",[],https://www.youtube.com/embed/N3h_89BkAuo
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.12  Selenium/WebDriver,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Our goal in this section is to expand our testing acumen beyond simple unit tests into the realm of integration tests. Specifically, we want to be able to test our web application\'s abilities from the high-level perspective of user actions. In order to do this, we need a way to programmatically simulate a user\'s action in the browser. That\'s where Selenium comes in.</p>\n<p class=""chakra-text css-o3oz8b"">Selenium is a cross-platform tool for browser automation and scripting, and we\'re going to use it to write tests that simulate a user\'s actions in a browser. In the next video, we\'ll look at how Selenium\'s API functions in detail.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Architecture of Selenium</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the architecture of selenium. Test scripts written using Selenium\'s Java API are translated by Selenium to work on different browsers using different drivers.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-selenium-webdriver-master"">For the complete lecture code sample from the previous video, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this video, we looked at the basic elements of a Selenium script. Here\'s the full script we examined:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    public static void main(String[] args) throws InterruptedException {\n</span>        WebDriverManager.chromedriver().setup();\n        WebDriver driver = new ChromeDriver();\n        driver.get(""http://www.google.com"");\n        WebElement inputField = driver.findElement(By.name(""q""));\n        inputField.sendKeys(""selenium"");\n        inputField.submit();\n        List&lt;WebElement&gt; results = driver.findElements(By.cssSelector(""div.g a""));\n        for (WebElement element : results) {\n            String link = element.getAttribute(""href"");\n            System.out.println(link);\n        }\n        Thread.sleep(5000);\n        driver.quit();\n    }</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Every Selenium script has to start by initializing a web driver. Since we\'re using WebDriverManager (documentation links below), we can use it to automatically download the binary file for Selenium\'s driver for Google Chrome, and then we can initialize the driver without any additional work.</p>\n<p class=""chakra-text css-o3oz8b"">Once we have a driver, we need to tell it which web page to visit. We do this with <code class=""chakra-code css-1u83yg1"">driver.get(""http://www.google.com"");</code> in the script, but if we were testing one of our own applications, like the message page from earlier this course, we would have to change the URL to something like <code class=""chakra-code css-1u83yg1"">http://localhost:8080/home</code>.</p>\n<p class=""chakra-text css-o3oz8b"">In order to interact with or extract data from the web page, we first need to select the required HTML elements on the page. In this example, we use <code class=""chakra-code css-1u83yg1"">driver.findElement(By.name(""q""));</code> to select the google search input element. A detailed explanation of this process can be found below.</p>\n<p class=""chakra-text css-o3oz8b"">In order to interact with the elements we\'ve selected, we can call various methods on them. In this case, we\'re using <code class=""chakra-code css-1u83yg1"">inputField.sendKeys(""selenium"");</code> to simulate typing the word <code class=""chakra-code css-1u83yg1"">selenium</code> into google, and we\'re using <code class=""chakra-code css-1u83yg1"">inputField.submit();</code> to simulate submitting the search form.</p>\n<p class=""chakra-text css-o3oz8b"">Once we\'ve interacted with the web page, we want to read in the results and print them out. Again, we use the same process for finding an element, but this time, we use <code class=""chakra-code css-1u83yg1"">driver.findElements()</code> to get a list of matching elements, instead of a single one.</p>\n<p class=""chakra-text css-o3oz8b"">The final part of every Selenium script is shutting down the driver. Since the driver is an external program, if we don\'t call <code class=""chakra-code css-1u83yg1"">driver.quit()</code>, the automated browser window will never close on its own.</p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Web Driver</strong>: In order for Selenium to assume control of a browser, it needs a program to interface with the specific browser\'s API. This program is called a web driver, and there are different web drivers for each major browser.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/bonigarcia/webdrivermanager"">WebDriverManager on Github, with Documentation on Its Use and Motivation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.selenium.dev/documentation/en/getting_started_with_webdriver/locating_elements/"">Official Selenium Documentation on Finding Elements on a Web Page, with Code Examples<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"">DOM: Overview and the fundamental data types<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5edec654_l5-53-selenium-webdriver/l5-53-selenium-webdriver.png'],https://www.youtube.com/embed/zniCcO2lgX0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.13  Selenium/WebDriver Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here’s a little HTML snippet from our exercise back in the lesson on Thymeleaf. Look familiar? What do you think this Selenium script will do if run on this page?</p>\n<h3 class=""chakra-heading css-k57syw"">home.html</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">head</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/simplehome</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(221, 17, 68);"">”submit”</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">value</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">Visit me</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">if</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${firstVisit}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Hello, homepage!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">unless</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${firstVisit}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Welcome back!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">html</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">SeleniumExample.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">main</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> args</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">InterruptedException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriverManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">chromedriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setup</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriver</span><span> driver </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ChromeDriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">get</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""http://localhost:8080/simplehome""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>“submit”</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">click</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Thread</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sleep</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">5000</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">quit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open <code class=""chakra-code css-1u83yg1"">http://localhost:8080/simplehome</code> in your current browser, find the button with the id “submit” and click it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open <code class=""chakra-code css-1u83yg1"">http://localhost:8080/simplehome</code> in a new Chrome browser, find the button with the id “submit” and click it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open <code class=""chakra-code css-1u83yg1"">http://localhost:8080/simplehome</code> in a new Chrome browser, find the field with the id “submit” and position the cursor in the field.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open <code class=""chakra-code css-1u83yg1"">http://localhost:8080/simplehome</code> in a new Chrome browser, find the button with the type “submit” and click it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Our previous example had an id, which is pretty handy! In fact, as a developer, you should get in the habit of always adding ids to any page elements that might be useful to reference in testing. However, we don’t always have the luxury of referencing an element by its id. Here’s a similar input field, but with no id!</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">class</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(221, 17, 68);"">”simpleForm”</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/simplehome</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">class</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(221, 17, 68);"">”submitButton”</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">name</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(221, 17, 68);"">”submit”</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">value</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">Visit me</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Which of the following statements can still reference this input element?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.name(""submit"")).click(); </code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.className(""submitButton"")).click(); </code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.tagName(""input"")).click(); </code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.cssSelector(""input.submitButton"")).click(); </code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.xpath(""//input[@value=\'Visit me\']"")).click(); </code></p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.14  Exercise: Selenium/WebDriver,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project will be built locally on your machine using the following instructions:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download your old project from the <em class=""chakra-text css-o3oz8b"">Connecting Controllers to Templates</em> Exercise, or download new starter code <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/July/5f246c61_l5e3/l5e3.zip"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. It can also be found in the Resources tab titled <code class=""chakra-code css-1u83yg1"">l5e3.zip</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the project in IntelliJ.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use the WebDriverManager to create a new WebDriver for Chrome.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use the WebDriver to get the url: <code class=""chakra-code css-1u83yg1"">http://localhost:8080/animal</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Find both input fields and write values to them.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Submit the form 5 times.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Find the conclusion message and write its contents to the console.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Supporting Materials</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/July/5f246c61_l5e3/l5e3.zip"">L5e3<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.15  Solution: Selenium/WebDriver,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Below is the sample solution. You can try playing around with the provided solution.</p>\n<h3 class=""chakra-heading css-k57syw"">File: <code class=""chakra-code css-1u83yg1"">/l5e3/src/test/java/com/example/demo/SeleniumTest.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">example</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">demo</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">io</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">github</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">bonigarcia</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">wdm</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriverManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">junit</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">jupiter</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">api</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">openqa</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">selenium</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">openqa</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">selenium</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">openqa</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">selenium</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">openqa</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">selenium</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">chrome</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ChromeDriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">boot</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">test</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">context</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SpringBootTest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@SpringBootTest</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SeleniumTest</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">main</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> args</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">InterruptedException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">//start the driver, open chrome to our target url</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriverManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">chromedriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setup</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriver</span><span> driver </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ChromeDriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">get</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""http://localhost:8080/animal""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n\n<span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">//find the fields we want by id and fill them in</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebElement</span><span> inputField </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""animalText""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        inputField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sendKeys</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Manatee""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        inputField </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""adjective""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        inputField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sendKeys</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Whirling""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebElement</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> trainingResults </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElements</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">className</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""trainingMessage""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// The field-values don’t clear on submit for our simple app, so just submit it 5 times</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// However, the elements gets removed from the DOM structure after each submit.</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">for</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> i </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> i </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> i</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">++</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// We are re-assigning the inputField because this element gets removed from the DOM structure after each iteration.</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Otherwise, you\'ll get org.openqa.selenium.StaleElementReferenceException at runtime.</span><span>\n</span><span>            inputField </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""adjective""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            inputField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>            </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""trainingResults.size() = ""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> trainingResults</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">size</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// then get the element by the class conclusionMessage and print it</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebElement</span><span> conclusionResult </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">className</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""conclusionMessage""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""conclusionResult.getText() = ""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> conclusionResult</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Thread</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sleep</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">5000</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">quit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">You\'ll notice that the web-browser closes automatically after all the iterations are completed.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> - The code above is written for the Chrome browser. However, you can change the code for your respective browser. For other browsers, refer to the README of <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/bonigarcia/webdrivermanager#webdrivermanager-as-java-dependency"">WebDriverManager<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for a corresponding method.</p>\n</blockquote></div>']",[],https://www.youtube.com/embed/I8iazfgyGSk
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.16  JUnit and Selenium,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Selenium and JUnit are a natural fit for one another. Both are plain Java libraries, and don\'t require any special syntax or approach to integrate with one another. We can use Selenium\'s driver to navigate the web, interact with elements on the page, and extract data from those elements, and we can use JUnit\'s assertions to check the data that is returned against expected values.</p>\n<p class=""chakra-text css-o3oz8b"">Selenium also requires some initialization logic, like setting up the web driver and navigating to the correct URL to perform further actions on. JUnit\'s <code class=""chakra-code css-1u83yg1"">@BeforeAll</code> annotation is perfect for writing a method to initialize the web driver, and we can use the <code class=""chakra-code css-1u83yg1"">@BeforeEach</code> annotation to write a method that navigates to a common starting URL for all tests in the class. Finally, since we need to make sure we quit the web driver once our tests are finished, we can use JUnit\'s <code class=""chakra-code css-1u83yg1"">@AfterAll</code> annotation to define a method that takes care of that.</p>\n<p class=""chakra-text css-o3oz8b"">Selenium provides another useful tool for JUnit test organization - the Page Object. A Page Object is a Java class that is meant to represent a specific web page under test. We can use Page Objects to reduce boilerplate when writing Selenium scripts, and, as we\'ll see in the next video, we can even use them to make our test code resemble the user stories under test.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-junit-and-selenium-master"">For the full lecture sample sample code from the previous videos, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In the previous video, we looked at a simple counter application, with some text to display the current count, an increment button, and a reset button. Our goal is to write some JUnit and Selenium code to test that all of the essential features of the app are functioning correctly. First, though, we want a Selenium Page Object to represent the page we\'re testing. Here\'s the full <code class=""chakra-code css-1u83yg1"">CounterPage</code> class from the example:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public class CounterPage {\n</span>\n    @FindBy(id = ""count-display"")\n    private WebElement countDisplay;\n\n    @FindBy(id = ""increment-button"")\n    private WebElement incrementButton;\n\n    @FindBy(id = ""reset-value-field"")\n    private WebElement resetValueField;\n\n    @FindBy(id = ""reset-button"")\n    private WebElement resetButton;\n\n    public CounterPage(WebDriver driver) {\n        PageFactory.initElements(driver, this);\n    }\n\n    public int getDisplayedCount() {\n        return Integer.parseInt(countDisplay.getText());\n    }\n\n    public void incrementCount() {\n        incrementButton.click();\n    }\n\n    public void resetCount(int value) {\n        resetValueField.clear();\n        resetValueField.sendKeys(String.valueOf(value));\n        resetButton.click();\n    }\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">There are three main sections to this, and any, Page Object:</p>\n<p class=""chakra-text css-o3oz8b""><strong>Defining Element Selectors</strong>\n```Java\n@FindBy(id = ""count-display"")\nprivate WebElement countDisplay;</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-python"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token decorator annotation"" style=""color: rgb(15, 43, 61);"">@FindBy</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(0, 121, 162);"">id</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""increment-button""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    private WebElement incrementButton</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token decorator annotation"" style=""color: rgb(15, 43, 61);"">@FindBy</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(0, 121, 162);"">id</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""reset-value-field""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    private WebElement resetValueField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token decorator annotation"" style=""color: rgb(15, 43, 61);"">@FindBy</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(0, 121, 162);"">id</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""reset-button""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    private WebElement resetButton</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>```</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The goal of a Page Object is to simplify and abstract away common Selenium tasks, like finding elements on the page. Previously, we did this with <code class=""chakra-code css-1u83yg1"">driver.findElement</code> and <code class=""chakra-code css-1u83yg1"">driver.findElements</code>, but in a Page Object, we can take a much more Spring-like approach by declaring annotated fields representing the elements we want to capture on the page. These element selectors will be automatically processed by Selenium, but we have to kick that process off ourselves - which we do in the next section:</p>\n<p class=""chakra-text css-o3oz8b""><strong>Initializing Elements in the Constructor</strong>\n<code class=""chakra-code css-1u83yg1"">Java         public CounterPage(WebDriver driver) {             PageFactory.initElements(driver, this);         }     </code></p>\n<p class=""chakra-text css-o3oz8b"">In this example, we declare a WebDriver as the only constructor argument, and we call <code class=""chakra-code css-1u83yg1"">PageFactory.initElements()</code> with the driver and the <code class=""chakra-code css-1u83yg1"">this</code> keyword as arguments. This is shorthand to tell Selenium to use the given driver to initialize the <code class=""chakra-code css-1u83yg1"">@FindBy</code>-annotated fields in the class. In principle, we could do this somewhere else, but as we\'ll see in the next video, initializing a Page Object in its constructor like this is pretty flexible and clean.</p>\n<p class=""chakra-text css-o3oz8b"">By adding this constructor, whenever we create a new <code class=""chakra-code css-1u83yg1"">CounterPage</code> object, Selenium will automatically find and capture the elements we declared, reducing a bunch of similar calls to <code class=""chakra-code css-1u83yg1"">driver.findElement</code> to a single <code class=""chakra-code css-1u83yg1"">new CounterPage()</code> instantiation. Once we have those elements, we can move on to the next section:</p>\n<p class=""chakra-text css-o3oz8b""><strong>Creating Helper Methods</strong>\n```Java\npublic int getDisplayedCount() {\nreturn Integer.parseInt(countDisplay.getText());\n}</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-javascript"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">incrementCount</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        incrementButton</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">click</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">resetCount</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token parameter"">int value</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        resetValueField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">clear</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        resetValueField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sendKeys</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token known-class-name"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">valueOf</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>value</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        resetButton</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">click</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token template-string template-punctuation"" style=""color: rgb(221, 17, 68);"">`</span><span class=""token template-string template-punctuation"" style=""color: rgb(221, 17, 68);"">`</span><span>`</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Now that our Page Object has selected elements from the page it represents, we can define helper methods that encapsulate common tasks for the page. In this counter example, we need to be able to read the current count from the screen, we need to be able to increment the count, and we need to reset the count. Notice that I didn\'t mention any specific elements to describe the functionality of these actions - while we have to be specific in our implementation of these methods, as you can see in the code above, the goal of writing these helpers is to separate the <em class=""chakra-text css-o3oz8b"">action taken on the class</em> from <em class=""chakra-text css-o3oz8b"">the specific element interactions required to fulfill that action</em>. In some ways, this is another instance of separation of concerns - by hiding the implementation details in these methods, if the HTML of the page ever changes, we don\'t have to update anything except the code inside this class - the tests that will use this class can just continue to call the same methods they did before.</p>\n<p class=""chakra-text css-o3oz8b"">Speaking of tests - now that we\'ve set up the <code class=""chakra-code css-1u83yg1"">CounterPage</code> class, we can finally implement some tests for this app.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-junit-and-selenium-master"">For the full lecture sample code from the previous videos, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">Here\'s the full JUnit test class from the previous video:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n</span>class UserTestingApplicationTests {\n    @LocalServerPort\n    private Integer port;\n\n    private static WebDriver driver;\n    private CounterPage counter;\n\n    @BeforeAll\n    public static void beforeAll() {\n        WebDriverManager.chromedriver().setup();\n        driver = new ChromeDriver();\n    }\n\n    @AfterAll\n    public static void afterAll() {\n        driver.quit();\n    }\n\n    @BeforeEach\n    public void beforeEach() {\n        driver.get(""http://localhost:"" + port + ""/counter"");\n        counter = new CounterPage(driver);\n    }\n\n    @Test\n    public void testIncrement() {\n        int prevValue = counter.getDisplayedCount();\n        counter.incrementCount();\n        assertEquals(prevValue + 1, counter.getDisplayedCount());\n    }\n\n    @Test\n    public void testIncrementTenTimes() {\n        int prevValue = counter.getDisplayedCount();\n        for (int i = 0; i &lt; 10; i++) {\n            assertEquals(prevValue + i, counter.getDisplayedCount());\n            counter.incrementCount();\n        }\n    }\n\n    @Test\n    public void testReset() {\n        counter.resetCount(10);\n        assertEquals(10, counter.getDisplayedCount());\n        counter.resetCount(0);\n        assertEquals(0, counter.getDisplayedCount());\n    }\n\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">There are a few things we have to do to set up a test file for a Spring Boot app. The main thing is that we have to make sure our server is running before the tests start - we do that here with\n<code class=""chakra-code css-1u83yg1"">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</code>. This tells JUnit to run the application before any tests are executed, with a random port number instead of the default <code class=""chakra-code css-1u83yg1"">8080</code>. This is useful because it means we can have multiple copies of the app running at the same time, which is common in development and testing environments.</p>\n<p class=""chakra-text css-o3oz8b"">Of course, we need to know what the random port ends up being so that we can use Selenium\'s <code class=""chakra-code css-1u83yg1"">driver.get()</code> method to navigate the browser to our app. Spring makes this easy for us with the <code class=""chakra-code css-1u83yg1"">@LocalServerPort</code> annotation. Spring will inject the current port into a field annotated with this like the example above.</p>\n<p class=""chakra-text css-o3oz8b"">As we mentioned in the video, we set up the Selenium driver in an <code class=""chakra-code css-1u83yg1"">@BeforeAll</code> method, and we quit it in an <code class=""chakra-code css-1u83yg1"">@AfterAll</code> method. However, the magic really starts with the <code class=""chakra-code css-1u83yg1"">@BeforeEach</code> method - here, we navigate to the <code class=""chakra-code css-1u83yg1"">/countert</code> URL and initialize a new <code class=""chakra-code css-1u83yg1"">CounterPage</code> object. This means that every test will start from this URL and with a fresh <code class=""chakra-code css-1u83yg1"">CounterPage</code> object - which makes test development extremely simple.</p>\n<p class=""chakra-text css-o3oz8b"">As you can see from the rest of the tests, we simply use the helper methods we defined on <code class=""chakra-code css-1u83yg1"">CounterPage</code> to perform all actions in and retrieve all data from the browser. This makes our test code highly legible, and each test starts to look a lot like a user story - for example, for increment, we could read the test as</p>\n<p class=""chakra-text css-o3oz8b""><strong>As a user, I can increment the count in order to see the displayed count increase by one</strong></p>\n<p class=""chakra-text css-o3oz8b"">And the code doesn\'t look far off from that statement! That\'s a truly powerful abstraction.</p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Page Object</strong>: a special POJO variant that can be defined for use with Selenium. A Page Object should have <code class=""chakra-code css-1u83yg1"">@FindBy</code>-annotated fields that represent the key HTML elements under test, and should have helper methods that define high-level utilities and user actions on the page under test.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.selenium.dev/documentation/en/guidelines_and_recommendations/page_object_models/"">Official Selenium Guide to Using Page Objects<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],https://www.youtube.com/embed/9v9LCcVvZ7I
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.17  JUnit and Selenium Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match the following Selenium actions with their location in a Java Unit test class.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">WebDriverManager.chromedriver().setup();</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.quit();</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.id(“bazz”));</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.get(“http://my-webpage.biz/fizzBuzz”);</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@BeforeAll</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@BeforeEach</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@Test</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@AfterAll</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Imagine we’re creating a JUnit for the exercise we did earlier with our /animals page. We want to submit the form multiple times and make sure the message changes when we get to our 5th submission. Which JUnit and Selenium components can help us write this test?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Selenium Page Object Model</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JUnit Assertions</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Selenium <code class=""chakra-code css-1u83yg1"">WebDriver.get</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Selenium <code class=""chakra-code css-1u83yg1"">By.cssSelector</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JUnit <code class=""chakra-code css-1u83yg1"">@AfterEach</code></p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.18  Page Load Times,"['<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Erratum</strong> - In the video above, the time argument passed to the <code class=""chakra-code css-1u83yg1"">WebDriverWait()</code> constructor is in <em class=""chakra-text css-o3oz8b"">Seconds</em>, instead of <em class=""chakra-text css-o3oz8b"">Milliseconds</em>. Refer to the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://selenium-python.readthedocs.io/waits.html"">WebDriverWait docs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more information and examples.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Using Selenium, if a page takes a while to load, do we need to make sure the driver waits before searching for elements that might not yet exist on the page?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Yes, because the driver will throw an exception if an element is not found.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">No, because the driver will return null if the element is not found.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Yes, because the driver will return an empty WebElement if it can\'t be found.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">No, because the driver will create the element in the browser if it can\'t be found.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of these solutions is the best way to wait for a page to load before beginning your Selenium tests?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a <code class=""chakra-code css-1u83yg1"">Thread.sleep()</code> to make sure the page has enough time to load</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use a WebDriverWait object to wait until the webDriver finds a specific element on the page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use WebDriverWait object(s) to wait for multiple page elements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use a loop to attempt loading elements multiple times, with a try-catch block to intercept exceptions</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In the real world, things get complicated, fast. Nowhere is this more apparent than when trying to account for page load times when automating user testing.</p>\n<p class=""chakra-text css-o3oz8b"">On the web, page load times can vary wildly according to different internet providers, the size of the resources a page has to load, the speed at which the server handles requests, and so on. It\'s virtually impossible to predict exactly when a page will load, and this presents a problem for testing; if we ask Selenium to find an element on a page before the page finishes loading, it\'s going to fail and we\'re going to have something like a big, fat <code class=""chakra-code css-1u83yg1"">NullpointerException</code> or a <code class=""chakra-code css-1u83yg1"">StaleElementReferenceException </code> on our hands. The <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://developer.mozilla.org/en-US/docs/Web/WebDriver/Errors/StaleElementReference#:~:text=When%20an%20element%20is%20no,it%20was%20retrieved%20from%20navigates."">StaleElementReferenceException<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> may occur in case of a delayed-<strong>re</strong>load.</p>\n<p class=""chakra-text css-o3oz8b"">So how do we make sure an element is on the page before we ask Selenium to look for it?</p>\n<p class=""chakra-text css-o3oz8b"">The answer is to use a <code class=""chakra-code css-1u83yg1"">WebDriverWait</code>, which is a class Selenium provides just for this purpose. Let\'s look at the following code:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriverWait</span><span> wait </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriverWait</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">10</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebElement</span><span> marker </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> wait</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">until</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>webDriver </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> webDriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""page-load-marker""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">In this example, we create a new <code class=""chakra-code css-1u83yg1"">WebDriverWait</code> instance using a driver and a timeout in seconds. <code class=""chakra-code css-1u83yg1"">WebDriverWait</code> defines a method called <code class=""chakra-code css-1u83yg1"">until</code> that we use in the next line to force Selenium to pause <em class=""chakra-text css-o3oz8b"">until</em> the specified element is found, or the timeout is reached.</p>\n<p class=""chakra-text css-o3oz8b"">This is extremely handy, since we can now ensure that Selenium waits and continues in a structured way.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.selenium.dev/documentation/en/webdriver/waits/"">Official Selenium Guide to Waits<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],https://www.youtube.com/embed/AQgVt_WmLEA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.19  Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It\'s time to add automated user testing to our chat application! Update your previous final review project according to the tasks below, and refer back to the instructions above for the high-level goals and code snippets to include in your project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add Selenium and WebDriverManager dependencies to the project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create Page Objects for the HTML templates involved in the tests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write at least one high-level JUnit test that tests a new user\'s registration, login, and first message.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run your tests and verify that the app functions as expected; if it doesn\'t, identify the problem and solve it, and verify your solution by re-running the tests.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.20  Solution: Final Review,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Glossary</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Test Driven Development</strong>: a software development methodology that emphasizes writing tests before the code to be tested. This gives developers a roadmap to success - once all the tests are passing, the feature is complete!</li><li class=""css-cvpopp""><strong>User Story</strong>: User stories are short sentences derived from feature requirements in the format of  <em class=""chakra-text css-o3oz8b"">As a user, I can  in order to </em>. These are used to create tests to verify the components of a feature.</li><li class=""css-cvpopp""><strong>Unit Tests</strong>: A unit test only validates the smallest unit of a computational process. That might mean a test of a single method, or a single component in an application.</li><li class=""css-cvpopp""><strong>Invariants</strong>: An invariant is a law of computation, something that shouldn\'t change despite changing circumstances. For example, adding 0 to a number should always result in the original number, and dividing by 0 should always result in an error.</li><li class=""css-cvpopp""><strong>Integration Tests</strong>: Integration tests are intended to validate the operation of multiple application components as they interact with each other - or <em class=""chakra-text css-o3oz8b"">integrate</em> with one another.</li><li class=""css-cvpopp""><strong>Assertion</strong>: an assertion, in the context of JUnit, is a method we can call to check our assumptions about the behavior of the unit under test. If our assumptions are correct, the assertion silently returns and the test method continues. If they\'re false, the assertion throws a special exception class that JUnit uses to build the final failure report, and the test method halts execution.</li><li class=""css-cvpopp""><strong>Interactive Reporting</strong>: When we run tests in an IDE, we can usually inspect the results of each test individually. If an assertion fails or an unexpected exception is triggered, the stack trace and circumstances will be shown in the details for each test, and clickable links in the results help you navigate to problem areas in your code.</li><li class=""css-cvpopp""><strong>Interactive Debugging</strong>: When a pernicious problem persists, it can often be helpful to step through the code\'s execution line-by-line to inspect both the control flow and the values in memory used by the program. This is called debugging, and while it\'s technically possible to do outside of an IDE, IDEs like IntelliJ provide many useful tools for making the process as painless as possible.</li><li class=""css-cvpopp""><strong>Code Coverage Reports</strong>: When we run code in an IDE like IntelliJ, we can choose to have the IDE track which lines of our code were visited, and how many times. This can be wildly useful when trying to track down why a branch of a condition isn\'t being reached, as well as when determining how much the entire code base is covered by the currently-implemented tests.</li><li class=""css-cvpopp""><strong>Web Driver</strong>: In order for Selenium to assume control of a browser, it needs a program to interface with the specific browser\'s API. This program is called a web driver, and there are different web drivers for each major browser.</li><li class=""css-cvpopp""><strong>Page Object</strong>: a special POJO variant that can be defined for use with Selenium. A Page Object should have <code class=""chakra-code css-1u83yg1"">@FindBy</code>-annotated fields that represent the key HTML elements under test, and should have helper methods that define high-level utilities and user actions on the page under test.</li></ul></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.21  Lesson Conclusion,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In this lesson, you learned about test-driven development and user stories, JUnit and IntelliJ\'s tools for test running, and how to use Selenium to simulate a user\'s actions in an automated browser. Learning how to use these tools allowed you to write automated tests for the chat application you\'ve been building this whole course, and with the rest of the skills you\'ve acquired so far, you\'re ready to take on a larger, more complicated project and still feel confident that it is robust. More on that in the final project instructions.</p></div>']",[],https://www.youtube.com/embed/Lw0BdKMpdmQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.22  Course Recap,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Look How Far You\'ve Come!</strong></p></div>']",['https://video.udacity-data.com/topher/2020/June/5edecc78_l0-30-course-outline/l0-30-course-outline.jpg'],https://www.youtube.com/embed/iDkcmoboXs0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.23  Congratulations!,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You\'ve worked so hard, and you should be proud of all of the work you\'ve done. You\'re on your way to becoming a Java Web Developer!</p></div>']",[],https://www.youtube.com/embed/FZTGXlHWsgk
Java Web Developer,COURSE 2:Spring Boot Basics,SuperDuperDrive,7.1  Project Overview,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,SuperDuperDrive,7.2  Project Directions,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Login page: <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/login"">http://localhost:8080/login<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh""><strong>2. Signup Page</strong></h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Everyone should be allowed access to this page, and potential users can use this page to sign up for a new account.</li><li class=""css-cvpopp"">Validate that the username supplied does not already exist in the application, and show such signup errors on the page when they arise.</li><li class=""css-cvpopp"">Remember to store the user\'s password securely!</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Sign Up page: <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/signup"">http://localhost:8080/signup<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">3. Home Page</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The home page should have a logout button that allows the user to log out of the application and keep their data private.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The home page is the center of the application and hosts the three required pieces of functionality. The existing template presents them as three tabs that can be clicked through by the user:</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">i. Files</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The user should be able to upload files and see any files they previously uploaded.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Home page: <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/home"">http://localhost:8080/home<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The user should be able to view/download or delete previously-uploaded files.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Any errors related to file actions should be displayed. For example, a user should not be able to upload two files with the same name, but they\'ll never know unless you tell them!</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">ii. Notes</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The user should be able to create notes and see a list of the notes they have previously created.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The user should be able to edit or delete previously-created notes.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">iii. Credentials:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The user should be able to store credentials for specific websites and see a list of the credentials they\'ve previously stored. If you display passwords in this list, make sure they\'re encrypted!</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The user should be able to view/edit or delete individual credentials. When the user views the credential, they should be able to see the unencrypted password.</li></ul></div>']","['https://video.udacity-data.com/topher/2020/March/5e698e86_screen-shot-2020-03-11-at-6.20.37-pm/screen-shot-2020-03-11-at-6.20.37-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e698ee3_screen-shot-2020-03-11-at-6.22.13-pm/screen-shot-2020-03-11-at-6.22.13-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e698f20_screen-shot-2020-03-11-at-6.23.09-pm/screen-shot-2020-03-11-at-6.23.09-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e698f5a_screen-shot-2020-03-11-at-6.24.09-pm/screen-shot-2020-03-11-at-6.24.09-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e698f98_screen-shot-2020-03-11-at-6.25.12-pm/screen-shot-2020-03-11-at-6.25.12-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e699026_screen-shot-2020-03-11-at-6.27.32-pm/screen-shot-2020-03-11-at-6.27.32-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e69905a_screen-shot-2020-03-11-at-6.28.26-pm/screen-shot-2020-03-11-at-6.28.26-pm.png']",
Java Web Developer,COURSE 2:Spring Boot Basics,SuperDuperDrive,7.3  Before you Submit,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,SuperDuperDrive,7.4  Project Rubric,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Utilize Spring Boot annotations and their functions</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are Spring Boot annotations like <code class=""chakra-code css-1u83yg1"">@Controller</code>, <code class=""chakra-code css-1u83yg1"">@RestController</code>, <code class=""chakra-code css-1u83yg1"">@RequestBody</code>, <code class=""chakra-code css-1u83yg1"">@RequestParams</code>, etc. in the Java classes.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Utilize Thymeleaf standard dialects in the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are Thymeleaf attributes in the HTMl files like <strong>th:action</strong>, etc.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Integrate MyBatis into the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are annotations like <code class=""chakra-code css-1u83yg1"">@Mapper</code>, <code class=""chakra-code css-1u83yg1"">@Select</code>, <code class=""chakra-code css-1u83yg1"">@Insert</code>, <code class=""chakra-code css-1u83yg1"">@Update</code>, and <code class=""chakra-code css-1u83yg1"">@Delete</code> in the Java classes and/or imports from MyBatis/iBatis API.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write an application that will fail gracefully</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If invalid or improper inputs are given to the system, it should not crash or display raw error information. Error messages should be shown or users should be disallowed from sending invalid or improper input. Make sure your implementation passes the <code class=""chakra-code css-1u83yg1"">testBadUrl()</code> and <code class=""chakra-code css-1u83yg1"">testLargeUpload()</code> test cases provided by Udacity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Develop a signup page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The signup page already has input fields for all the data you need from the user, including username and password fields.</p>\n<p class=""chakra-text css-o3oz8b"">Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a user signup workflow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On a successful signup, the user should be taken to the login page with a message indicating their registration was successful. Otherwise, an error message should be shown on the sign-up page. An error message is already present in the template, but should only be visible if an error occurred during signup. Make sure your implementation passes the <code class=""chakra-code css-1u83yg1"">testRedirection()</code> test case provided by Udacity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Develop a login page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The login page already has the username and password fields.</p>\n<p class=""chakra-text css-o3oz8b"">Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a user login/logout workflow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On a successful login, the user should be taken to their home page.</p>\n<p class=""chakra-text css-o3oz8b"">An error message is already present in the template, but should only be visible if an error occurred during signup.</p>\n<p class=""chakra-text css-o3oz8b"">On logout, the user should no longer have access to the home page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a home page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The home page should have three tabs:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">The user should be able to upload new files on this tab and download/remove existing files</li><li class=""css-cvpopp"">The user should be able to add new notes and edit/remove existing ones</li><li class=""css-cvpopp"">The user should be able to add new credentials, view existing credentials unencrypted and remove them as well</li></ol>\n<p class=""chakra-text css-o3oz8b"">The home template already has the forms required by this functionality. Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission</p>\n<p class=""chakra-text css-o3oz8b"">Details on individual features are documented in Section 3.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement persistent storage for users\' important data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When a user logs in, they should see the data they have added to the application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement note storage, edit, and removal</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Creation: On successful note creation, the user should be shown a success message and the created note should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful note deletion, the user should be shown a success message and the deleted note should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Edit/Update: When a user selects edit, they should be shown a view with the note\'s current title and text. On successful note update, the user should be shown a success message and the updated note should appear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement file storage, download, and removal</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Upload: On successful file upload, the user should be shown a success message and the uploaded file should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful file deletion, the user should be shown a success message and the deleted file should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Download: On successful file download, the file should download to the user\'s system.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement secure credential storage</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Creation: On successful credential creation, the user should be shown a success message and the created credential should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Edit/Update: When a user selects update, they should be shown a view with the unencrypted credentials. When they select save, the list should be updated with the edited credential details.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful credential deletion, the user should be shown a success message and the deleted credential should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Perform data validation and sanitization</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The application should not allow duplicate usernames or duplicate filenames attributed to a single user.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Secure the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A user can’t access the home page or the three tabs on that page without logging in first. The login and signup page should be visible to all the users without any authentication.</p>\n<p class=""chakra-text css-o3oz8b"">If someone isn\'t logged in, they must be redirected to the login page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A user can access only their own data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A logged-in user should only be able to view their own data, and not anyone else\'s data. The data should only be viewable to the specific user who owns it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The credentials are kept encrypted in the database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the passwords should be stored as encrypted in the database and shown as encrypted when the user retrieves them.</p>\n<p class=""chakra-text css-o3oz8b"">The user should only see the decrypted version when they want to edit it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement an ORM model that maps to the database using MyBatis</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create Java classes to model the tables in the database (specified in <code class=""chakra-code css-1u83yg1"">src/main/resources/schema.sql</code>) and create <code class=""chakra-code css-1u83yg1"">@Mapper</code> annotated interfaces to serve as Spring components in your application.</p>\n<p class=""chakra-text css-o3oz8b"">You should have one model class and one mapper class per database table.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test signup and login flow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that verifies that the home page is not accessible without logging in.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that signs up a new user, logs that user in, verifies that they can access the home page, then logs out and verifies that the home page is no longer accessible.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test adding, editing, and deleting notes</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user, creates a note and verifies that the note details are visible in the note list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing notes, clicks the edit note button on an existing note, changes the note data, saves the changes, and verifies that the changes appear in the note list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing notes, clicks the delete note button on an existing note, and verifies that the note no longer appears in the note list.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test adding, editing and deleting credentials</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user, creates a credential and verifies that the credential details are visible in the credential list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing credentials, clicks the edit credential button on an existing credential, changes the credential data, saves the changes, and verifies that the changes appear in the credential list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing credentials, clicks the delete credential button on an existing credential, and verifies that the credential no longer appears in the credential list.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">If a user knows the file, note, or credential ID of another user, make sure they can’t make a direct request through the browser to view, edit, or delete that file, note, or credential.</li><li class=""css-cvpopp"">Use test-driven-development.\nWrite your selenium tests before implementing the functionality they’re testing, and watch you tests go from red to green as you finish features!\nUse page objects to abstract selenium element selection and actions.\nTest file upload and download with selenium. This will require some extra research!\nTest everything! Verify all the requirements above with selenium tests, down to expected successes and failures in specific</li><li class=""css-cvpopp"">Make it your own! You can replace the bootstrap CSS and JS  libraries with a design framework of your choosing, and redesign the HTML templates to customize and redesign the website. Note: this could take a long time!</li></ol></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,SuperDuperDrive,7.5  Submit Project,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Utilize Thymeleaf standard dialects in the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are Thymeleaf attributes in the HTMl files like <strong>th:action</strong>, etc.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Utilize Spring Boot annotations and their functions</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are Spring Boot annotations like <code class=""chakra-code css-1u83yg1"">@Controller</code>, <code class=""chakra-code css-1u83yg1"">@RestController</code>, <code class=""chakra-code css-1u83yg1"">@RequestBody</code>, <code class=""chakra-code css-1u83yg1"">@RequestParams</code>, etc. in the Java classes.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write an application that will fail gracefully</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If invalid or improper inputs are given to the system, it should not crash or display raw error information. Error messages should be shown or users should be disallowed from sending invalid or improper input. Make sure your implementation passes the <code class=""chakra-code css-1u83yg1"">testBadUrl()</code> and <code class=""chakra-code css-1u83yg1"">testLargeUpload()</code> test cases provided by Udacity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Integrate MyBatis into the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are annotations like <code class=""chakra-code css-1u83yg1"">@Mapper</code>, <code class=""chakra-code css-1u83yg1"">@Select</code>, <code class=""chakra-code css-1u83yg1"">@Insert</code>, <code class=""chakra-code css-1u83yg1"">@Update</code>, and <code class=""chakra-code css-1u83yg1"">@Delete</code> in the Java classes and/or imports from MyBatis/iBatis API.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Develop a login page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">✅ Added the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The login page already has the username and password fields.</p>\n<p class=""chakra-text css-o3oz8b"">Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a user signup workflow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On a successful signup, the user should be taken to the login page with a message indicating their registration was successful. Otherwise, an error message should be shown on the sign-up page. An error message is already present in the template, but should only be visible if an error occurred during signup. Make sure your implementation passes the <code class=""chakra-code css-1u83yg1"">testRedirection()</code> test case provided by Udacity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Develop a signup page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">✅ Added the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The signup page already has input fields for all the data you need from the user, including username and password fields.</p>\n<p class=""chakra-text css-o3oz8b"">Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a user login/logout workflow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On a successful login, the user should be taken to their home page.</p>\n<p class=""chakra-text css-o3oz8b"">An error message is already present in the template, but should only be visible if an error occurred during signup.</p>\n<p class=""chakra-text css-o3oz8b"">On logout, the user should no longer have access to the home page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a home page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The user is able to:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">✅ Upload new files on this tab and download/remove existing files</li><li class=""css-cvpopp"">✅ Add new notes and edit/remove existing ones</li><li class=""css-cvpopp"">✅ Add new credentials, view existing credentials unencrypted and remove them as well.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The home page should have three tabs:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">The user should be able to upload new files on this tab and download/remove existing files</li><li class=""css-cvpopp"">The user should be able to add new notes and edit/remove existing ones</li><li class=""css-cvpopp"">The user should be able to add new credentials, view existing credentials unencrypted and remove them as well</li></ol>\n<p class=""chakra-text css-o3oz8b"">The home template already has the forms required by this functionality. Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission</p>\n<p class=""chakra-text css-o3oz8b"">Details on individual features are documented in Section 3.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement secure credential storage</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the credential functionalities are working as expected:-</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Creation ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Deletion ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Edit/Update ✅</h4>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Creation: On successful credential creation, the user should be shown a success message and the created credential should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Edit/Update: When a user selects update, they should be shown a view with the unencrypted credentials. When they select save, the list should be updated with the edited credential details.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful credential deletion, the user should be shown a success message and the deleted credential should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement persistent storage for users\' important data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When a user logs in, they should see the data they have added to the application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement note storage, edit, and removal</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the note functionalities are working as expected:-</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Creation ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Deletion ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Edit/Update ✅</h4>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Creation: On successful note creation, the user should be shown a success message and the created note should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful note deletion, the user should be shown a success message and the deleted note should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Edit/Update: When a user selects edit, they should be shown a view with the note\'s current title and text. On successful note update, the user should be shown a success message and the updated note should appear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement file storage, download, and removal</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the file functionalities are working as expected:-</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">UPLOAD ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Delete ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">download ✅</h4>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Upload: On successful file upload, the user should be shown a success message and the uploaded file should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful file deletion, the user should be shown a success message and the deleted file should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Download: On successful file download, the file should download to the user\'s system.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The credentials are kept encrypted in the database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">✅ All the passwords should be stored as encrypted in the database and shown as encrypted when the user retrieves them.</li><li class=""css-cvpopp"">✅ The user should only see the decrypted version when they want to edit it.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the passwords should be stored as encrypted in the database and shown as encrypted when the user retrieves them.</p>\n<p class=""chakra-text css-o3oz8b"">The user should only see the decrypted version when they want to edit it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement an ORM model that maps to the database using MyBatis</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">✅ You should have one model class and one mapper class per database table.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create Java classes to model the tables in the database (specified in <code class=""chakra-code css-1u83yg1"">src/main/resources/schema.sql</code>) and create <code class=""chakra-code css-1u83yg1"">@Mapper</code> annotated interfaces to serve as Spring components in your application.</p>\n<p class=""chakra-text css-o3oz8b"">You should have one model class and one mapper class per database table.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Secure the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A user can’t access the home page or the three tabs on that page without logging in first. The login and signup page should be visible to all the users without any authentication.</p>\n<p class=""chakra-text css-o3oz8b"">If someone isn\'t logged in, they must be redirected to the login page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A user can access only their own data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">✅ A logged-in user should only be able to view their own data, and not anyone else\'s data.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A logged-in user should only be able to view their own data, and not anyone else\'s data. The data should only be viewable to the specific user who owns it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Perform data validation and sanitization</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The application should not allow duplicate usernames or duplicate filenames attributed to a single user.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test signup and login flow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">✅ Write a Selenium test that verifies that the home page is not accessible without logging in.</li><li class=""css-cvpopp"">✅ Write a Selenium test that signs up a new user, logs that user in, verifies that they can access the home page, then logs out and verifies that the home page is no longer accessible.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that verifies that the home page is not accessible without logging in.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that signs up a new user, logs that user in, verifies that they can access the home page, then logs out and verifies that the home page is no longer accessible.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test adding, editing, and deleting notes</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user, creates a note and verifies that the note details are visible in the note list.</li><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user with existing notes, clicks the edit note button on an existing note, changes the note data, saves the changes, and verifies that the changes appear in the note list.</li><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user with existing notes, clicks the delete note button on an existing note, and verifies that the note no longer appears in the note list.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user, creates a note and verifies that the note details are visible in the note list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing notes, clicks the edit note button on an existing note, changes the note data, saves the changes, and verifies that the changes appear in the note list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing notes, clicks the delete note button on an existing note, and verifies that the note no longer appears in the note list.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test adding, editing and deleting credentials</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user, creates a credential and verifies that the credential details are visible in the credential list.</li><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user with existing credentials, clicks the edit credential button on an existing credential, changes the credential data, saves the changes, and verifies that the changes appear in the credential list.</li><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user with existing credentials, clicks the delete credential button on an existing credential, and verifies that the credential no longer appears in the credential list.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user, creates a credential and verifies that the credential details are visible in the credential list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing credentials, clicks the edit credential button on an existing credential, changes the credential data, saves the changes, and verifies that the changes appear in the credential list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing credentials, clicks the delete credential button on an existing credential, and verifies that the credential no longer appears in the credential list.</p></div>']",['https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/356954/1717915067/Screenshot_2024-06-09_at_12.06.39_PM.png'],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 1: Overview,1.1  Instructor Introduction,[],[],https://www.youtube.com/embed/NWTxxfy_uN8
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 1: Overview,1.2  Course Intro,[],[],https://www.youtube.com/embed/9sNj7tGyiSQ
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 1: Overview,1.3  Web Services & APIs Overview,[],[],https://www.youtube.com/embed/oAQJbdT1uaY
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 1: Overview,1.4  Web Services,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The means of communication between the client and server is via a standard web protocol like HTTP (or HTTPS) on the world wide web, that uses a common language like JSON or XML.</p>\n<p class=""chakra-text css-o3oz8b"">A client invokes a web service by sending an XML (or JSON) message, then waits for a corresponding XML response from the server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Along with the Uber example in the video, what are some other examples you can think of where client applications are used?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">How Web Services Work</p>\n<p class=""chakra-text css-o3oz8b"">Step 1: The web service provider (the person who created the web service) defines a standard format for requests and also for the responses provided.</p>\n<p class=""chakra-text css-o3oz8b"">Step 2: The client sends a request to the web service across the network.</p>\n<p class=""chakra-text css-o3oz8b"">Step 3: The web service receives the request and performs an action (like query a database or perform a calculation) and sends a response back to the calling client.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match the concept to the definition.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Client</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The system requesting information</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Service Provider</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The organization or person that created the web service</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The system providing the information</p></div>']",[],https://www.youtube.com/embed/1EELvkp3UX0
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 1: Overview,1.5  Benefits of Web Services,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select TWO benefits of web services.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Reusability</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Readability</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Usability</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Shareability</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Callability</p></div>']",[],https://www.youtube.com/embed/XXv_D0aBjrU
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 1: Overview,1.6  Web Services vs APIs vs Microservices,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Publicly Accessible API</p>\n<p class=""chakra-text css-o3oz8b"">A list of publicly accessible APIs: <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/public-apis/public-apis/blob/master/README.md"">https://github.com/public-apis/public-apis/blob/master/README.md<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/70g1Fn2AZpg
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 1: Overview,1.7  Web Service Demo,[],[],https://www.youtube.com/embed/uKfGF76arek
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 1: Overview,1.8  Spring Initializr,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Initializr will help you easily use Spring Boot</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We will use <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects/spring-boot"">Spring Boot<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> throughout this course to more easily deploy web services and APIs with Java.</p>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://start.spring.io/"">Spring Initializr<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> is a tool that quickly generates the base code needed for a <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects/spring-boot"">Spring Boot<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> project including dependencies. The tool can be accessed from a web browser or from within your Integrated Development Environment (IDE). For example, IntelliJ provides Spring Initializr instructions <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/help/idea/spring-boot.html#get-started-spring-boot"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. If you haven\'t already, you should check this tool out before we get deeper into the course.</p></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 1: Overview,1.9  Lab: Test an API,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Labs will help drive your success in the course!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I completed the ""Test an API"" lab.</p></div>']",['https://video.udacity-data.com/topher/2018/August/5b87e084_5-3-test-a-perceptual-phenomenon2x/5-3-test-a-perceptual-phenomenon2x.jpg'],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 1: Overview,1.10  Recap,[],[],https://www.youtube.com/embed/esqHIYPSbA0
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.1  Introduction,[],[],https://www.youtube.com/embed/kzV3_EJM5TQ
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.2  Architecture Style,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">REST stands for <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer. It’s a set of guidelines application developers use to design APIs.</p>\n<p class=""chakra-text css-o3oz8b"">There are four principles that APIs follow:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Data and functionality in the API are considered “resources” and identified through something called the URI, or Uniform Resource Identifier. These are accessed by web links.</li><li class=""css-cvpopp"">Resources are manipulated using a fixed set of operations.  GET retrieves a resource. POST creates one. Use PUT to update the resource, and of course, DELETE will remove it. </li><li class=""css-cvpopp"">Resources can be represented in multiple formats, such as HTML, XML, plain text, and other formats defined by a media type. \n</li><li class=""css-cvpopp"">Communication between the client and server (i.e. endpoint) is stateless. This means the server will not remember or store any state about the client that made the call.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify TWO principles that REST APIs must follow.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Resources are manipulated through a fixed set of operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Resources must be represented in a single format, like XML.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Communication between the client and server must be cached for efficiency.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Resources are identified through a URI and are accessible via web links.</p></div>']",[],https://www.youtube.com/embed/672a5lB093o
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.3  Case Study: Intro & Maven Dependencies,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study is a REST API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson2-restapis"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">spring-boot-starter-web - This starter pack is used for web application development and automatically adds libraries like Spring MVC, REST, Tomcat, and Jackson.</li><li class=""css-cvpopp"">com.h2database - This starter pack is used for the H2 in-memory database. </li><li class=""css-cvpopp"">spring-boot-starter-data-jpa - This starter pack includes JDBC, Hibernate, Transactions API, JPA, and Aspects.</li></ul></div>']",[],https://www.youtube.com/embed/Br5M86T4zek
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.4  Lab I: Build a Dog REST API (Set Up),[],[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.5  Lab I: Solution,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select the correct dependencies for the project</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2</strong>: Set-up the H2 in-memory database.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Enable the console, add a path for the console, and create a url for the datasource using H2.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Within <code class=""chakra-code css-1u83yg1"">application.properties</code> (found within <code class=""chakra-code css-1u83yg1"">/src/main/resources/</code>), you could add the following code:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-pseudo"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring.h2.console.enabled=true\n</span>spring.h2.console.path=/h2\n\nspring.datasource.url=jdbc:h2:mem:dogdata</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Note that <code class=""chakra-code css-1u83yg1"">dogdata</code> is just what I chose as the name - yours does not need to match this.</p></div>']",['https://video.udacity-data.com/topher/2019/July/5d40cc80_java-dog-rest-spring/java-dog-rest-spring.png'],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.6  Case Study: Annotations,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study is a REST API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson2-restapis"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-16e39h9""><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57"">Annotation</th><th class=""css-zl9m57"">Description</th></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">@Entity</td><td class=""css-1eywhk4"">This marks a Java class as an entity, which means it will be persisted to the database.  Typically, an entity maps to a database table and the table contains rows that represent that given entity.</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">@RestController</td><td class=""css-1eywhk4"">This marks a class as a REST API. @RestController is a convenience annotation that combines @Controller and @ResponseBody.</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">@GetMapping</td><td class=""css-1eywhk4"">This annotation handles HTTP GET requests and acts as a shortcut for @RequestMapping (method = RequestMethod.GET).</td></tr></tbody></table></div></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which annotation simplifies creating RESTful web services?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">@Controller</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">@API</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">@RestController</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">@WebService</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which is the MOST common term for an object that lives in a database that has the ability to be mapped to a database?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Domain</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Entity</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Row</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Model</p></div>']",[],https://www.youtube.com/embed/kW6jWuxtCfE
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.7  Lab II: Build a Dog REST API (Annotations I),[],[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.8  Lab II: Solution,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 1</strong>: Create an entity called Dog.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The dog should have three attributes:\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Name</li><li class=""css-cvpopp"">Breed</li><li class=""css-cvpopp"">Origin</li></ul>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">First, create a new package in the same directory that holds your main application, called <code class=""chakra-code css-1u83yg1"">entity</code>. Then, create a new Java class called <code class=""chakra-code css-1u83yg1"">Dog</code>.</p>\n<p class=""chakra-text css-o3oz8b"">The below code could be used to implement such an entity with the required attributes. Note that you should also include constructors for the class, as well as accessors and mutators for the three attributes. <strong>Important</strong>: The package name may differ depending on what you used during the set up of your project - make sure to adjust it to apply to your own project structure!</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>entity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">javax</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">persistence</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Entity</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Id</span><span>\n</span><span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@GeneratedValue</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>strategy </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">GenerationType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>AUTO</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>id </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>name </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>breed </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>origin </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>name </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>breed </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>id </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>name </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>breed </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getOrigin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setOrigin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>origin </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2</strong>: Create a web controller using <code class=""chakra-code css-1u83yg1"">@RestController</code>.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">You just need to create the structure of the controller for now. You\'ll add more to it once we discuss services next.</li></ul>\n<p class=""chakra-text css-o3oz8b"">First, create a new package in the same directory that holds your main application, called <code class=""chakra-code css-1u83yg1"">web</code>. Then, create a new Java class called <code class=""chakra-code css-1u83yg1"">DogController</code>.</p>\n<p class=""chakra-text css-o3oz8b"">The below code contains the first steps for this controller, which we will complete in the final lab of this lesson after implementing the related <code class=""chakra-code css-1u83yg1"">DogService</code>.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>web</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">web</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">bind</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">RestController</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Note - we will eventually also import additional packages later on</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@RestController</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogController</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.9  Case Study Continued,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study is a REST API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson2-restapis"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">The REST API has the following components:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Controller </strong>- LocationController.java</li><li class=""css-cvpopp""><strong>Service </strong>- LocationService.java and LocationServiceImpl.java</li><li class=""css-cvpopp""><strong>CRUD Repository </strong>- LocationRepository.java</li><li class=""css-cvpopp""><strong>Domain Entity/Model </strong>- Location.java</li><li class=""css-cvpopp""><strong>H2 Database </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/h2/"">http://localhost:8080/h2/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><strong>Tomcat Server </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080"">http://localhost:8080<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],https://www.youtube.com/embed/7h28NrYZ1RU
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.10  Lab III: Build a Dog REST API (Annotations II),"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I completed the ""Build a Dog REST API"" lab.</p></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.11  Lab III: Solution,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 1</strong>: Create a repository that extends CrudRepository.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">This repository is for creating, reading, updating, and deleting Dog objects.</li></ul>\n<p class=""chakra-text css-o3oz8b"">First, create a new package in the same directory that holds your main application, called <code class=""chakra-code css-1u83yg1"">repository</code>. Then, create a new Java <strong>interface</strong> called <code class=""chakra-code css-1u83yg1"">DogRepository</code> (note that you can create a new <code class=""chakra-code css-1u83yg1"">interface</code> in IntelliJ first by adding a new Java class, and then selecting <code class=""chakra-code css-1u83yg1"">interface</code> on the menu that comes up).</p>\n<p class=""chakra-text css-o3oz8b"">Here, you\'ll need to import both your <code class=""chakra-code css-1u83yg1"">Dog</code> entity as well as <code class=""chakra-code css-1u83yg1"">CrudRepository</code> from the Spring framework, which will extend your <code class=""chakra-code css-1u83yg1"">DogRepository</code> interface. While Spring implements a lot of the <code class=""chakra-code css-1u83yg1"">repository</code> for you, I have added a few helpful queries to be able to obtain some of the necessary information for our <code class=""chakra-code css-1u83yg1"">DogService</code> later. When I use an <code class=""chakra-code css-1u83yg1"">id</code> as input to <code class=""chakra-code css-1u83yg1"">findBreedById</code>, I needed to add a <code class=""chakra-code css-1u83yg1"">:</code> into the query line to feed in from my method.</p>\n<p class=""chakra-text css-o3oz8b"">Note that instead of taking this approach, you could alternatively use the built-in queries from <code class=""chakra-code css-1u83yg1"">CrudRepository</code> within the <code class=""chakra-code css-1u83yg1"">DogService</code> to get all dogs or get a dog by ID, then process the resulting object as well.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>repository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>entity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">data</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">jpa</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">repository</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Query</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">data</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">repository</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">CrudRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">interface</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRepository</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">extends</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">CrudRepository</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token generics""> </span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Query</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""select d.id, d.breed from Dog d where d.id=:id""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findBreedById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Query</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""select d.id, d.breed from Dog d""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findAllBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Query</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""select d.id, d.name from Dog d""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findAllName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2</strong>: Create a dog service.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The service should perform the following operations:\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">retrieveDogBreed</li><li class=""css-cvpopp"">retrieveDogBreedById</li><li class=""css-cvpopp"">retrieveDogNames</li></ul>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">First, create a new package in the same directory that holds your main application, called <code class=""chakra-code css-1u83yg1"">service</code>. Then, we\'ll create two files - one for an <code class=""chakra-code css-1u83yg1"">interface</code> called <code class=""chakra-code css-1u83yg1"">DogService</code>, and the other a <code class=""chakra-code css-1u83yg1"">class</code> called <code class=""chakra-code css-1u83yg1"">DogServiceImpl</code> that will actually <code class=""chakra-code css-1u83yg1"">implement</code> the <code class=""chakra-code css-1u83yg1"">DogService</code>. Splitting them like this is not necessarily required, but is good practice.</p>\n<p class=""chakra-text css-o3oz8b"">First, let\'s look at <code class=""chakra-code css-1u83yg1"">DogService</code>, which can pretty simply add the method names noted for this step. Note that I also added a <code class=""chakra-code css-1u83yg1"">retrieveDogs</code> method that can get all of the dogs\' information, but that\'s not required.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>service</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>entity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">interface</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogBreedById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogNames</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Now, we can look at the implementation of the <code class=""chakra-code css-1u83yg1"">DogService</code> within <code class=""chakra-code css-1u83yg1"">DogServiceImpl</code>. Note that while the <code class=""chakra-code css-1u83yg1"">repository</code> already has <code class=""chakra-code css-1u83yg1"">findAll()</code> (and <code class=""chakra-code css-1u83yg1"">findById(id)</code>, not used here) implemented, the other methods used here were implemented above within the <code class=""chakra-code css-1u83yg1"">DogRepository</code>, or else they would not work. You\'ll want to use the <code class=""chakra-code css-1u83yg1"">@Service</code> and <code class=""chakra-code css-1u83yg1"">@AutoWired</code> annotations here as well.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>service</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>entity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>repository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>DogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">beans</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">factory</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Autowired</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">stereotype</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Service</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogServiceImpl</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">implements</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Autowired</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRepository</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findAllBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogBreedById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findBreedById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogNames</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findAllName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 3</strong>: Update the web controller.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The updated controller should handle requests for retrieving:\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">a list of Dog breeds</li><li class=""css-cvpopp"">a list of Dog breeds by Id</li><li class=""css-cvpopp"">a list of Dog names</li></ul>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">Below, I have updated the <code class=""chakra-code css-1u83yg1"">DogController</code> to now use functions from the <code class=""chakra-code css-1u83yg1"">DogService</code>, along with <code class=""chakra-code css-1u83yg1"">@GetMapping</code>, to configure the different paths where a user could <code class=""chakra-code css-1u83yg1"">GET</code> information from the Dog API. Note the use of <code class=""chakra-code css-1u83yg1"">ResponseEntity</code> and <code class=""chakra-code css-1u83yg1"">HttpStatus</code> to help formulate the API response. The paths <strong>do not</strong> need to match what I used - theoretically, if you wanted to return the information about your dogs from a path <code class=""chakra-code css-1u83yg1"">/cats</code> you could, although that would clearly be confusing to the end user. I also added the extra mapping just for getting all dogs (<code class=""chakra-code css-1u83yg1"">/dogs</code>), although it wasn\'t specified in the lab.</p>\n<p class=""chakra-text css-o3oz8b"">While I use <code class=""chakra-code css-1u83yg1"">@PathVariable</code> along with the dog ID below, note that you could also use <code class=""chakra-code css-1u83yg1"">@RequestParam</code> with a few minor changes to achieve the same result (see more <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://javarevisited.blogspot.com/2017/10/differences-between-requestparam-and-pathvariable-annotations-spring-mvc.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>).</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>web</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Don\'t forget the new imports!</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>entity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>service</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>DogService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">beans</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">factory</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Autowired</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">http</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpStatus</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">http</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ResponseEntity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">web</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">bind</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">GetMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">web</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">bind</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">PathVariable</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">web</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">bind</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">RestController</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@RestController</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogController</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogService</span><span> dogService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Autowired</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setDogService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogService</span><span> dogService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>dogService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> dogService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@GetMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/dogs""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ResponseEntity</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getAllDogs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> list </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> dogService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ResponseEntity</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>list</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpStatus</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>OK</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@GetMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/dogs/breed""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ResponseEntity</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getDogBreeds</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> list </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> dogService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ResponseEntity</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>list</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpStatus</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>OK</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@GetMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/{id}/breed""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ResponseEntity</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getBreedByID</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@PathVariable</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> breed </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> dogService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogBreedById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ResponseEntity</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpStatus</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>OK</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@GetMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/dogs/name""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ResponseEntity</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getDogNames</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> list </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> dogService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogNames</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ResponseEntity</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>list</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpStatus</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>OK</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 4</strong>: Make sure errors are handled appropriately.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">If an id is requested that doesn’t exist, appropriately handle the error</li></ul>\n<p class=""chakra-text css-o3oz8b"">Here, you\'ll want to first add a new Java class to the <code class=""chakra-code css-1u83yg1"">service</code> package, called <code class=""chakra-code css-1u83yg1"">DogNotFoundException</code>. We\'ll use <code class=""chakra-code css-1u83yg1"">@ResponseStatus</code> along with an <code class=""chakra-code css-1u83yg1"">HttpStatus</code> of <code class=""chakra-code css-1u83yg1"">NOT_FOUND</code> to return a message (or <code class=""chakra-code css-1u83yg1"">reason</code> in code) if an invalid ID was used.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>service</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">http</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpStatus</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">web</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">bind</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ResponseStatus</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@ResponseStatus</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>code </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpStatus</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>NOT_FOUND</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> reason </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Dog not found""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogNotFoundException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">extends</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">RuntimeException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> message</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">super</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>message</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">That\'s part one  - we haven\'t actually handled the error yet. To do so, you\'ll want to go back to <code class=""chakra-code css-1u83yg1"">DogServiceImpl</code>, and specifically to the <code class=""chakra-code css-1u83yg1"">retrieveDogBreedById</code> method (or your similarly named method) for retrieving a Dog breed by Id.</p>\n<p class=""chakra-text css-o3oz8b"">You\'ll want to make sure to import <code class=""chakra-code css-1u83yg1"">Optional</code>, as we\'ll use that to try to get the resulting <code class=""chakra-code css-1u83yg1"">Dog</code> object. If the <code class=""chakra-code css-1u83yg1"">Dog</code> does not exist, you\'ll throw the <code class=""chakra-code css-1u83yg1"">DogNotFoundException</code>.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Make sure to add this import</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Optional</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">retrieveDogBreedById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Optional</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> optionalBreed </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Optional</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ofNullable</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findBreedById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> breed </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> optionalBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">orElseThrow</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">::</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 5</strong>: Create a <code class=""chakra-code css-1u83yg1"">data.sql</code> file.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The file should create sample dog data in the database.</li></ul>\n<p class=""chakra-text css-o3oz8b"">This last step is very open-ended, as you can add whatever dog details you want. Below, I\'ve added five example dogs into my own <code class=""chakra-code css-1u83yg1"">data.sql</code> file. This file should be within the <code class=""chakra-code css-1u83yg1"">resources</code> directory (where your <code class=""chakra-code css-1u83yg1"">application.properties</code> file was earlier).</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-sql"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">INSERT</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">INTO</span><span> dog </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">VALUES</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Fluffy\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Pomeranian\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Mountain View, CA\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">INSERT</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">INTO</span><span> dog </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">VALUES</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Spot\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Pit Bull\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Austin, TX\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">INSERT</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">INTO</span><span> dog </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">VALUES</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Ginger\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Cocker Spaniel\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Kansas City, KS\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">INSERT</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">INTO</span><span> dog </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">VALUES</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">4</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Lady\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Direwolf\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'The North\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">INSERT</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">INTO</span><span> dog </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> origin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">VALUES</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Sasha\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Husky\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">\'Buffalo, NY\'</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 6</strong>: Check that you are able to access your API.</h3>\n<p class=""chakra-text css-o3oz8b"">If everything is implemented correctly, once you run your code, you should be able to visit <a class=""chakra-link css-190botj"" href=""javascript:void(0)"">localhost:8080/h2<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> to first reach the H2 console. Here, I added my my <code class=""chakra-code css-1u83yg1"">spring.datasource.url</code> from <code class=""chakra-code css-1u83yg1"">application.properties</code>:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The H2 console</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">After clicking ""Connect"", you should go to the next H2 page, where you should be able to ""Run"" the query and see everything you added to <code class=""chakra-code css-1u83yg1"">data.sql</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The H2 ""Run"" query showing the dogs added to <code class=""chakra-code css-1u83yg1"">data.sql</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">From there, I check that I can access the paths I added to my <code class=""chakra-code css-1u83yg1"">DogController</code> at localhost:8080/{path}. Below is the example for my additional <code class=""chakra-code css-1u83yg1"">/dogs</code> path I added.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">My result from localhost:8080/dogs</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You should check the two methods returning just breed and name as well for all of the dogs, but most important is likely the response for the breed of a single dog, since it makes use of an ID and error handling.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use of a valid ID</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An invalid ID example - note it was <code class=""chakra-code css-1u83yg1"">Not Found</code> with reason <code class=""chakra-code css-1u83yg1"">Dog not found</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In the above, you can see the potential results of a valid ID being used in the <code class=""chakra-code css-1u83yg1"">GET</code> request, as well as the error when an invalid ID was used. Note that you can further customize this error page (I didn\'t add an explicit mapping for <code class=""chakra-code css-1u83yg1"">/error</code> as noted in the image), but you can see that the error reason was appropriately returned at the bottom.</p>\n<h3 class=""chakra-heading css-k57syw"">Full Solution</h3>\n<p class=""chakra-text css-o3oz8b"">If you\'d like the full solution code all in one place, you can download it through the link below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h5 class=""chakra-heading css-bsa8mb"">Supporting Materials</h5>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2019/July/5d41e2fa_dogrestapi/dogrestapi.zip"">DogRestApiSolution<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']","['https://video.udacity-data.com/topher/2019/July/5d41d8bf_h2-console/h2-console.png', 'https://video.udacity-data.com/topher/2019/July/5d41d901_h2-query/h2-query.png', 'https://video.udacity-data.com/topher/2019/July/5d41d970_dogs-path/dogs-path.png', 'https://video.udacity-data.com/topher/2019/July/5d41e010_breed-success/breed-success.png', 'https://video.udacity-data.com/topher/2019/July/5d41e029_breed-error/breed-error.png']",
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 2: REST APIs,2.12  Recap,[],[],https://www.youtube.com/embed/D0HbGi4bgmg
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.1  Introduction,[],[],https://www.youtube.com/embed/gQnVdnCWBeU
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.2  Overview,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://graphql.org/"">GraphQL<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> is a query language for APIs or a syntax that describes how to ask for data and is generally used to load data from a server to a client. GraphQL offers maximum efficiency and flexibility because it allows the calling client to specify exactly what data it needs.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To include GraphQL in your project, a couple of dependencies are needed:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<strong>graphql-spring-boot-starter </strong> - This starter is very helpful because it will add and automatically configure a GraphQL Servlet that you can access at /graphql . This starter will also use a GraphQL schema library to parse all schema files found on the classpath. The starter will also set up an endpoint that can access POST requests.\n</li><li class=""css-cvpopp"">\n<strong>graphql-java-tools</strong> - A helper library to parse the GraphQL schema.\n</li></ul></div>']",[],https://www.youtube.com/embed/HTTnP0Kgcrg
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.3  Schemas,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The GraphQL schema defines the data points offered via an API. The schema contains the data types and relationships between them and the set of operations available, things like queries for retrieving data and mutations for creating, updating, and deleting data.</p>\n<p class=""chakra-text css-o3oz8b"">The schema from the Case Study is shown below.</p>\n<pre class=""css-0"">type Location {\n id: ID!\n name: String!\n address: String!\n}\n\ntype Query {\n findAllLocations: [Location]!\n}\n\ntype Mutation {\n newLocation(name: String!, address: String) : Location!\n deleteLocation(id:ID!) : Boolean\n updateLocationName(newName: String!, id:ID!) : Location!\n}\n</pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There can be multiple root Query and Mutation types in a single schema.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">False</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">True</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What is the file extension for a GraphQL schema file?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">.graphs</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">.graphql</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">.graphqls</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">.graphical</p></div>']",[],https://www.youtube.com/embed/C-TtBoSBOMM
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.4  Operations,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">GraphQL offers operations on data like queries and mutations.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Queries</h4>\nA query allows for the retrieving of data. Each query will have a specific object that it returns and based on the object returned, you can add or remove fields to match the exact data you need to fit your specific use case.\n<h4 class=""chakra-heading css-1dlhxqh"">Mutations</h4>\nGraphQL has the ability to update the data stored on the server, by means of mutations. Mutations, such as, create, update, or delete will change the data, unlike a query.</div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify THREE operations that mutate data.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Deleting</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Creating</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Reading</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Updating</p></div>']",[],https://www.youtube.com/embed/iAQOimeLzfg
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.5  GraphiQL,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A tool called GraphiQL is a simple web app that is able to communicate with any GraphQL Server and execute queries and mutations against it. We\'ll go much more in-depth on how to use GraphiQL in the Case Study later in this lesson.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify TWO ways to test a GraphQL API.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Postman</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">GraphiQL</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Servlet</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">SoapUI</p></div>']",[],https://www.youtube.com/embed/BsPwClpJl9U
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.6  Case Study: Steps,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">The REST API has the following components:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Controller </strong>- LocationController.java</li><li class=""css-cvpopp""><strong>Service </strong>- LocationService.java and LocationServiceImpl.java</li><li class=""css-cvpopp""><strong>CRUD Repository </strong>- LocationRepository.java</li><li class=""css-cvpopp""><strong>Domain Entity/Model </strong>- Location.java</li><li class=""css-cvpopp""><strong>Schema </strong>- location.graphqls and via the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/graphql/schema.json"">GraphiQL console<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/graphql/schema.json"">http://localhost:8080/graphql/schema.json<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp""><strong>Mutator </strong>- Mutation.java</li><li class=""css-cvpopp""><strong>Query </strong>- Query.java</li><li class=""css-cvpopp""><strong>H2 Database </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/h2/"">http://localhost:8080/h2/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><strong>Tomcat Server </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080"">http://localhost:8080<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><strong>GraphiQL console </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/graphiql"">http://localhost:8080/graphiql<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul>\n<h5 class=""chakra-heading css-bsa8mb"">Sample Queries/Mutations</h5>\n<pre class=""css-0"">{\n  findAllApplications {\n    id\n    owner\n    address\n  }\n}\n</pre>\n<pre class=""css-0"">mutation {\n  newLocation(\n    name: ""MBJ Airport"",\n    address: ""Montego Bay, Jamaica airport location"") {\n      id \n      name\n      address\n    }\n}\n</pre>\n<pre class=""css-0"">mutation {\n  deleteLocation(id:1)\n}\n</pre></div>']",[],https://www.youtube.com/embed/5oJZRnbJpe8
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.7  Case Study: Bootstrap & Configure,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/UOWLDm2FjdA
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.8  Lab I: Build a Dog GraphQL API (Set Up),[],[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.9  Lab I: Solution,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 1:</strong> Use <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://start.spring.io/"">Spring Initializr<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> to bootstrap a simple project.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Add the H2 Database, Spring Web Starter, and the Spring Data JPA dependencies before generating the project.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select the correct dependencies for the project</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2:</strong> Add the necessary GraphQL dependencies.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">You will need to manually enter these in your Maven POM file.</li><li class=""css-cvpopp"">Set up the necessary H2 and GraphQL properties to <code class=""chakra-code css-1u83yg1"">application.properties</code> at this time as well.</li></ul>\n<p class=""chakra-text css-o3oz8b"">First, add the following dependencies in the <code class=""chakra-code css-1u83yg1"">pom.xml</code> file:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>com.graphql-java</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>graphql-spring-boot-starter</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>5.0.2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span>\n<span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>com.graphql-java</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>graphql-java-tools</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>5.2.4</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span>\n<span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>com.graphql-java</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>graphiql-spring-boot-starter</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>5.0.2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Then, head over to your <code class=""chakra-code css-1u83yg1"">application.properties</code> and add the following:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>h2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>console</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>enabled</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span>\n</span><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>h2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>console</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>path</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>h2\n</span><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>datasource</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>url</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>jdbc</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span>h2</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span>mem</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span>dogdata\n</span>\n<span>graphql</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>servlet</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>mapping</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>graphql\n</span><span>graphql</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>servlet</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>enabled</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span>\n</span><span>graphql</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>servlet</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>corsEnabled</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span>\n</span>\n<span>graphiql</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>enabled</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span>\n</span><span>graphiql</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>endpoint</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>graphql\n</span><span>graphiql</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>mapping</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>graphiql</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Note that you don\'t necessarily have to use the exact same <code class=""chakra-code css-1u83yg1"">spring.datasource.url</code>, <code class=""chakra-code css-1u83yg1"">graphql.servlet.mapping</code>, <code class=""chakra-code css-1u83yg1"">graphiql.endpoint</code>, or <code class=""chakra-code css-1u83yg1"">graphiql.mapping</code>, but that will affect where you go down the road. However, <code class=""chakra-code css-1u83yg1"">graphql.servlet.mapping</code> and <code class=""chakra-code css-1u83yg1"">graphiql.endpoint</code> do need to match, as that is how GraphQL and GraphiQL will interact.</p></div>']",['https://video.udacity-data.com/topher/2019/August/5d431f96_java-dog-graphql-spring/java-dog-graphql-spring.png'],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.10  Case Study: Schema Creation,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/1lySj-AOyVg
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.11  Lab II: Build a Dog GraphQL API (Schema),[],[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.12  Lab II: Solution,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 1</strong>: Create an entity called Dog.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The dog should have three attributes:\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Name</li><li class=""css-cvpopp"">Breed</li><li class=""css-cvpopp"">Origin</li></ul>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">You can re-use your code from the REST API for the <code class=""chakra-code css-1u83yg1"">Dog</code> entity, just make sure to update the package name accordingly!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2</strong>: Create a GraphQL schema.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The schema should match the fields found in the Dog entity.</li><li class=""css-cvpopp"">Add the following query operations:\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">findDogBreeds</li><li class=""css-cvpopp"">findDogBreedById</li><li class=""css-cvpopp"">findAllDogNames</li></ul>\n</li><li class=""css-cvpopp"">Add the following mutators:\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">deleteDogBreed</li><li class=""css-cvpopp"">updateDogName</li></ul>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">Following the video, create a <code class=""chakra-code css-1u83yg1"">graphql</code> package within the <code class=""chakra-code css-1u83yg1"">resources</code> directory of the project. Within that package, add a <code class=""chakra-code css-1u83yg1"">dog.graphqls</code> file (you can add as a text file in IntelliJ if you do not have the GraphQL plug-in yet).</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-elm"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">type</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">Dog</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token hvariable"">id</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">ID</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span>\n</span><span>    </span><span class=""token hvariable"">name</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">String</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span>\n</span><span>    </span><span class=""token hvariable"">breed</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">String</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span>\n</span><span>    </span><span class=""token hvariable"">origin</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">String</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">type</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">Query</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token hvariable"">findAllDogs</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span>\n</span><span>    </span><span class=""token hvariable"">findDogById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token hvariable"">id</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span class=""token"" style=""color: rgb(15, 43, 61);"">ID</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">Dog</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">type</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">Mutation</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token hvariable"">deleteDogBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token hvariable"">breed</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span class=""token"" style=""color: rgb(15, 43, 61);"">String</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">Boolean</span><span>\n</span><span>    </span><span class=""token hvariable"">updateDogName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token hvariable"">newName</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">String</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token hvariable"">id</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span class=""token"" style=""color: rgb(15, 43, 61);"">ID</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">Dog</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Now, you may be thinking I did not actually implement the query operations that were requested. But wait - using GraphQL, the user will be able to specify which fields they want from a query. So, simply by adding the queries for find all dogs (where they can request only breed, or only names), and finding a dog by id (where they can request just the breed), these operations actually exist.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 3</strong>: Create a repository that extends CrudRepository.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">This repository is for creating, reading, updating, and deleting Dog objects.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Depending on how you implemented your <code class=""chakra-code css-1u83yg1"">DogRepository</code> for the REST API, you may be able to completely re-use your code here. I actually chose to completely remove any queries from within the <code class=""chakra-code css-1u83yg1"">DogRepository</code>, as there are already built-in methods for a <code class=""chakra-code css-1u83yg1"">CrudRepository</code> that <code class=""chakra-code css-1u83yg1"">findAll</code> and <code class=""chakra-code css-1u83yg1"">findById</code>.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>repository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>entity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">data</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">repository</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">CrudRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">interface</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRepository</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">extends</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">CrudRepository</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token generics""> </span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">What about the service and controller?</h3>\n<p class=""chakra-text css-o3oz8b"">We don\'t need these to implement a GraphQL API. If you still want to have a REST API available, you can add those files to the application as well, and the same endpoints as before will be available.</p></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.13  Case Study: Queries & Mutations,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/HK1eis29n-I
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.14  Case Study: Exception Handling,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/6RiCb4vMAm8
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.15  Lab III: Build a Dog GraphQL API (Queries & Exceptions),[],[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.16  Lab III: Solution,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 1</strong>: Create resolvers that implement <code class=""chakra-code css-1u83yg1"">GraphQLQueryResolver</code>.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The query resolver should match the operations in the GraphQL schema.\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Query\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">findDogBreeds</li><li class=""css-cvpopp"">findDogBreedById</li><li class=""css-cvpopp"">findAllDogNames</li></ul>\n</li><li class=""css-cvpopp"">Mutation\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">deleteDogBreed</li><li class=""css-cvpopp"">updateDogName</li></ul>\n</li></ul>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">First, create a <code class=""chakra-code css-1u83yg1"">resolver</code> package and then add a new class <code class=""chakra-code css-1u83yg1"">Query</code> that implements <code class=""chakra-code css-1u83yg1"">GraphQLQueryResolver</code>. We just need to add the queries we put in <code class=""chakra-code css-1u83yg1"">dog.graphqls</code> earlier.</p>\n<p class=""chakra-text css-o3oz8b"">I already added some of the necessary error handling in <code class=""chakra-code css-1u83yg1"">findDogById</code> for Step 2 here, but it\'s essentially the same for this file as what you saw for the REST API.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>resolver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">coxautodev</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">graphql</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">tools</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">GraphQLQueryResolver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>entity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>exception</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>DogNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>repository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>DogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">stereotype</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Component</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Optional</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Component</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Query</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">implements</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">GraphQLQueryResolver</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRepository</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Query</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRepository</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>dogRepository </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Iterable</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findAllDogs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDogById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Optional</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> optionalDog </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>optionalDog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">isPresent</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> optionalDog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">get</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Dog Not Found""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Next up are the mutators. Create a <code class=""chakra-code css-1u83yg1"">mutator</code> package and then add a new class <code class=""chakra-code css-1u83yg1"">Mutation</code> that implements <code class=""chakra-code css-1u83yg1"">GraphQLMutationResolver</code>.</p>\n<p class=""chakra-text css-o3oz8b"">In these mutations, I am first using the <code class=""chakra-code css-1u83yg1"">findAll()</code> query from the <code class=""chakra-code css-1u83yg1"">DogRepository</code>, then processing to get the relevant entry (if available), and perform the requested operation. There are lots of ways to do this - you could instead add some additional queries to <code class=""chakra-code css-1u83yg1"">DogRepository</code> to help, querying for just a single <code class=""chakra-code css-1u83yg1"">Dog</code> by ID, for instance.</p>\n<p class=""chakra-text css-o3oz8b"">As with the queries, I\'ve gone ahead and added the exception handling for Step 2 already for simplicity. The one for <code class=""chakra-code css-1u83yg1"">deleteDogBreed</code> is not required in this exercise, but probably helpful for a user.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>mutator</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">coxautodev</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">graphql</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">tools</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">GraphQLMutationResolver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>entity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>exception</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>BreedNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>exception</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>DogNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>repository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>DogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">stereotype</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Component</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Optional</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Component</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Mutation</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">implements</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">GraphQLMutationResolver</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRepository</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Mutation</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRepository</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>dogRepository </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">boolean</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">deleteDogBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">boolean</span><span> deleted </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">false</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Iterable</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> allDogs </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Loop through all dogs to check their breed</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">for</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span> d</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span>allDogs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>d</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">equals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>               </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Delete if the breed is found</span><span>\n</span><span>               dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">delete</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>d</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>               deleted </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Throw an exception if the breed doesn\'t exist</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span>deleted</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BreedNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Breed Not Found""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> breed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> deleted</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">updateDogName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> newName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Optional</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> optionalDog </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findById</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>optionalDog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">isPresent</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span> dog </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> optionalDog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">get</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Set the new name and save the updated dog</span><span>\n</span><span>            dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>newName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            dogRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">save</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Dog Not Found""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2</strong>: Make sure errors are handled appropriately.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">If an id is requested that doesn’t exist, appropriately handle the error</li></ul>\n<p class=""chakra-text css-o3oz8b"">Some of this has been handled in the above for the <code class=""chakra-code css-1u83yg1"">Query</code> and <code class=""chakra-code css-1u83yg1"">Mutation</code>. You might be tempted to fully re-use your code for <code class=""chakra-code css-1u83yg1"">DogNotFoundException</code> from earlier, but we need a few changes for it to work properly with GraphQL (note that if you were also adding on a separate REST API using a service and controller, you may want to use separate exception handling for it). This time, you\'ll want to have it <code class=""chakra-code css-1u83yg1"">implement</code> a <code class=""chakra-code css-1u83yg1"">GraphQLError</code>, and no longer use the <code class=""chakra-code css-1u83yg1"">@ResponseStatus</code> annotation we used with the REST API.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>exception</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">graphql</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ErrorType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">graphql</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">GraphQLError</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">graphql</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">language</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SourceLocation</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HashMap</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Map</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogNotFoundException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">extends</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">RuntimeException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">implements</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">GraphQLError</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Map</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token generics""> </span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Object</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> extensions </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HashMap</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> message</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> invalidDogId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">super</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>message</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        extensions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">put</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""invalidDogId""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> invalidDogId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SourceLocation</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getLocations</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Map</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token generics""> </span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Object</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getExtensions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> extensions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ErrorType</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getErrorType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ErrorType</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DataFetchingException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If you are also wanting to implement the <code class=""chakra-code css-1u83yg1"">BreedNotFoundException</code>, you can essentially just slightly alter the <code class=""chakra-code css-1u83yg1"">DogNotFoundException</code> to do so. You could of course also potentially combine these into one exception file if you get a little more creative with the <code class=""chakra-code css-1u83yg1"">Exception</code> itself.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogGraphQL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>exception</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">graphql</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ErrorType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">graphql</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">GraphQLError</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">graphql</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">language</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SourceLocation</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HashMap</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Map</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BreedNotFoundException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">extends</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">RuntimeException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">implements</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">GraphQLError</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Map</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token generics""> </span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Object</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> extensions </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HashMap</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BreedNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> message</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> invalidBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">super</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>message</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        extensions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">put</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""invalidBreedId""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> invalidBreed</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SourceLocation</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getLocations</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Map</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token generics""> </span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Object</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getExtensions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> extensions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ErrorType</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getErrorType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ErrorType</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DataFetchingException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.17  Case Study: Testing,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/NQsnZAGRJ2Q
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.18  Case Study: GraphiQL,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/ZEJOP4OeIBs
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.19  Lab IV: Build a Dog GraphQL API (Testing),"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I completed the ""Build a Dog GraphQL API"" lab.</p></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.20  Lab IV: Solution,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 1:</strong> Create a <code class=""chakra-code css-1u83yg1"">data.sql</code> file.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The file should create sample dog data in the database.</li></ul>\n<p class=""chakra-text css-o3oz8b"">You can re-use your previous <code class=""chakra-code css-1u83yg1"">data.sql</code> file or make a new one.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2:</strong> Check that the GraphQL API works appropriately.</h3>\n<p class=""chakra-text css-o3oz8b"">First, check that your schema shows appropriately at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/graphql/schema.json"">http://localhost:8080/graphql/schema.json<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. You might consider getting a browser extension or another tool to show formatted json as well, otherwise this will look like a large wall of text.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Example JSON from a schema</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Now, let\'s go to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.getpostman.com/downloads/"">Postman<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> to test out whether the queries and mutators we want actually work.</p>\n<p class=""chakra-text css-o3oz8b"">First, make sure you are using a <code class=""chakra-code css-1u83yg1"">POST</code> request, then add our graphQL URL <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/graphql"">http://localhost:8080/graphql<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> to the app. Then, Make sure to add a Header with <code class=""chakra-code css-1u83yg1"">Content-Type</code> as <code class=""chakra-code css-1u83yg1"">application/json</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Adding a POST request to our GraphQL API</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Now, we can test out our queries. Let\'s look at an example for how a user would accomplish their needs based on the lab query operations. I also added <code class=""chakra-code css-1u83yg1"">id</code> below to know which belongs to each dog, but they could just as easily skip that and only return the specific data they want (you need at least one item selected with GraphQL, and can do multiple at once - but you cannot grab all data without specifying each individual field).</p>\n<p class=""chakra-text css-o3oz8b"">For each of these below, enter them into ""Body"" in Postman and then ""Send"" the request.</p>\n<h5 class=""chakra-heading css-bsa8mb"">findDogBreeds</h5>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(2, 124, 124);"">""query""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""{findAllDogs { id breed } }""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">which returns:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""data""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""findAllDogs""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""breed""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Pomeranian""</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""2""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""breed""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Pit Bull""</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""3""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""breed""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Cocker Spaniel""</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""4""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""breed""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Direwolf""</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""5""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""breed""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Husky""</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<h5 class=""chakra-heading css-bsa8mb"">findDogBreedById</h5>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(2, 124, 124);"">""query""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""{findAllDogs { id breed } }""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">which returns:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""data""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""findDogById""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""breed""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Pomeranian""</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">You should also try out an invalid ID with this to check your error handling. As part of the returned JSON, I got <code class=""chakra-code css-1u83yg1"">Exception while fetching data (/findDogById) : Dog Not Found</code>.</p>\n<h5 class=""chakra-heading css-bsa8mb"">findAllDogNames</h5>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(2, 124, 124);"">""query""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""{findAllDogs { id name } }""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">which returns:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""data""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""findAllDogs""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""name""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fluffy""</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""2""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""name""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Spot""</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""3""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""name""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Ginger""</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""4""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""name""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Lady""</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""5""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""name""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Sasha""</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Mutations</h4>\n<p class=""chakra-text css-o3oz8b"">Let\'s say we want to change the name of dog four to ""Ghost"". There\'s a slightly different syntax, that needs <code class=""chakra-code css-1u83yg1"">mutation</code> included in the query as well. Also, make sure to use the escape character <code class=""chakra-code css-1u83yg1"">\\</code> to include quotation marks for strings.</p>\n<h5 class=""chakra-heading css-bsa8mb"">updateDogName</h5>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-swift"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t</span><span class=""token string-literal"" style=""color: rgb(221, 17, 68);"">""query""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">:</span><span class=""token string-literal"" style=""color: rgb(221, 17, 68);"">""mutation {updateDogName(newName:\\""Ghost\\"", id:4) { id name breed } }""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">which returns:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""data""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""updateDogName""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""4""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""name""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Ghost""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""breed""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Direwolf""</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Make sure to test out an invalid ID here too!</p>\n<h5 class=""chakra-heading css-bsa8mb"">deleteDogBreed</h5>\n<p class=""chakra-text css-o3oz8b"">For this, you do not need to add the field specifications afterward.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-swift"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t</span><span class=""token string-literal"" style=""color: rgb(221, 17, 68);"">""query""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">:</span><span class=""token string-literal"" style=""color: rgb(221, 17, 68);"">""mutation {deleteDogBreed(breed:\\""Pomeranian\\"")}""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">which returns:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""data""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""deleteDogBreed""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">If you added an <code class=""chakra-code css-1u83yg1"">Exception</code> for a missing breed, make sure to test that here too!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Full Solution</h3>\n<p class=""chakra-text css-o3oz8b"">If you\'d like the full solution code all in one place, you can download it through the link below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h5 class=""chakra-heading css-bsa8mb"">Supporting Materials</h5>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2019/August/5d4374af_doggraphql/doggraphql.zip"">DogGraphQLSolution<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']","['https://video.udacity-data.com/topher/2019/August/5d43636d_graphql-schema-updated/graphql-schema-updated.png', 'https://video.udacity-data.com/topher/2019/August/5d4369b0_java-graphql-postman/java-graphql-postman.png']",
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 3: GraphQL APIs,3.21  Recap,[],[],https://www.youtube.com/embed/zk6uPym8eXc
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.1  Introduction,[],[],https://www.youtube.com/embed/iuOL0IJguCI
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.2  MSA,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">N-Tier and monolithic applications used to be the de facto standard. In one single binary web artifact, like an <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://en.wikipedia.org/wiki/EAR_(file_format)"">EAR<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> or <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://en.wikipedia.org/wiki/WAR_(file_format)"">WAR<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> file, there would be a layered architecture with the decomposition of code into more functional components.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Presentation Layer</li><li class=""css-cvpopp"">Business Process Layer/Service Layer</li><li class=""css-cvpopp"">Data Access Layer</li></ul>\n<p class=""chakra-text css-o3oz8b"">There are several disadvantages to the n-tier monolithic application architecture:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Tight coupling of code which makes changes hard.</li><li class=""css-cvpopp"">A single deployment with multiple layers that causes long testing, building, and deployment cycles.</li><li class=""css-cvpopp"">A big monolithic application that makes code reuse and sharing of components difficult.</li></ul>\n<p class=""chakra-text css-o3oz8b"">The Microservices Architecture (MSA) decomposes systems into discrete, individual, standalone components that can communicate amongst themselves, working together or with external systems.</p>\n<p class=""chakra-text css-o3oz8b"">MSA is a more agile framework that fits well with the cloud-based world and lends itself well to web application development and web service development.</p>\n<h5 class=""chakra-heading css-bsa8mb"">Features</h5>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">MSA is very flexible because it supports any language that can communicate via a RESTful endpoint and leverages REST over HTTP.</li><li class=""css-cvpopp"">MSA offers agility and systems that are easier to write, test, deploy, and share.</li><li class=""css-cvpopp"">MSA provides systems that can better scale to load and demand.</li><li class=""css-cvpopp"">MSA provides systems that are resilient because failures are isolated and don’t cascade through the infrastructure.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify TWO benefits of MSA.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Isolated failures</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Inherent scalability</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Multiple sources of truth for data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Cascading of errors throughout infrastructure</p></div>']",[],https://www.youtube.com/embed/M9YlbhAHTzY
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.3  Spring Cloud & Eureka,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Eureka, created by Netflix, is responsible for the registration and discovery microservices. Spring has incorporated Eureka into <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects/spring-cloud"">Spring Cloud<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, making it even easier to stand up a Eureka server.</p>\n<p class=""chakra-text css-o3oz8b"">Eureka consists of a server and a client-side component. The server component will be the registry in which all the microservices register their availability.  The microservices use the Eureka client to register; once the registration is complete, it notifies the server of its existence.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What make a microservice different from a normal RESTful service?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A microservice communicates over REST</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A microservice uses  a common shared database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A microservice must register itself with a discovery service</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A microservice has less lines of code</p></div>']",[],https://www.youtube.com/embed/cGKMR-Y_cg0
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.4  Case Study: Eureka Server,[],[],https://www.youtube.com/embed/1dZvq2eAvOc
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.5  Lab I: Build a Dog Microservice (Eureka),[],[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.6  Lab I: Solution,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 1:</strong> Create a SpringBoot project that creates a Eureka server.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Ensure that you use the proper dependencies in the Maven POM file and the necessary annotations.</li><li class=""css-cvpopp"">Make a note of the service URL and add any other necessary details in <code class=""chakra-code css-1u83yg1"">application.properties</code>.</li></ul>\n<p class=""chakra-text css-o3oz8b"">First, navigate once again to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://start.spring.io/"">Spring Initializr<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. You can add the <code class=""chakra-code css-1u83yg1"">Config Client</code> (for <code class=""chakra-code css-1u83yg1"">spring-cloud-starter-config</code>) and <code class=""chakra-code css-1u83yg1"">Eureka Server</code> (for <code class=""chakra-code css-1u83yg1"">spring-cloud-netflix-eureka-server</code>) dependencies to generate the POM file for this project. Remember that since this is just the Eureka server and not the microservice client you will build later, you won\'t need dependencies like <code class=""chakra-code css-1u83yg1"">H2</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select the correct dependencies for the project</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Additionally, I added the below additional dependency to my POM file to get the Eureka server up and running:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>javax.xml.bind</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>jaxb-api</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>2.4.0-b180725.0427</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">From there, navigate to your <code class=""chakra-code css-1u83yg1"">application.properties</code> file to add the application name and server port (<code class=""chakra-code css-1u83yg1"">8761</code> in the case of a Eureka server, typically). Below, I have also added lines to avoid registering the Eureka server itself as a client, as well as adding some additional logging to help with any potential debugging or information needs.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-pseudo"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring.application.name=eureka-server\n</span>server.port=8761\n\n## avoid registering itself as a client\neureka.client.register-with-eureka=false\neureka.client.fetch-registry=false\nlogging.level.com.netflix.eureka=ON\nlogging.level.com.netflix.discovery=ON</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You\'re already almost done! Now, we just need one import and one annotation added to <code class=""chakra-code css-1u83yg1"">EurekaApplication.java</code> - importing <code class=""chakra-code css-1u83yg1"">EnableEurekaServer</code> and adding the related annotation.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">eureka</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">boot</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SpringApplication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">boot</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">autoconfigure</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SpringBootApplication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">cloud</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">netflix</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">eureka</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">server</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">EnableEurekaServer</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@SpringBootApplication</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@EnableEurekaServer</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">EurekaApplication</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">main</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> args</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SpringApplication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">run</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">EurekaApplication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> args</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2:</strong> Use a web browser to view the Eureka web console.</h3>\n<p class=""chakra-text css-o3oz8b"">Navigate to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8761/"">http://localhost:8761/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> on your computer to view the Eureka web console. Note again that Eureka servers are typically put on port 8761, but if you would have used a different server port in <code class=""chakra-code css-1u83yg1"">application.properties</code>, you would instead navigate to that port.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A view of the Eureka web console</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Eureka Server Solution</h3>\n<p class=""chakra-text css-o3oz8b"">You can get the full code for the Eureka server below; we\'ll include it again at the end of the final lab solution of this lesson.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h5 class=""chakra-heading css-bsa8mb"">Supporting Materials</h5>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2019/August/5d485584_eureka/eureka.zip"">Eureka<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']","['https://video.udacity-data.com/topher/2019/August/5d485078_java-spring-eureka/java-spring-eureka.png', 'https://video.udacity-data.com/topher/2019/August/5d485325_java-eureka-server/java-eureka-server.png']",
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.7  Spring Data REST,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects/spring-data-rest"">Spring Data REST<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> makes it easy to expose microservices. Spring Data REST builds on top of Spring Data repositories and automatically exports those as REST resources.</p>\n<p class=""chakra-text css-o3oz8b"">So how does Spring Data Rest work?</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">At application startup, Spring Data Rest finds all of the spring data repositories</li><li class=""css-cvpopp"">Then, Spring Data Rest creates an endpoint that matches the entity name</li><li class=""css-cvpopp"">Next, Spring Data Rest appends an S to the entity name in the endpoint</li><li class=""css-cvpopp"">Lastly, Spring Data Rest exposes CRUD (Create, Read, Update, and Delete) operations as RESTful APIs over HTTP</li></ol>\n<p class=""chakra-text css-o3oz8b"">There is no need to create a controller or service layer!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which components are not needed when working with Spring Data REST?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Controller</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Entity</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Repository</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Service</p></div>']",[],https://www.youtube.com/embed/MeHN-SWMjfc
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.8  Case Study: Spring Data REST,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Each service has its own database. For this case study, instead of building out the entire system, we will focus on the Item Service. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson4-microservices"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/EtQe4STbuRA
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.9  Lab II: Build a Dog Microservice (Spring Data REST),[],[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.10  Lab II: Solution,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 0:</strong> Create a SpringBoot project/module for an eventual microservice.</h3>\n<p class=""chakra-text css-o3oz8b"">We skipped this step on the original lab page, but it\'s essentially inferred to get us started. This can either be a new project (in which case you would need the Eureka server running in a separate window) or a new module. Since so far we\'ve been using Spring Initializr as a separate project, I will approach it as such below.</p>\n<p class=""chakra-text css-o3oz8b"">Along with JPA, H2 and Spring Web Starter, you can add <code class=""chakra-code css-1u83yg1"">Rest Repositories</code> (for <code class=""chakra-code css-1u83yg1"">spring-boot-starter-data-rest</code>), <code class=""chakra-code css-1u83yg1"">Cloud Config</code>, and also <code class=""chakra-code css-1u83yg1"">Eureka Discovery Client</code>, which we won\'t utilize until the last part of the lab in this lesson (you can always update your POM file with this later, if necessary). If you need to debug, you might comment out the Eureka discovery client, as otherwise you\'ll see a lot of messages being output depending on whether it is connected to your Eureka server yet.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Adding the dependencies for the microservice</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Don\'t forget to add anything you may need for <code class=""chakra-code css-1u83yg1"">H2</code> to <code class=""chakra-code css-1u83yg1"">application.properties</code> here! I re-used the same lines from the REST API in mine.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 1:</strong> Create an entity called Dog.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The dog should have three attributes:\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Name</li><li class=""css-cvpopp"">Breed</li><li class=""css-cvpopp"">Origin</li></ul>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">You can re-use your code from the REST API for the <code class=""chakra-code css-1u83yg1"">Dog</code> entity, just make sure to update the package name accordingly!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2:</strong> Create a repository that extends CrudRepository.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">This repository is for creating, reading, updating, and deleting Dog objects.</li><li class=""css-cvpopp"">Note: This repository will not need to implement anything beyond an interface.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Depending on your implementation, this can be re-used from either the REST API or GraphQL API. In this case, we don\'t need to add anything within the interface here.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogMicroservice</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>repository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogMicroservice</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>entity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>Dog</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">data</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">repository</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">CrudRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">interface</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRepository</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">extends</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">CrudRepository</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Dog</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token generics""> </span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 3:</strong> Create a <code class=""chakra-code css-1u83yg1"">data.sql</code> file.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The file should create sample dog data in the database.</li></ul>\n<p class=""chakra-text css-o3oz8b"">You can either re-use your previous <code class=""chakra-code css-1u83yg1"">data.sql</code> files here or create a new one.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 4:</strong> Create a microservice using Spring Data REST.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Include the proper dependencies in the Maven POM file.</li></ul>\n<p class=""chakra-text css-o3oz8b"">If you\'ve been following since Step 0, this was actually done by including <code class=""chakra-code css-1u83yg1"">Rest Repositories</code> within Spring Initializr, but otherwise, you can add the following to your POM file:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-pseudo"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\t\t&lt;dependency&gt;\n</span>\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-data-rest&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Amazingly, you have now created a microservice to serve up the dogs\' information! Spring Data Rest is handling most of the work for you, although since this is a microservice, it is more limited in what it does on its own (we don\'t have the explicit functionality to just get dog names here, for instance).</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 5:</strong> Check that you are able to access your microservice.</h3>\n<p class=""chakra-text css-o3oz8b"">While it might feel like we have hardly coded anything yet, your microservice should now be ready! When I navigated to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/dogs"">http://localhost:8080/dogs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, I saw the below (with some formatting done by a browser extension).</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A subset of the JSON from the microservice</p></div>']","['https://video.udacity-data.com/topher/2019/August/5d485f10_java-spring-microservice2/java-spring-microservice2.png', 'https://video.udacity-data.com/topher/2019/August/5d485c91_java-microservice-dogs/java-microservice-dogs.png']",
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.11  Microservice Registration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For a @SpringBootApplication to be discovery-aware, all that\'s needed is the Spring Discovery Client (i.e., <code class=""chakra-code css-1u83yg1"">spring-cloud-starter-netflix-eureka-client</code> dependency) in the classpath. The next step is to annotate the main Spring application class with the @EnableEurekaClient annotation. @EnableEurekaClient is optional if the <code class=""chakra-code css-1u83yg1"">spring-cloud-starter-netflix-eureka-client</code> dependency is on the classpath.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What happens if a microservice is not registered as a Eureka client?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The microservice cannot be discovered</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The microservice cannot automatically scale</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The microservice is considered private and cannot be called.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Clients of the microservice must use the host name and port to access the service.</p></div>']",[],https://www.youtube.com/embed/ozWskAAllkw
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.12  Case Study: Registration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Each service has its own database. For this case study, instead of building out the entire system, we will focus on the Item Service. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson4-microservices"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/MMymv5LxfpQ
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.13  Lab III: Build a Dog Microservice (Registration),"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I completed the ""Build a Dog Microservice"" lab.</p></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.14  Lab III: Solution,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 1:</strong> Turn the microservice into a Eureka client.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Add the appropriate annotations and dependencies in the Maven POM file.</li></ul>\n<p class=""chakra-text css-o3oz8b"">If you followed Step 0 in the Lab II solution, you already have the necessary dependencies, but if not, you\'ll want to add both the Eureka discovery client and cloud config.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.cloud</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-cloud-starter-netflix-eureka-client</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.cloud</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-cloud-starter-config</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Spring Initializr may have already added the dependency management for you, but if that field does not exist in your POM file, add the following:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependencyManagement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependencies</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.cloud</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-cloud-starter-parent</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Greenwich.RELEASE</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">type</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>pom</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">type</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>import</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependencies</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependencyManagement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">From there, it\'s just a couple of imports in <code class=""chakra-code css-1u83yg1"">DogMicroserviceApplication.java</code> (or your similarly named application file) and a single additional annotation.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogMicroservice</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">boot</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SpringApplication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">boot</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">autoconfigure</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SpringBootApplication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">cloud</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">client</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">discovery</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">EnableDiscoveryClient</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">cloud</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">netflix</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">eureka</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">EnableEurekaClient</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@SpringBootApplication</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@EnableEurekaClient</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogMicroserviceApplication</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">main</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> args</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SpringApplication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">run</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogMicroserviceApplication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> args</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Last is adding the necessary lines to <code class=""chakra-code css-1u83yg1"">application.properties</code>. I decided to add my application <code class=""chakra-code css-1u83yg1"">dog-service</code>, and set to port 8762. You can choose which port to use here, although I will keep it simple by using the very next port after the one for the Eureka server.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-pseudo"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring.application.name=dog-service\n</span>server.port=8762\neureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/\neureka.client.service-url.default-zone=http://localhost:8761/eureka/\neureka.instance.prefer-ip-address=true</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">And that\'s it! Your microservice is now able to be registered with the Eureka server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2:</strong> Ensure your microservice is registered.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Use a web browser to view the Eureka web console, and check that your microservice is listed.</li></ul>\n<p class=""chakra-text css-o3oz8b"">First, if you stopped or closed it earlier, make sure your Eureka server is running at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8761/"">http://localhost:8761/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Then, go ahead and run the application for your Dog Microservice. You will likely need to refresh the page to see your new <code class=""chakra-code css-1u83yg1"">dog-service</code> shown as registered with the Eureka server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">dog-service</code> is now registered with the Eureka server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You should also be able to see the returned JSON from your Dog microservice at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8762/dogs"">http://localhost:8762/dogs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. If you want to go even further, research how to further configure the microservice so you can access it at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://dog-service/dogs"">http://dog-service/dogs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> instead!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Full Solution</h3>\n<p class=""chakra-text css-o3oz8b"">If you\'d like the full solution code all in one place, you can download it through the links below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h5 class=""chakra-heading css-bsa8mb"">Supporting Materials</h5>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2019/August/5d485584_eureka/eureka.zip"">Eureka<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2019/August/5d4863e0_dogmicroservice/dogmicroservice.zip"">DogMicroservice<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2019/August/5d48629b_java-registered-microservice/java-registered-microservice.png'],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 4: Microservices,4.15  Recap,[],[],https://www.youtube.com/embed/E54uVaedTY4
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 5: Security,5.1  Introduction,[],[],https://www.youtube.com/embed/xlceysbunI8
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 5: Security,5.2  Security Overview,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When allowing access to data via web services, security is very important. We want to limit who can view or even update data; only trusted individuals should have access.</p></div>']",[],https://www.youtube.com/embed/s3QU5kbUtes
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 5: Security,5.3  Authentication vs Authorization,"['<div class=""ureact-markdown css-tc5hjw""><h5 class=""chakra-heading css-bsa8mb"">Authentication</h5>\nAuthentication is about validating the identity of a client attempting to call a web service. Typically, identity is validated with user credentials, such as a user name and password. \n<h5 class=""chakra-heading css-bsa8mb"">Authorization</h5>\nAuthorization is the next step after authentication. So once a client is authenticated (they have proven who they are), what do they have access to? For example, what data can they view, are they allowed to change that data, etc. </div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify TWO ways to authenticate with a web service.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Authorization key</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">API Key</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">User name and password</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Base-64 encoded password only</p></div>']",[],https://www.youtube.com/embed/yCVRQgBPwqQ
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 5: Security,5.4  Basic Authentication,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Basic Authentication (also referred to as Basic Auth) is the simplest protocol available for performing web service authentication over HTTP protocol.  Basic Auth requires a username and password. The client calling the web service takes these two credentials, converts them to a single <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://en.wikipedia.org/wiki/Base64"">Base 64–encoded value<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> and passes it along in the Authentication HTTP header.</p>\n<p class=""chakra-text css-o3oz8b"">The server compares the credentials passed to those stored. If it matches, the server fulfills the request and provides access to the data. If the Authentication HTTP header is missing or the password doesn’t match the user name, the server denies access and returns a <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"">401 status code<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, which means the request is Unauthorized.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which status code is returned when a request to a web service is unauthorized?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">404 - Not Found</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">400 - Bad Request</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">401 - Unauthorized</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">403 - Forbidden</p></div>']",[],https://www.youtube.com/embed/AFqFZS-6NW8
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 5: Security,5.5  Spring Security,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects/spring-security"">Spring Security<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> is a part of the Spring Framework and provides authentication, authorization and other security features for Spring-based applications.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Item</strong></th><th class=""css-zl9m57""><strong>Description</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">spring-boot-starter-security</td><td class=""css-1eywhk4"">Maven dependency that adds security module.</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">@EnableWebSecurity</td><td class=""css-1eywhk4"">Annotation that enables Spring Security’s support.</td></tr></tbody></table></div></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">How do you override the default security and provide your own configuration?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add the Spring Security starter dependency to the Maven POM file</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Extend WebSecurityConfigurerAdapter</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Omit the @EnableWebSecurity annotation</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Remove the Spring Security starter dependency in the Maven POM file</p></div>']",[],https://www.youtube.com/embed/5U6qpTtV7vo
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 5: Security,5.6  Case Study,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Security case study retrieves a list of locations from a database in <strong>a secure fashion</strong>. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson5-security"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">The API has the following components:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Controller </strong>- LocationController.java</li><li class=""css-cvpopp""><strong>Service </strong>- LocationService.java and LocationServiceImpl.java</li><li class=""css-cvpopp""><strong>CRUD Repository </strong>- LocationRepository.java</li><li class=""css-cvpopp""><strong>Domain Entity/Model </strong>- Location.java</li><li class=""css-cvpopp""><strong>Security Configuration </strong>- SpringSecurityConfig.java </li><li class=""css-cvpopp""><strong>H2 Database </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/h2/"">http://localhost:8080/h2/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><strong>Tomcat Server </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080"">http://localhost:8080<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">CSRF</h4>\n<p class=""chakra-text css-o3oz8b"">Read more about Cross Site Request Forgery <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://en.m.wikipedia.org/wiki/Cross-site_request_forgery"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Using the link above, select which of the following are true regarding CSRF:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CSRF involves sites that rely on a user\'s identity</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A CSRF attack involving uTorrent allowed the attacker to force a torrent download</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A CSRF vulnerability on Netflix\'s site would have allowed an attacker to change the shipping address for DVDs</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For a CSRF to succeed, the attacker must lure the victim to a site with malicious code while the victim is logged into the target site</p></div>']",[],https://www.youtube.com/embed/qvIKMTcramM
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 5: Security,5.7  Lab: Secure Your Dog API,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Reuse your Dog REST API code from Lesson 2 and secure it using Basic Authentication.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Step 1:</strong> Add the necessary dependencies for Spring Security in the Maven POM file.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Step 2:</strong> Create the necessary security configuration class that extends <code class=""chakra-code css-1u83yg1"">WebSecurityConfigurerAdapter</code> to secure your API with Basic Authentication.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Step 3:</strong> Test that your API is now secured with basic authentication and still operates appropriately for an authenticated user.</p>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I completed the ""Secure Your Dog API"" lab.</p></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 5: Security,5.8  Lab Solution: Secure Your Dog API,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 1:</strong> Add the necessary dependencies for Spring Security.</h3>\n<p class=""chakra-text css-o3oz8b"">Given your code for the REST API from before, you just need to add the following two dependencies to the Maven POM file:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-starter-security</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.security</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-security-test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2:</strong> Create the necessary security configuration class.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">the class should extend <code class=""chakra-code css-1u83yg1"">WebSecurityConfigurerAdapter</code> to secure your API with Basic Authentication</li></ul>\n<p class=""chakra-text css-o3oz8b"">First, add a <code class=""chakra-code css-1u83yg1"">config</code> package to your Dog REST API code, and then add a <code class=""chakra-code css-1u83yg1"">SpringSecurityConfig</code> class within it that extends <code class=""chakra-code css-1u83yg1"">WebSecurityConfigurerAdapter</code> from Spring Security.</p>\n<p class=""chakra-text css-o3oz8b"">From there, the code follows similarly to how the Location API was secured in the earlier Case Study video, although welcome to update the username and password used below (and required to do so in any more in-depth implementation, of course). Note that the class uses both the <code class=""chakra-code css-1u83yg1"">@Configuration</code> and <code class=""chakra-code css-1u83yg1"">@EnableWebSecurity</code> annotations.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>config</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">beans</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">factory</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Autowired</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">context</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Bean</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">context</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Configuration</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">security</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">config</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">authentication</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">builders</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationManagerBuilder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">security</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">config</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">web</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">builders</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpSecurity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">security</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">config</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">web</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">configuration</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">EnableWebSecurity</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">security</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">config</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">web</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">configuration</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebSecurityConfigurerAdapter</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">security</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">crypto</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">bcrypt</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BCryptPasswordEncoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">security</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">crypto</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">password</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">PasswordEncoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Configuration</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@EnableWebSecurity</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SpringSecurityConfig</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">extends</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebSecurityConfigurerAdapter</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">protected</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">configure</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpSecurity</span><span> http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Exception</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>        http\n<span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">csrf</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">disable</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authorizeRequests</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">anyRequest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticated</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">and</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">httpBasic</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Autowired</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">configureGlobal</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationManagerBuilder</span><span> auth</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Exception</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        auth</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">inMemoryAuthentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">withUser</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""admin""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">password</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">encoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">encode</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""password""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">roles</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""USER""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Bean</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">PasswordEncoder</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">encoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BCryptPasswordEncoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Note in the above that all of the <code class=""chakra-code css-1u83yg1"">.</code> functions are actually chain together, but are on separate lines so that someone reading the code can more easily understand it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 3:</strong> Test that your API is now secured.</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">It should use basic authentication</li><li class=""css-cvpopp"">The API should still operate appropriately for an authenticated user</li></ul>\n<p class=""chakra-text css-o3oz8b"">You can test this out in multiple ways. First, I tried to access <a class=""chakra-link css-190botj"" href=""javascript:void(0)"">localhost:8080/dogs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> in the browser, and got a ""Sign in"" window. If I click cancel, I get a 401 error - Unauthorized. If I enter in my basic authentication information, I can access the page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Needing to sign in to our Dog API</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The (uncustomized) 401 status - Unauthroized</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I can also test this in Postman instead, where I change the ""Authorization"" tab to use ""Basic Auth"", make sure I am using a <code class=""chakra-code css-1u83yg1"">GET request</code>, and then first attempt without a username and password. I will again get a status code of 401 meaning I am unauthorized. If I add the correct username and password, I can access the API.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An unauthorized request through Postman (see status 401 in bottom right)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The authorized user can access the API</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Full Solution</h3>\n<p class=""chakra-text css-o3oz8b"">If you\'d like the full solution code all in one place, you can download it through the link below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h5 class=""chakra-heading css-bsa8mb"">Supporting Materials</h5>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2019/August/5d4c7179_securedogapi/securedogapi.zip"">SecureDogApi<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']","['https://video.udacity-data.com/topher/2019/August/5d48b14c_java-basic-auth/java-basic-auth.png', 'https://video.udacity-data.com/topher/2019/August/5d48b16e_java-401/java-401.png', 'https://video.udacity-data.com/topher/2019/August/5d48b2cc_postman-unauthorized/postman-unauthorized.png', 'https://video.udacity-data.com/topher/2019/August/5d48b2fb_postman-authorized/postman-authorized.png']",
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 5: Security,5.9  Recap,[],[],https://www.youtube.com/embed/D-lGnr7VQEg
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 6: Consuming SOAP & REST,6.1  Introduction,[],[],https://www.youtube.com/embed/aqxNb_nbNwo
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 6: Consuming SOAP & REST,6.2  Consuming REST,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are times when you want to consume (or call) publicly accessible web services or APIs in your application. If there is a web service or API available that provides the data you need, it doesn’t make sense for you to build one from scratch. This allows you to deliver your products and services faster to your end users.</p>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html"">RestTemplate<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> allows you to consume a REST API programmatically from your code.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify THREE ways to consume a REST API.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Programmatically via RestTemplate</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">SoapUI</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Postman</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">cURL</p></div>']",[],https://www.youtube.com/embed/Gf8IzEXaut0
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 6: Consuming SOAP & REST,6.3  Case Study: Consume REST,"['<div class=""ureact-markdown css-tc5hjw""><h5 class=""chakra-heading css-bsa8mb"">REST Case Study</h5>\nThe code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson6-consuming/consuming%20rest%20apis"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. The publicly accessible Joke API is <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://official-joke-api.appspot.com/random_joke"">https://official-joke-api.appspot.com/random_joke<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.\n<pre class=""css-0"">{\n""id"":94,\n ""type"":""general"",\n ""setup"":""Did you hear about the new restaurant on the moon?"",\n ""punchline"":""The food is great, but there’s just no atmosphere.""\n}\n\n{\n ""id"":283,\n ""type"":""general"",\n ""setup"":""What\'s the best thing about elevator jokes?"",\n ""punchline"":""They work on so many levels.""\n}</pre></div>']",[],https://www.youtube.com/embed/H-Kj9MvADg0
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 6: Consuming SOAP & REST,6.4  SOAP & Spring Web Services,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There may be times when you want to consume a SOAP-based web service in your applications. Spring Web Services makes this process easy by automatically generating the files you need in order to consume a SOAP-based web service.  In order to generate the files, the WSDL for the SOAP service in question is needed. WSDL stands for Web Services Description Language and simply describes the web service: its location and the operations allowed.  Spring Web Services is contract-first only. This means that you need to start from a contract definition (XSD or WSDL) to generate the files.</p>\n<h5 class=""chakra-heading css-bsa8mb"">Dependencies</h5>\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">spring-boot-starter-web-services</code> dependency includes the needed dependencies for using Spring Web Services.</p>\n<h5 class=""chakra-heading css-bsa8mb"">Generate Java Files</h5>\n<p class=""chakra-text css-o3oz8b"">To generate Java classes from the WSDL in maven, you need the following plugin setup:</p>\n<pre class=""css-0"">&lt;plugin&gt;\n   &lt;groupId&gt;org.jvnet.jaxb2.maven2&lt;/groupId&gt;\n  &lt;artifactId&gt;maven-jaxb2-plugin&lt;/artifactId&gt;\n  &lt;version&gt;0.14.0&lt;/version&gt;\n\t&lt;executions&gt;\n\t\t&lt;execution&gt;\n\t\t\t&lt;goals&gt;\n\t\t\t\t&lt;goal&gt;generate&lt;/goal&gt;\n\t\t\t&lt;/goals&gt;\n\t\t&lt;/execution&gt;\n\t&lt;/executions&gt;\n       &lt;configuration&gt;\n\t\t&lt;schemaDirectory&gt;${project.basedir}/src/main/resources/wsdl&lt;/schemaDirectory&gt;\n\t\t &lt;schemaIncludes&gt;\n\t\t\t&lt;include&gt;*.wsdl&lt;/include&gt;\n\t\t&lt;/schemaIncludes&gt;\n\t&lt;/configuration&gt;\n&lt;/plugin&gt;\n</pre>\n<p class=""chakra-text css-o3oz8b"">This plugin uses JAXB, which generates the Java classes and handles the mapping of XML to Java and vice versa. In order to generate the Java files, run the <code class=""chakra-code css-1u83yg1""> mvn generate-sources</code> Maven command. This can easily be done via the command line or through IntelliJ. This results in a number of generated Java classes under <code class=""chakra-code css-1u83yg1"">/target/generated-sources/xjc</code>.  Once you have the generated code, you can create a web service client by simply extending the <code class=""chakra-code css-1u83yg1"">WebServiceGatewaySupport</code> class and coding your operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What handles the mapping of XML to Java and vice versa?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Jackson</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">XSD</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">WSDL</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JAXB</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A REST API cannot consume data coming from a SOAP API.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">True</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">False</p></div>']",[],https://www.youtube.com/embed/zL6rOA0c1Ak
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 6: Consuming SOAP & REST,6.5  Case Study: WSDL,"['<div class=""ureact-markdown css-tc5hjw"">\n<h5 class=""chakra-heading css-bsa8mb"">SOAP Case Study</h5>\n<p class=""chakra-text css-o3oz8b"">The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson6-consuming/consuming%20soap"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. The publicly accessible web service is <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.dataaccess.com/webservicesserver/NumberConversion.wso?op=NumberToWords"">NumberToWords<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, implemented by DataFlex, converts numbers to its word version. The <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://www.dataaccess.com/webservicesserver/numberconversion.wso?WSDL"">WSDL<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> file defines the operations available.</p>\n<pre class=""css-0"">2391\n</pre>\n<pre class=""css-0"">&lt;string&gt;two thousand three hundred and ninety one &lt;/string&gt;\n</pre>\n<pre class=""css-0"">53429\n</pre>\n<pre class=""css-0"">&lt;string&gt;fifty three thousand four hundred and twenty nine &lt;/string&gt;\n</pre></div>']",[],https://www.youtube.com/embed/Mf70O-rqsL8
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 6: Consuming SOAP & REST,6.6  Case Study: Code Generation,[],[],https://www.youtube.com/embed/4RFI9B9tdlo
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 6: Consuming SOAP & REST,6.7  Case Study: Client,[],[],https://www.youtube.com/embed/HroekMKDKjQ
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 6: Consuming SOAP & REST,6.8  Lab: Consume an API,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consume a publicly accessible API from Java using one from this <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/public-apis/public-apis/blob/master/README.md"">list<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Step 1:</strong> Add the Jackson dependency to the Maven POM file.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Step 2:</strong> Use <code class=""chakra-code css-1u83yg1"">RestTemplate</code> to test a publicly accessible API from the list.</p>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I completed the ""Consume an API"" lab.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We haven\'t included a solution for this lab due to the vast differences in how you might implement this, both depending on the specific API\'s functionality as well as whether it is a SOAP vs. REST API. Make sure to check back in the Case Study if you need a refresher!</p></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 6: Consuming SOAP & REST,6.9  Recap,[],[],https://www.youtube.com/embed/98LtNbVjglU
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.1  Introduction,[],[],https://www.youtube.com/embed/Bh2uVKl0AOs
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.2  Importance,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It’s very important to document your REST APIs. There could be other developers that need to use your APIs or you may have customers that want to use your APIs to help speed up their development time.</p>\n<p class=""chakra-text css-o3oz8b"">Documentation is a good way to communicate to others how they can use your APIs. Documentation communicates the operations available, the format for requesting data and the format data will be returned in.</p>\n<p class=""chakra-text css-o3oz8b"">Typically, the initial creation of documentation is easy, but the on-going maintenance of keeping that documentation up to date is hard. Imagine having to manually update documentation every time your code changes! It\'s good to use tools that automatically inspect your code and update the documentation.</p></div>']",[],https://www.youtube.com/embed/yFYWLriBZrM
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.3  Swagger,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">One of the most popular API documentation specifications is <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md"">OpenApi<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, formerly known as the Swagger Specification.  OpenAPI allows you to describe your API using JSON or YAML. Swagger is the name associated with some of the most well-known, and widely used tools for implementing the OpenAPI specification.  Swagger helps you design, build, document and consume REST APIs. SpringFox is a Swagger integration for the Spring Framework.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Swagger Editor – A browser-based editor where you can write OpenAPI specs.</li><li class=""css-cvpopp"">Swagger UI – A web application that renders OpenAPI specs as interactive API documentation.</li><li class=""css-cvpopp"">Swagger Codegen – A tool that generates server stubs and client libraries from an OpenAPI spec.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which Swagger component displays dynamically generated documentation?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Swagger Codegen</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Swagger UI</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Swagger OpenAPI</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Swagger Editor</p></div>']",[],https://www.youtube.com/embed/iQhT4-7GCJU
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.4  Swagger UI,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Dynamically generated documentation from a Swagger-compliant API is displayed in the Swagger UI, which consists of HTML, JavaScript, and CSS files.  The documentation files are bundled by Swagger UI to display the API in a web browser.</p>\n<p class=""chakra-text css-o3oz8b"">Besides rendering documentation, Swagger UI allows other API developers or consumers to interact with the API’s resources without having any of their implementation logic in place.</p>\n<h5 class=""chakra-heading css-bsa8mb"">Dependencies</h5>\n<pre class=""css-0"">&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n    &lt;version&gt;2.9.2&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n    &lt;version&gt;2.9.2&lt;/version&gt;\n    &lt;scope&gt;compile&lt;/scope&gt;\n&lt;/dependency&gt;\n</pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify THREE potential users of SwaggerUI.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">External developers wanting to use your API</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">End users of your applications</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Internal developers wanting to use your API</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Quality Assurance (QA) testers needing to validate your API</p></div>']",[],https://www.youtube.com/embed/xAQn6pgDqg8
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.5  Swagger Configuration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The configuration of Swagger mainly centers around the Docket bean.</p>\n<pre class=""css-0"">@Configuration\n@EnableSwagger2\n\npublic class SwaggerConfig {\n   @Bean\n   public Docket api() {\n       return new Docket(DocumentationType.SWAGGER_2)\n               .select()\n               .apis(RequestHandlerSelectors.any())\n               .paths(PathSelectors.any())\n               .build();\n   }\n}\n\n</pre>\n<p class=""chakra-text css-o3oz8b"">Swagger also provides some default values in its response that you can customize, such as “Api Documentation”, “Created by Contact Email”, “Apache 2.0”.\nTo change these values, you can use the <code class=""chakra-code css-1u83yg1"">apiInfo(ApiInfo apiInfo)</code> method.</p></div>']",[],https://www.youtube.com/embed/gUdz6elCaCE
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.6  Case Study: Swagger Configuration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The case study to be documented is a REST API that retrieves a list of locations from a database. The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson7-documenting"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">The REST API has the following components:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Controller </strong>- LocationController.java</li><li class=""css-cvpopp""><strong>Service </strong>- LocationService.java and LocationServiceImpl.java</li><li class=""css-cvpopp""><strong>CRUD Repository </strong>- LocationRepository.java</li><li class=""css-cvpopp""><strong>Domain Entity/Model </strong>- Location.java</li><li class=""css-cvpopp""><strong>Swagger Config </strong>- SwaggerConfig.java</li><li class=""css-cvpopp""><strong>H2 Database </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/h2/"">http://localhost:8080/h2/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><strong>Tomcat Server </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080"">http://localhost:8080<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><strong>Swagger UI</strong> via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/swagger-ui.html"">http://localhost:8080/swagger-ui.html<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],https://www.youtube.com/embed/8PQOmdh5bnQ
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.7  Customizing Swagger,[],[],https://www.youtube.com/embed/929vxDvLCUY
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.8  Case Study: Error Messages,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following annotations are used to customize error messages with Swagger?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@ErrorResponses</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@ApiResponses</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@RestControllerResponse</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@GetErrorMapping</code></p></div>']",[],https://www.youtube.com/embed/GHXBLkJYNMg
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.9  Lab: Document Your Dog API,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Reuse your Dog REST API code from Lesson 2 and document it using Swagger.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Step 1:</strong> Add the necessary dependencies to the Maven POM file that include Springfox’s implementation of Swagger.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Step 2:</strong> Configure Swagger using a Docket Bean.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Step 3:</strong> Utilize Swagger UI to review and test your API.</p>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I completed the ""Document Your Dog API"" lab.</p></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.10  Lab Solution: Document Your Dog API,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 2:</strong> Configure Swagger using a Docket Bean.</h3>\n<p class=""chakra-text css-o3oz8b"">Now, I\'ll add a <code class=""chakra-code css-1u83yg1"">config</code> package to my API and add a <code class=""chakra-code css-1u83yg1"">SwaggerConfig</code> class within it. This file can be pretty much the same as the Case Study, although I\'ll alter it so the API Info matches the Dog API. I have not added any custom error messages here, although they can always be useful in your own implementations!</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">udacity</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DogRestApi</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>config</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">context</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Bean</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">context</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Configuration</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">springfox</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">documentation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">builders</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">PathSelectors</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">springfox</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">documentation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">builders</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">RequestHandlerSelectors</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">springfox</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">documentation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">service</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ApiInfo</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">springfox</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">documentation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">service</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Contact</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">springfox</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">documentation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">spi</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DocumentationType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">springfox</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">documentation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">spring</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">web</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">plugins</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Docket</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">springfox</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">documentation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">swagger2</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotations</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">EnableSwagger2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Collections</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Configuration</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@EnableSwagger2</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SwaggerConfig</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Bean</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Docket</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">api</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Docket</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DocumentationType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>SWAGGER_2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">select</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">apis</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">RequestHandlerSelectors</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">any</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">paths</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">PathSelectors</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">any</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">build</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">apiInfo</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">apiInfo</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ApiInfo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">apiInfo</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ApiInfo</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Dog REST API""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""This API returns a list of dogs.""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""1.0""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""http://www.udacity.com/tos""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Contact</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Udacious Student""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""www.udacity.com""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""myeaddress@udacity.com""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""License of API""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""http://www.udacity.com/license""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Collections</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">emptyList</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><strong>Step 3:</strong> Utilize Swagger UI to review and test your API.</h3>\n<p class=""chakra-text css-o3oz8b"">Now, you should be able to head to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/swagger-ui.html#/"">http://localhost:8080/swagger-ui.html#/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> and test out your API.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An example of the Dog REST API Swagger documentation page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Swagger has documented the available GET requests for us</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If you click on one of the available commands for your API, you should be able to <em class=""chakra-text css-o3oz8b"">Try it out</em> and test that it works correctly. Depending on which you test, you may need to provide information (such as the <code class=""chakra-code css-1u83yg1"">id</code> for <code class=""chakra-code css-1u83yg1"">getBreedByID</code>), or be able to immediately <em class=""chakra-text css-o3oz8b"">Execute</em> the query.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An example from an execution of <code class=""chakra-code css-1u83yg1"">getAllDogs</code> in Swagger</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As you can see, automatically documenting your API with Swagger requires only a few lines of code, yet provides some incredibly useful functionality.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Full Solution</h3>\n<p class=""chakra-text css-o3oz8b"">If you\'d like the full solution code all in one place, you can download it through the link below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h5 class=""chakra-heading css-bsa8mb"">Supporting Materials</h5>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2019/August/5d4c7199_documentdogapi/documentdogapi.zip"">DocumentDogApi<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']","['https://video.udacity-data.com/topher/2019/August/5d4c6f9e_java-dog-swagger/java-dog-swagger.png', 'https://video.udacity-data.com/topher/2019/August/5d4c6fd5_java-dog-swagger-get/java-dog-swagger-get.png', 'https://video.udacity-data.com/topher/2019/August/5d4c707f_java-swagger-execute/java-swagger-execute.png']",
Java Web Developer,COURSE 3:Web Services and APIs,Lesson 7: Documentation,7.11  Recap,[],[],https://www.youtube.com/embed/heO_D4rwsnU
Java Web Developer,COURSE 3:Web Services and APIs,Unit & Integration Tests,8.1  Introduction,[],[],https://www.youtube.com/embed/UEIb-ohnLW0
Java Web Developer,COURSE 3:Web Services and APIs,Unit & Integration Tests,8.2  Overview,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Testing gives you confidence that your application is working when you make changes, so you’ll want to introduce automated testing and make testing a normal part of your development process. First, unit test your small piece, then integrate your piece with the other system components to conduct integration testing.</p>\n<h5 class=""chakra-heading css-bsa8mb"">Dependency</h5>\n<pre class=""css-0"">&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</pre>\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Spring-boot-starter-test</code> imports both Spring Boot test modules as well as <code class=""chakra-code css-1u83yg1"">JUnit</code>, <code class=""chakra-code css-1u83yg1"">AssertJ</code>, <code class=""chakra-code css-1u83yg1"">Hamcrest</code>, and a number of other useful libraries.</p></div>']",[],https://www.youtube.com/embed/UVRpUx5zuIs
Java Web Developer,COURSE 3:Web Services and APIs,Unit & Integration Tests,8.3  Unit Testing,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We will first look at unit testing REST APIs using <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/"">JUnit<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://site.mockito.org/"">Mockito<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> and <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/web/servlet/MockMvc.html"">Spring Test<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> (also known as, MockMVC).</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">JUnit is a popular unit testing framework that allows you to test individual units of source code.</li><li class=""css-cvpopp"">Mockito is a great mocking framework which provices data for JUnit tests. </li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">@MockBean</code> works well with the Mockito library.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">@WebMvcTest</code> is used for controller layer unit testing. </li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which component does the @WebMvcTest annotation test?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Controller</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Service</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Data Access</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">User Interface (or View)</p></div>']",[],https://www.youtube.com/embed/X4EQiHQC-_I
Java Web Developer,COURSE 3:Web Services and APIs,Unit & Integration Tests,8.4  Case Study: Unit Testing,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The code can be cloned from <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://gitlab.com/videolearning/udacity-java/tree/master/Lesson8-testing"">GitLab<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<h5 class=""chakra-heading css-bsa8mb"">REST API Components</h5>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Controller </strong>- LocationController.java</li><li class=""css-cvpopp""><strong>Service </strong>- LocationService.java and LocationServiceImpl.java</li><li class=""css-cvpopp""><strong>CRUD Repository </strong>- LocationRepository.java</li><li class=""css-cvpopp""><strong>Domain Entity/Model </strong>- Location.java</li><li class=""css-cvpopp""><strong>H2 Database </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/h2/"">http://localhost:8080/h2/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><strong>Tomcat Server </strong> accessible via <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080"">http://localhost:8080<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul>\n<h5 class=""chakra-heading css-bsa8mb"">Unit Testing Components</h5>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">LocationControllerUnitTest.java</li></ul>\n<h5 class=""chakra-heading css-bsa8mb"">Integration Testing Components</h5>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">LocationControllerIntegrationTest.java</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match the below descriptions to whether they are unit tests or integration tests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Unit</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Integration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Integration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Unit</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Given a test item with an ID of 1, tests whether the <code class=""chakra-code css-1u83yg1"">retrieveLocation()</code> function in the <code class=""chakra-code css-1u83yg1"">locationService</code> correctly returns that item when fed in the related ID.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Uses the IP address and port of the API to check for a success response code when a list of all locations is requested.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Given a dog API and a function <code class=""chakra-code css-1u83yg1"">getBreed()</code>, tests whether that function appropriately returns the breed from a test dog item.</p></div>']",[],https://www.youtube.com/embed/gAUx-H2VTLs
Java Web Developer,COURSE 3:Web Services and APIs,Unit & Integration Tests,8.5  Integration Testing,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Integration testing allows for testing of the entire application (and all of its layers) as opposed to just individual components.</p>\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@SpringBootTest</code> annotation is useful for integration testing and is chosen over <code class=""chakra-code css-1u83yg1"">@WebMvcTest</code> because <code class=""chakra-code css-1u83yg1"">@SpringBootTest</code> starts the full application context (including the server) and does not customize component scanning at all.</p>\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@SpringBootTest</code> will look for the main configuration class, annotated with<code class=""chakra-code css-1u83yg1"">@SpringBootTest</code> and use that to start a Spring application context that simulates a calling client.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which components are tested using the @SpringBootTest annotation?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Controller</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Service</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Data access</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">User Interface (or view)</p></div>']",[],https://www.youtube.com/embed/LXOIVFISNmE
Java Web Developer,COURSE 3:Web Services and APIs,Unit & Integration Tests,8.6  Case Study: Integration Testing,[],[],https://www.youtube.com/embed/NuFStrYCTp4
Java Web Developer,COURSE 3:Web Services and APIs,Unit & Integration Tests,8.7  Lab: Test Your Dog API,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Reuse your Dog REST API code from Lesson 2 and create unit and integration tests for it.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Step 1:</strong> Create a unit test for your API using the <code class=""chakra-code css-1u83yg1"">@WebMvcTest</code> annotation.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Step 2:</strong> Create an integration test for your API using the <code class=""chakra-code css-1u83yg1"">@SpringBootTest</code> annotation.</p>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I completed the ""Test Your Dog API"" lab.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We haven\'t included a solution for this lab due to the many different tests you could possibly add for your API, but make sure to check back in the Case Studies if you need more ideas! You\'ll also get a chance to get creative in the upcoming project for what tests you want to implement.</p></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Unit & Integration Tests,8.8  Recap,[],[],https://www.youtube.com/embed/SVNNtbgbOtI
Java Web Developer,COURSE 3:Web Services and APIs,Unit & Integration Tests,8.9  An Emphasis on Testing & Documentation,[],[],https://www.youtube.com/embed/uKgTF5whmtU
Java Web Developer,COURSE 3:Web Services and APIs,Unit & Integration Tests,8.10  Course Outro,[],[],https://www.youtube.com/embed/qQISqzsE6HY
Java Web Developer,COURSE 3:Web Services and APIs,Build the Backend System for a Car Website,9.1  Introduction,[],['https://video.udacity-data.com/topher/2017/August/598b5e9b_2-5-managing-app-location-with-react-router-2x/2-5-managing-app-location-with-react-router-2x.jpg'],
Java Web Developer,COURSE 3:Web Services and APIs,Build the Backend System for a Car Website,9.2  Location Service Code,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">boogle.maps</code></h3>\n<h5 class=""chakra-heading css-bsa8mb"">Address</h5>\n<p class=""chakra-text css-o3oz8b"">This declares the Address class, primarily just made of the private variables address, city, state and zip. Note that the latitude and longitude <em class=""chakra-text css-o3oz8b"">are not</em> stored here - they come from the Vehicles API.</p>\n<h5 class=""chakra-heading css-bsa8mb"">BoogleMapsApplication</h5>\n<p class=""chakra-text css-o3oz8b"">This launches Boogle Maps as a Spring Boot application.</p>\n<h5 class=""chakra-heading css-bsa8mb"">MapsController</h5>\n<p class=""chakra-text css-o3oz8b"">This is our actual REST controller for the application. This implements what a <code class=""chakra-code css-1u83yg1"">GET</code> request will respond with - in our case, since it is a Mock of a WebService, we are just responding with a random address from the repository.</p>\n<h5 class=""chakra-heading css-bsa8mb"">MockAddressRepository</h5>\n<p class=""chakra-text css-o3oz8b"">Repositories normally provide some type of data persistence while the web service runs. In this case, this Mock is simply choosing a random address from the <code class=""chakra-code css-1u83yg1"">ADDRESSES</code> array defined in the file.</p></div>']",['https://video.udacity-data.com/topher/2018/August/5b73532b_2-9-introduction-to-localization2x/2-9-introduction-to-localization2x.jpg'],
Java Web Developer,COURSE 3:Web Services and APIs,Build the Backend System for a Car Website,9.3  Pricing Service Code,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You\'ll find the code related to our oricing service in the <code class=""chakra-code css-1u83yg1"">pricing-service</code> folder. It serves as a REST WebService that simulates a backend to store and retrieve the price of a given vehicle. In the project, you will convert it to be a microservice registered through a Eureka server.</p>\n<p class=""chakra-text css-o3oz8b"">Let\'s take a quick look through the included files, only certain files of which you will need to implement. Note that every package is within <code class=""chakra-code css-1u83yg1"">com.udacity</code>, so we won\'t include that part of the package name below.</p></div>']",['https://video.udacity-data.com/topher/2018/July/5b50d889_1-2-stock-prices/1-2-stock-prices.jpg'],
Java Web Developer,COURSE 3:Web Services and APIs,Build the Backend System for a Car Website,9.4  Vehicles API Code,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">vehicles</code></h3>\n<h5 class=""chakra-heading css-bsa8mb"">VehiclesApiApplication</h5>\n<p class=""chakra-text css-o3oz8b"">This launches the Vehicles API as a Spring Boot application. Additionally, it initializes a few car manufacturers to place in the <code class=""chakra-code css-1u83yg1"">ManufacturerRepository</code>, as well as creating the web clients to connect to the Maps and Pricing services.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">vehicles.api</code></h3>\n<h5 class=""chakra-heading css-bsa8mb"">API Error</h5>\n<p class=""chakra-text css-o3oz8b"">Declares a few quick methods to return errors and other messages from the Vehicles API.</p>\n<h5 class=""chakra-heading css-bsa8mb"">CarController</h5>\n<p class=""chakra-text css-o3oz8b"">This is our actual REST controller for the application. This implements what happens when GET, POST, PUT and DELETE requests are received (using methods in the <code class=""chakra-code css-1u83yg1"">CarService</code>), and how they are responded to (including formatting with <code class=""chakra-code css-1u83yg1"">CarResourceAssembler</code>). You will implement these methods in your code.</p>\n<h5 class=""chakra-heading css-bsa8mb"">CarResourceAssembler</h5>\n<p class=""chakra-text css-o3oz8b"">This helps mapping the <code class=""chakra-code css-1u83yg1"">CarController</code> to the <code class=""chakra-code css-1u83yg1"">Car</code> class to help return the API response.</p>\n<h5 class=""chakra-heading css-bsa8mb"">ErrorController</h5>\n<p class=""chakra-text css-o3oz8b"">This helps to handle any invalid arguments fed to the API.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">vehicles.client.maps</code></h3>\n<h5 class=""chakra-heading css-bsa8mb"">Address</h5>\n<p class=""chakra-text css-o3oz8b"">Very similar to the <code class=""chakra-code css-1u83yg1"">Address</code> file for <code class=""chakra-code css-1u83yg1"">boogle-maps</code>, this declares a class for use with the <code class=""chakra-code css-1u83yg1"">MapsClient</code>.</p>\n<h5 class=""chakra-heading css-bsa8mb"">MapsClient</h5>\n<p class=""chakra-text css-o3oz8b"">Handles the format of a GET request to the <code class=""chakra-code css-1u83yg1"">boogle-maps</code> WebClient to get location data.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">vehicles.client.prices</code></h3>\n<h5 class=""chakra-heading css-bsa8mb"">Price</h5>\n<p class=""chakra-text css-o3oz8b"">Very similar to the <code class=""chakra-code css-1u83yg1"">Price</code> file for <code class=""chakra-code css-1u83yg1"">pricing-service</code>, this declares a class for use with the <code class=""chakra-code css-1u83yg1"">PriceClient</code>.</p>\n<h5 class=""chakra-heading css-bsa8mb"">PriceClient</h5>\n<p class=""chakra-text css-o3oz8b"">Handles the format of a GET request to the <code class=""chakra-code css-1u83yg1"">pricing-service</code> WebClient to get pricing data.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">vehicles.domain</code></h3>\n<h5 class=""chakra-heading css-bsa8mb"">Condition</h5>\n<p class=""chakra-text css-o3oz8b"">This enumerates the available values for the condition of a car (New or Used).</p>\n<h5 class=""chakra-heading css-bsa8mb"">Location</h5>\n<p class=""chakra-text css-o3oz8b"">This declares information about the location of a vehicle. This is <strong>not</strong> the exact same as the <code class=""chakra-code css-1u83yg1"">Address</code> class used by <code class=""chakra-code css-1u83yg1"">boogle-maps</code> - it\'s primary use is related to the storage of latitude and longitude values. Because the data, such as <code class=""chakra-code css-1u83yg1"">address</code>, gathered from <code class=""chakra-code css-1u83yg1"">boogle-maps</code> is annotated as <code class=""chakra-code css-1u83yg1"">@Transient</code>, this data is not stored until the next time <code class=""chakra-code css-1u83yg1"">boogle-maps</code> is called.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">vehicles.domain.car</code></h3>\n<h5 class=""chakra-heading css-bsa8mb"">Car</h5>\n<p class=""chakra-text css-o3oz8b"">This declares <em class=""chakra-text css-o3oz8b"">certain</em> information about a given vehicle, mostly that more about the car entry itself (such as <code class=""chakra-code css-1u83yg1"">CreatedAt</code>). Note that a separate class, <code class=""chakra-code css-1u83yg1"">Details</code>, also stores additional details about the car that is more specific to things like make, color and model. Note that similar to <code class=""chakra-code css-1u83yg1"">Location</code> with data like <code class=""chakra-code css-1u83yg1"">address</code>, this uses a <code class=""chakra-code css-1u83yg1"">@Transient</code> tag with <code class=""chakra-code css-1u83yg1"">price</code>, meaning the Pricing Service must be called each time a price is desired.</p>\n<h5 class=""chakra-heading css-bsa8mb"">CarRepository</h5>\n<p class=""chakra-text css-o3oz8b"">This repository provide a type of data persistence while the web service runs, primarily related to vehicle information received in the <code class=""chakra-code css-1u83yg1"">CarService</code>.</p>\n<h5 class=""chakra-heading css-bsa8mb"">Details</h5>\n<p class=""chakra-text css-o3oz8b"">Declares additional vehicle details, primarily about the car build itself, such as <code class=""chakra-code css-1u83yg1"">fuelType</code> and <code class=""chakra-code css-1u83yg1"">mileage</code>.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">vehicles.domain.manufacturer</code></h3>\n<h5 class=""chakra-heading css-bsa8mb"">Manufacturer</h5>\n<p class=""chakra-text css-o3oz8b"">This declares the Manufacturer class, primarily just made of a ID code and name of manufacturer.</p>\n<h5 class=""chakra-heading css-bsa8mb"">ManufacturerRepository</h5>\n<p class=""chakra-text css-o3oz8b"">This repository provide a type of data persistence while the web service runs, primarily to store manufacturer information like that initialized in <code class=""chakra-code css-1u83yg1"">VehiclesApiApplication</code>.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">vehicles.domain</code></h3>\n<h5 class=""chakra-heading css-bsa8mb"">CarNotFoundException</h5>\n<p class=""chakra-text css-o3oz8b"">This creates a <code class=""chakra-code css-1u83yg1"">CarNotFoundException</code> that can be thrown when an issue arises in the <code class=""chakra-code css-1u83yg1"">CarService</code>.</p>\n<h5 class=""chakra-heading css-bsa8mb"">CarService</h5>\n<p class=""chakra-text css-o3oz8b"">The Car Service does a lot of the legwork of the code. It can gather either the entire list of vehicles or just a single vehicle by ID (including calls to the maps and pricing web clients). It can also save updated vehicle information. Lastly, it can delete an existing car. All of these are called by the <code class=""chakra-code css-1u83yg1"">CarController</code> based on queries to the REST API. You will implement most of these methods yourself.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">test/../vehicles.api</code></h3>\n<h5 class=""chakra-heading css-bsa8mb"">CarControllerTest</h5>\n<p class=""chakra-text css-o3oz8b"">Here, the various methods performed by the CarController are performed by creating mock calls to the Vehicles API. You will implement some of these methods yourself for great practice in building your own tests.</p></div>']",['https://video.udacity-data.com/topher/2019/July/5d1be0f1_architecture-automobile-cars-63294/architecture-automobile-cars-63294.jpg'],
Java Web Developer,COURSE 3:Web Services and APIs,Build the Backend System for a Car Website,9.5  Instructions,[],[],
Java Web Developer,COURSE 3:Web Services and APIs,Build the Backend System for a Car Website,9.6  Project Rubric,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Pricing Service is converted to a microservice.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Pricing Service API is converted to a microservice with Spring Data REST, without the need to explicitly include code for the Controller or Service.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A Eureka server is used and the Pricing Service is registered with that server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A Eureka server is implemented and running on port 8761. The Pricing Service is registered on that server and is named <code class=""chakra-code css-1u83yg1"">pricing-service</code>.</p>\n<p class=""chakra-text css-o3oz8b"">The Vehicles API should be able to use the Eureka server to call the pricing service.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">At least one additional test is added for the Pricing Service.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Within the <code class=""chakra-code css-1u83yg1"">test</code> folder, at least one additional test has been implemented outside of <code class=""chakra-code css-1u83yg1"">contextLoads()</code>  for the overall Pricing Service Application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can perform CREATE operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API is able to create a new vehicle based on input from the user with a POST request.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can perform READ operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can receive GET requests from a user, and read back either a list of all existing vehicles, or the data for a single vehicle.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can perform UPDATE operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can update an existing vehicle through input from the user.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can perform DELETE operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can delete an existing vehicle when requested by the user.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can request location data from Boogle Maps, and pricing data from the Pricing Service.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API is able to consume information from the separate Boogle Maps and Pricing Service APIs, and return that information as part of the vehicle information for a single vehicle.</p>\n<p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Note:</em> Boogle Maps will assign a new random address each time a query is called, so don\'t fret if it changes between queries.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Tests are implemented for the Vehicles API <code class=""chakra-code css-1u83yg1"">CarController</code> that cover the CRUD (Create, Read, Update, Delete) operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Within the <code class=""chakra-code css-1u83yg1"">CarControllerTest.java</code> file, the <code class=""chakra-code css-1u83yg1"">TODO</code>s for tests  of CRUD operations have been implemented.</p>\n<p class=""chakra-text css-o3oz8b"">You are welcome to add additional tests beyond these as desired!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All necessary dependencies are included in each Application\'s POM files, and the code runs successfully.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All necessary dependencies have been added to the relevant POM files, and the code is able to run both from tests and in launching the actual applications.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">API documentation for the Vehicles API is implemented using Swagger.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">API documentation for the Vehicles API is implemented using Swagger, and all related API queries are able to be run from there. The documentation is available at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/swagger-ui.html"">http://localhost:8080/swagger-ui.html<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> when the application is running.</p>\n<p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Note:</em> You are welcome to add Swagger API documentation for the other APIs, but it is not required.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The Boogle Maps application does not actually store the address assigned to a given vehicle based on latitude and longitude, and instead randomly assigns a new one each time it is called. How could you update this to track which address is assigned to which vehicle? What happens if the vehicle latitude and longitude is updated in the Vehicles API?</li><li class=""css-cvpopp"">The Pricing Service stores prices based on ID, but that ID is not truly assigned to a specific vehicle - if the vehicle is deleted and a new vehicle uses the old ID, the same price is used. How can you update the Pricing Service (and perhaps the Vehicles API) to assign a new (random) price when a vehicle is removed from the Vehicles API?</li><li class=""css-cvpopp"">An additional helpful service after the Vehicles API would be to have an Orders/Sales service when a customer wants to order a vehicle. How would you implement this Orders/Sales API and integrate it with the Vehicles API?</li></ul></div>']",[],
Java Web Developer,COURSE 3:Web Services and APIs,Build the Backend System for a Car Website,9.7  Submit Project,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Pricing Service is converted to a microservice.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, rubric here requires couple of specifications that need to be fulfilled. We need to make use of Spring Data REST here for converting it into a microservice. We are really impressed that you achieved this in one go. Please refer below for more details:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">We need to convert our pricing service API into a microservice using Spring Data REST, for this we need to add some configurations and make calls using clients. This is well achieved. Keep it up pal!</li></ul>\n<p class=""chakra-text css-o3oz8b"">Spring Data REST is a ocean to dive into. I will suggest to refer <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects/spring-data-rest"">Spring Data REST Doc<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> and get deep understanding of it. Thanks.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Pricing Service API is converted to a microservice with Spring Data REST, without the need to explicitly include code for the Controller or Service.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A Eureka server is used and the Pricing Service is registered with that server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, rubric here requires couple of specifications that need to be fulfilled. We need to setup a Eureka Server on port 8761 and register our Pricing API on it. We are really impressed that you achieved this in first attempt. Please refer below for more details:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Eureka Server need to be setup on port 8761. Eureka server serves as a registry server where all our microservices are registered and can be located by other microservices to communicate with.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">We need to make our Pricing API a client of eureka server i.e. we need to register our pricing API on Eureka server. This helps other services to locate our pricing API when they need to communicate. Great work pal!</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">Please refer to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.linkedin.com/advice/0/what-benefits-challenges-using-netflix-eureka-service"">Importance of Eureka For Service Discovery<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details.</p>\n<p class=""chakra-text css-o3oz8b"">Overall kudos for the brilliant work done!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A Eureka server is implemented and running on port 8761. The Pricing Service is registered on that server and is named <code class=""chakra-code css-1u83yg1"">pricing-service</code>.</p>\n<p class=""chakra-text css-o3oz8b"">The Vehicles API should be able to use the Eureka server to call the pricing service.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">At least one additional test is added for the Pricing Service.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, we are required to implement some JUNIT test cases for our pricing API logic. We have seen that you implemented some test cases to coverage as much scenarios as possible. We are really impressed that implemented test cases passed successfully. Please refer below:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">We need to add test cases for PricingController and they should execute successfully. All the scenarios are covered in the implementation. These test cases here to make our program robust. If any changes are done in existing code, then we will be known upfornt. Keep it up pal!</li></ul>\n<p class=""chakra-text css-o3oz8b"">Please refer to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.toptal.com/java/unit-integration-junit-tests"">Importance of Junit<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details.</p>\n<p class=""chakra-text css-o3oz8b"">Overall kudos for the brilliant work done!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Within the <code class=""chakra-code css-1u83yg1"">test</code> folder, at least one additional test has been implemented outside of <code class=""chakra-code css-1u83yg1"">contextLoads()</code>  for the overall Pricing Service Application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can request location data from Boogle Maps, and pricing data from the Pricing Service.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, rubric here requires couple of specifications that need to be fulfilled. We need to consume our boggle maps API and pricing API when we are trying to fetch vehicle details. We are really impressed that this is implemented as per the specifications. Please refer below:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">We need to consume our pricing and boogle maps microservice to render address and price in response. This API consumption is well implemented in course of implementation. This is done using the Service Disccoveries and client created in place.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Overall kudos for the brilliant work done!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API is able to consume information from the separate Boogle Maps and Pricing Service APIs, and return that information as part of the vehicle information for a single vehicle.</p>\n<p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Note:</em> Boogle Maps will assign a new random address each time a query is called, so don\'t fret if it changes between queries.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can perform READ operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, rubric here requires couple of specifications which need to be fulfilled. We need to implement GET endpoint logic to fetch vehicle details based on ids or complete list of vehicles. We are really impressed that you achieved this in one go. Please refer below for more details:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Logic for fetching vehicle details based on the request id parameter is working as per the specifications. All the needed vehicle details with join from respective other tables are also taken care while implementation.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Please refer to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://rapidapi.com/blog/api-glossary/get/"">Significance of GET REST Method<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details.</p>\n<p class=""chakra-text css-o3oz8b"">Overall brilliant work!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can receive GET requests from a user, and read back either a list of all existing vehicles, or the data for a single vehicle.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can perform DELETE operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, rubric here requires couple of specifications that need to be fulfilled. We need to implement DELETE endpoint logic so that vehicle details of specific id is removed from the database. We are really impressed that you achieved this. Please refer below:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">DELETE request is working as per the specifications. Vehicle is removed from the database and appropriate response code is returned in response. All the associated entries present in other tables are also deleted from the DB.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Please refer to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://techalmirah.com/delete-method-in-rest-api/"">Significance of DELETE<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details.</p>\n<p class=""chakra-text css-o3oz8b"">Overall brilliant work!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can delete an existing vehicle when requested by the user.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can perform CREATE operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, rubric here requires couple of specifications that need to be fulfilled. We need to implement logic for our POST endpoint calls to create new vehicles and persist it in database. We are really impressed that this logic is working as per the requirements. Please refer below:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Logic for creating new vehicle is implemented. POST calls are redirected to appropriate service method to persist data for new vehicle in database. Proper status codes are also returned for entity created in DB. Modularisation is kept in mind while implementing these methods.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Please refer to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://rapidapi.com/blog/api-glossary/post/"">Significance of POST REST Method<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details.</p>\n<p class=""chakra-text css-o3oz8b"">Overall brilliant work!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API is able to create a new vehicle based on input from the user with a POST request.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can perform UPDATE operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, rubric here requires couple of specifications that need to be fulfilled. We need to implement some logic that updates vehicles details on executing PUT request. We are really impressed that you worked on the suggestions. Please refer below:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">On running PUT request condition of the vehicle gets updated. This is working as per expectations. All the respective vehicle parameters which are changed in request are reflected in DB as well while performing the operation.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Please refer to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://rapidapi.com/blog/put-vs-patch/"">Significance of PUT<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details.</p>\n<p class=""chakra-text css-o3oz8b"">Overall kudos for the brilliant work done!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Vehicles API can update an existing vehicle through input from the user.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Tests are implemented for the Vehicles API <code class=""chakra-code css-1u83yg1"">CarController</code> that cover the CRUD (Create, Read, Update, Delete) operations.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, rubric here requires that we should implement test cases for all the endpoints defined in CarController.java. We should check for the response is returned with correct status or not. All the test cases should pass successfully. We are really impressed that you achieved all this in first attempt. Please refer below:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Test cases for all the CRUD operations are implemented and are passing successfully. Proper mocking with assertions are added in place. A clear segregation is made between all the CRD operations while implementations. REST codes are also verified while assertions.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Suggestions</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Test should place assertions for all the values returned by the controllers. This is not a requirement but it is a good practice to add one. Thanks.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Within the <code class=""chakra-code css-1u83yg1"">CarControllerTest.java</code> file, the <code class=""chakra-code css-1u83yg1"">TODO</code>s for tests  of CRUD operations have been implemented.</p>\n<p class=""chakra-text css-o3oz8b"">You are welcome to add additional tests beyond these as desired!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All necessary dependencies are included in each Application\'s POM files, and the code runs successfully.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, rubric here requires that our configuration for build tool i.e. pom.xml should be in the way that build passes successfully. We are really impressed that this is achieved. Please refer below:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">All the plugins and dependencies needed for successful project build are added in the file pom.xml. wsdl plugin which can cause build failures are also removed. Keep it up pal!</li></ul>\n<p class=""chakra-text css-o3oz8b"">Please refer to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://maven.apache.org/plugins/maven-dependency-plugin/examples/filtering-the-dependency-tree.html"">Review Dependency Tree<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details to know how we can resolve dependency issues.</p>\n<p class=""chakra-text css-o3oz8b"">Overall kudos for the brilliant work done!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All necessary dependencies have been added to the relevant POM files, and the code is able to run both from tests and in launching the actual applications.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">API documentation for the Vehicles API is implemented using Swagger.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hey, rubric here requires couple of specifications that need to be fulfilled. We need to implement swagger configuration here in place. We will be able to see then all the controller endpoints and also we will be able to make request through it. Documentation of API always plays a great role. We are really impressed that it is working as per expectations. Please refer below:</p>\n<h3 class=""chakra-heading css-k57syw"">Meets Expectations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Configuration required for swagger is added in place. Documentation for all the controller endpoint can be seen through swagger portal and request from swagger is also working as per the specifications. Please refer <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.blazemeter.com/blog/five-reasons-you-should-use-openapi-swagger-for-your-apis/"">Use of Swagger<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details. Great work pal!</li></ul>\n<p class=""chakra-text css-o3oz8b"">Overall kudos for the brilliant work done!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">API documentation for the Vehicles API is implemented using Swagger, and all related API queries are able to be run from there. The documentation is available at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/swagger-ui.html"">http://localhost:8080/swagger-ui.html<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> when the application is running.</p>\n<p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Note:</em> You are welcome to add Swagger API documentation for the other APIs, but it is not required.</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 1: Introduction to Data Stores & Persistence,1.1  Meet Your Instructor,[],[],https://www.youtube.com/embed/rRuxo5DxefY
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 1: Introduction to Data Stores & Persistence,1.2  Introduction to Data Stores and Persistence,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Decisions about Data design can affect your whole application! In this course, you\'ll learn about the different layers in these types of applications and how they apply to Data Stores and Persistence.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Presentation, Application, and Data Layers</strong></p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73dfed_/.png'],https://www.youtube.com/embed/UuCxCPq1Wiw
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 1: Introduction to Data Stores & Persistence,1.3  Persistence for Java Developers,[],[],https://www.youtube.com/embed/9t4NWjPa8mI
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 1: Introduction to Data Stores & Persistence,1.4  Evolution of Data Storage,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Data Stores &amp; Persistence: A Timeline</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">A Short Timeline of Persistence</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>1970</strong>: Relational Databases</li><li class=""css-cvpopp""><strong>1986</strong>: SQL becomes ANSI Standard</li><li class=""css-cvpopp""><strong>2001</strong>: Hibernate 1.0</li><li class=""css-cvpopp""><strong>2006</strong>: Java Persistence API 1.0</li><li class=""css-cvpopp""><strong>2009</strong>: JPA 2.0</li><li class=""css-cvpopp""><strong>2010</strong>: Hibernate 3.0 conforms to JPA Specification</li><li class=""css-cvpopp""><strong>Today!</strong>: Hibernate 5.4.x and Jakarta Persistence 2.2</li></ul></div>']",['https://video.udacity-data.com/topher/2020/April/5ea08c65_screen-shot-2020-04-22-at-11.19.21-am/screen-shot-2020-04-22-at-11.19.21-am.png'],https://www.youtube.com/embed/r4FA5EZaOlY
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 1: Introduction to Data Stores & Persistence,1.5  Relevant Tools,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We\'ll be using the following tools:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">IntelliJ IDEA</li><li class=""css-cvpopp"">Maven</li><li class=""css-cvpopp"">Git</li><li class=""css-cvpopp"">MySQL</li><li class=""css-cvpopp"">Postman</li></ul></div>']",[],https://www.youtube.com/embed/ahWzJW6qKMw
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 1: Introduction to Data Stores & Persistence,1.6  Project: Critter Chronologer,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For the final project in this course, we’ll be creating the Critter Chronologer, a software as a service application that provides a scheduling interface for small businesses that take care of animals. We’ll allow users to create schedules that associate pets, owners, and employees for a pet-care event on a specified date.</p>\n<p class=""chakra-text css-o3oz8b"">This application will store all the relevant data in a MySQL Database and allow a predefined controller layer to send and receive updates. You’ll have to design all the data objects on the back end and create the data and service layers to update and retrieve them.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Any Time Now…</em></p></div>']",['https://video.udacity-data.com/topher/2020/April/5e9631ab_cat/cat.jpg'],https://www.youtube.com/embed/7kzI6JBc_Cc
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 1: Introduction to Data Stores & Persistence,1.7  Course Outline,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Course Outline</strong></p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e00e_screen-shot-2020-03-19-at-12.52.56-pm/screen-shot-2020-03-19-at-12.52.56-pm.png'],https://www.youtube.com/embed/OK44hY6ma40
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.1  Introduction to Data in Multitier Architecture,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Multitier Architecture</strong> is a term used to refer to a form of design that separates various functions of the application into their own layers. In this course, we’ll focus on how data in our application is defined and used across these layers.</p>\n<p class=""chakra-text css-o3oz8b"">Entities are used to negotiate between:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The <strong>object</strong> representation of data in <strong>Java</strong>.</li><li class=""css-cvpopp"">The <strong>table</strong> representation of data in a <strong>database</strong>.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>You are <em class=""chakra-text css-o3oz8b"">Here</em></strong></p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e291_screen-shot-2020-03-19-at-12.56.28-pm/screen-shot-2020-03-19-at-12.56.28-pm.png'],https://www.youtube.com/embed/YcfmFY-iUpI
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.2  Entities Exercise 0,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Follow the steps in the task list to create a new Spring Boot application and create the following controller class:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">web</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">bind</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">annotation</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@RestController</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@RequestMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/test""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TestController</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@GetMapping</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Data Structures and Persistence are pretty good.""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Set up a new Spring Boot project:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Navigate to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://start.spring.io/"">start.spring.io<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add dependencies: Spring Web, Spring Data JPA, H2 Database.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download and extract project folder.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the folder in IntelliJ as a project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Confirm you can run DemoApplication.java as a Spring Boot application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a new class called TestController and copy in the code above.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Relaunch your application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Navigate to the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://getpostman.com/downloads"">Postman download page<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download the correct version for your OS.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run the installer.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Click the +New button in the top left and create a new Request.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Send a GET request to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/test"">http://localhost:8080/test<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> while your application is running and confirm that you get a response.</p></div>']",[],https://www.youtube.com/embed/OkGpLJZaRk8
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.3  Entity Design Overview,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Programs can represent all kinds of ideas, so the tools we use to describe our data must be flexible. The variables, which are the building blocks of our Entities, are like words that can mean different things to different people. We will use Entities to communicate ideas to our database.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Translating Ideas Between Domains</strong></p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e30e_screen-shot-2020-03-19-at-2.21.22-pm/screen-shot-2020-03-19-at-2.21.22-pm.png'],https://www.youtube.com/embed/mHCXuDeXQeI
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.4  Values vs. Entity Types,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">POJO or ""Plain Old Java Object""</h3>\n<p class=""chakra-text css-o3oz8b"">A Java object that contains data, but no methods to describe behavior.</p>\n<h3 class=""chakra-heading css-k57syw"">Entity Types</h3>\n<p class=""chakra-text css-o3oz8b"">Java classes that describe a collection of data.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Contain Data only, no behavior</li><li class=""css-cvpopp"">Represented by a table in the database</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Value Types</h3>\n<p class=""chakra-text css-o3oz8b"">The data inside an Entity.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Primitives like int, boolean, char</li><li class=""css-cvpopp"">Classes that only represent a single piece of data, like BigInteger or LocalDate</li><li class=""css-cvpopp"">Represented by a column in the database</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">@Entity and @Table Annotations</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>@Entity and @Table Annotations Example</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To identify which Java classes we wish to consider as Entities, we added the <code class=""chakra-code css-1u83yg1"">@Entity</code> annotation before the class name. This informs Hibernate that this class should be stored in the database. Each Entity class will be associated with a table of the same name, or you can specify your own table name using the <code class=""chakra-code css-1u83yg1"">@Table</code> annotation at the class level. The attributes of the classes automatically become columns of the same name, and we can change the names and properties of the columns with the <code class=""chakra-code css-1u83yg1"">@Column</code> annotation.</p>\n<p class=""chakra-text css-o3oz8b"">As we can see in this example, we’ve added the <code class=""chakra-code css-1u83yg1"">@Entity</code> annotation to our <code class=""chakra-code css-1u83yg1"">Person</code> class, and we have specified that the <code class=""chakra-code css-1u83yg1"">favoriteComposer</code> field should be stored in a column called “composer”.</p>\n<p class=""chakra-text css-o3oz8b"">One additional point to remember about Entity classes is that they must provide a public or protected no-arg constructor. Java automatically creates one for you if no constructor is specified, but if you create one or more of your own constructors for the class, you’ll also have to make sure to include a no-arg version as well.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the below fields are Entity Types?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">String name;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Person neighbor;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Long millis;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Elephant elephant;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">boolean isPurple;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">BigDecimal averageSpeed;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the below fields are Value Types?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">int numCatsAllowed;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Cat primaryCat;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">LocalDateTime exactTimeToFeedCat;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">String name;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Food catfood;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For additional details on mapping types, see the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#mapping-types"">official Hibernate documentation on mapping types<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e35c_screen-shot-2020-03-19-at-2.22.48-pm/screen-shot-2020-03-19-at-2.22.48-pm.png'],https://www.youtube.com/embed/FsHP3y-BG4Y
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.5  Basic Types,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Basic Types</h3>\n<p class=""chakra-text css-o3oz8b"">Basic Types map a single database column to a single, non-aggregated Java type. Here are some examples of basic types:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57"">Java</th><th class=""css-zl9m57"">JDBC</th><th class=""css-zl9m57"">Hibernate type</th><th class=""css-zl9m57"">Registry Key</th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">java.lang.String</td><td class=""css-1eywhk4"">VARCHAR</td><td class=""css-1eywhk4"">StringType</td><td class=""css-1eywhk4"">string</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">java.lang.String</td><td class=""css-1eywhk4"">NVARCHAR</td><td class=""css-1eywhk4"">StringNVarcharType</td><td class=""css-1eywhk4"">nstring</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">int, java.lang.Integer</td><td class=""css-1eywhk4"">INTEGER</td><td class=""css-1eywhk4"">IntegerTypes</td><td class=""css-1eywhk4"">int</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">long, java.lang.Long</td><td class=""css-1eywhk4"">BIGINT</td><td class=""css-1eywhk4"">LongType</td><td class=""css-1eywhk4"">long</td></tr></tbody></table></div>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#basic"">Full List of Hibernate standard BasicTypes<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">Hibernate selects default BasicTypes for you, but you can override by specifying the @Type annotation, as below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>An Example of using the <code class=""chakra-code css-1u83yg1"">@Type</code> Annotation to Force a Typing</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Each BasicType should only map a single value to a single column in the database. Do not attempt to serialize objects or lists of primitives into a single column. Doing so violates First Normal Form of database design, preventing standard relational functioning.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Basic Types should Map to Single Values, not Composite Values</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Serialization</h3>\n<p class=""chakra-text css-o3oz8b"">Transforming your data into a format that can be stored and reconstructed later.</p>\n<h3 class=""chakra-heading css-k57syw"">First Normal form</h3>\n<p class=""chakra-text css-o3oz8b"">Each attribute of a table contains only <strong>atomic</strong> values.</p>\n<h3 class=""chakra-heading css-k57syw"">Atomic</h3>\n<p class=""chakra-text css-o3oz8b"">Representing a single piece of data; indivisible.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What is the default database column type that Hibernate will choose for storing Java String objects?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">NVARCHAR</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">VARCHAR</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">BIT</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CLOB</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select all the JDBC Types that Hibernate knows how to use to store a Java boolean.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">VARCHAR</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CHAR</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">INTEGER</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">BIGINT</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">BOOLEAN</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">BLOB</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select the correct Java Type to map to a SQL column of JDBC type DATE.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">String</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">java.util.Calendar</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">java.time.LocalDate</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">java.time.LocalDateTime</p></div>']","['https://video.udacity-data.com/topher/2020/March/5e73e3c7_screen-shot-2020-03-19-at-2.24.14-pm/screen-shot-2020-03-19-at-2.24.14-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e73e44d_screen-shot-2020-03-19-at-2.25.54-pm/screen-shot-2020-03-19-at-2.25.54-pm.png']",https://www.youtube.com/embed/Zgxutge1bH0
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.6  Identifiers,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All Entities must define an identifier that uniquely identifies them. We express this by using the <code class=""chakra-code css-1u83yg1"">@Id</code> annotation.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>public class Person {\n    @Id\n    @GeneratedValue\n    Long id;\n   / *rest of class* /\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Valid identifier types are:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Any Java primitive type</li><li class=""css-cvpopp"">Any primitive wrapper type (like <code class=""chakra-code css-1u83yg1"">Long</code>, or <code class=""chakra-code css-1u83yg1"">Boolean</code>)</li><li class=""css-cvpopp"">A <code class=""chakra-code css-1u83yg1"">String</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">java.sql.Date</code> or <code class=""chakra-code css-1u83yg1"">java.util.Date</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">java.math.BigDecimal</code> or <code class=""chakra-code css-1u83yg1"">java.math.BigInteger</code></li></ul>\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@GeneratedValue</code> annotation causes this value to be assigned automatically. For more information about modifying the Id Generation strategy, see the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-generators"">Hibernate Documentation on Generated Ids<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/urizLUMjgbA
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.7  Entities Exercise 1,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following steps:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a <code class=""chakra-code css-1u83yg1"">Flower</code> Entity with a <code class=""chakra-code css-1u83yg1"">Long</code> id.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add the name, color, and price attributes to <code class=""chakra-code css-1u83yg1"">Flower</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a <code class=""chakra-code css-1u83yg1"">Delivery</code> Entity with a <code class=""chakra-code css-1u83yg1"">Long</code> id.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add recipient name, address, delivery time, and completed attributes to <code class=""chakra-code css-1u83yg1"">Delivery</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use the annotations you’ve learned so far to modify the attribute definitions to meet the exercise requirements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add relevant getters and setters to your classes.</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.8  Solution: Entities Exercise 1,[],[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.9  Composite Identifiers,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@IdClass</code> annotation allows you to specify a composite primary key by shadowing the fields of your key class in the Entity. This can be useful if you must use an object as a primary key that cannot be <code class=""chakra-code css-1u83yg1"">@Embeddable</code>.</p>\n<h3 class=""chakra-heading css-k57syw"">PersonPK.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public class PersonPK implements Serializable {\n</span>   private int heightCm;\n   private String sockColor;\n\n   @Override\n   public boolean equals(Object o) {...}\n\n   @Override\n   public int hashCode() {...}\n   / *getters and setters*/\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Person.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>@IdClass(PersonPK.class)\npublic class Person {\n   @Id\n   private int heightCm;\n   @Id\n   private String sockColor;\n\n   public PersonPK getId() {\n       PersonPK id = new PersonPK();\n       id.setHeightCm(heightCm);\n       id.setSockColor(sockColor);\n       return id;\n   }\n\n   public void setId(PersonPK id) {\n       this.heightCm = id.getHeightCm();\n       this.sockColor = id.getSockColor();\n   }\n   / *getters and setters* /\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Comparison of <code class=""chakra-code css-1u83yg1"">@Embeddable</code> and <code class=""chakra-code css-1u83yg1"">@IdClass</code> Composite Keys</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Where do <code class=""chakra-code css-1u83yg1"">@Embeddable</code> and <code class=""chakra-code css-1u83yg1"">@IdClass</code> Composite Keys get stored?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Fields in the @Embeddable identifier are stored in the <strong>same</strong> table as the rest of the Entity, but @IdClass fields are stored <strong>separately</strong>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Fields in the @IdClass are stored in the <strong>same</strong> table as the rest of the Entity, but @Embeddable fields are stored <strong>separately</strong>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Fields for both types of composite key are stored in the <strong>same</strong> table as the rest of the Entity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Fields for both types of composite key are stored in a <strong>separate</strong> table from the rest of the entity..</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite"">Hibernate documentation on Composite Keys<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e4c2_screen-shot-2020-03-19-at-2.28.25-pm/screen-shot-2020-03-19-at-2.28.25-pm.png'],https://www.youtube.com/embed/o-7P7vBO7LQ
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.10  Relationships,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>OneToOne Data Contained in Parent Table</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Ways to Associate Data</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Value Types</strong>: Become single columns in containing Entity’s table.</li><li class=""css-cvpopp""><strong>Embeddables</strong>: Add their attributes as columns in the containing Entity’s table.</li><li class=""css-cvpopp""><strong>Entities</strong>: Become new tables which relate to a containing entity by a <strong>Join Column</strong>.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Association Reciprocity</h3>\n<p class=""chakra-text css-o3oz8b""><strong>Unidirectional</strong> - Association specified on one side of the relationship only.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Doesn\'t retrieve data you won’t use.</li><li class=""css-cvpopp"">Should use Set collection type for most efficient SQL.</li></ul>\n<p class=""chakra-text css-o3oz8b""><strong>Bidirectional</strong> - Association specified on both sides of the relationship. Use <code class=""chakra-code css-1u83yg1"">mappedBy</code> on the containing Entity side.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Access both sides of relationship with a single query.</li><li class=""css-cvpopp"">Hibernate recommends for <code class=""chakra-code css-1u83yg1"">@OneToMany</code>, because it allows the foreign key constraint to exist only on the table of the contained object.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Types of Entity Associations</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>OneToOne</strong>: Single Entity on each side of the relationship.</li><li class=""css-cvpopp""><strong>OneToMany</strong> and <strong>ManyToOne</strong>: List of Entities on one side, single Entity on the other.</li><li class=""css-cvpopp""><strong>ManyToMany</strong>: Lists of Entities on both sides.</li></ul>\n<p class=""chakra-text css-o3oz8b"">We\'ll discuss these more in a later section!</p></div>']",['https://video.udacity-data.com/topher/2020/April/5ea0a1c7_screen-shot-2020-04-22-at-12.56.42-pm/screen-shot-2020-04-22-at-12.56.42-pm.png'],https://www.youtube.com/embed/I7PBM3BAOxI
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.11  Entity Relationships,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Association Types</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Unidirectional</h3>\n<p class=""chakra-text css-o3oz8b"">You only need to specify the Entity on a single side of the relationship. For Example, this is the Person class showing a unidirectional <code class=""chakra-code css-1u83yg1"">@OneToMany</code> relationship to Outfit.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>public class Person {\n   @Id\n   @GeneratedValue\n   private Long id;\n\n   @OneToMany\n   private List&lt;Outfit&gt; outfits;\n\n   / *rest of class* /\n}\n\n@Entity\npublic class Outfit {\n   @Id\n   @GeneratedValue\n   private Long id;\n\n   / *rest of class* /\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Bidirectional</h3>\n<p class=""chakra-text css-o3oz8b"">Both classes have a reference to each other. Here is a bidirectional OneToMany relationship showing that one person has many outfits, and each outfit has one person.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>public class Person {\n   @Id\n   @GeneratedValue\n   private Long id;\n\n   @OneToMany(mappedBy = ""person"")\n   private List&lt;Outfit&gt; outfits;\n\n   / *rest of class* /\n}\n\n@Entity\npublic class Outfit {\n   @Id\n   @GeneratedValue\n   private Long id;\n  \n   @ManyToOne\n   private Person person;\n\n   / *rest of class* /\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">@JoinTable</h3>\n<p class=""chakra-text css-o3oz8b"">Many associations can be stored in a single @JoinColumn on one of the two entity tables, but you may also elect to store the relationship in a table designated for that purpose. <code class=""chakra-code css-1u83yg1"">@ManyToMany</code> relationships must use a Join Table, and will automatically create one even if not specified.</p>\n<p class=""chakra-text css-o3oz8b"">To control the name of the table and its columns, you can use the <code class=""chakra-code css-1u83yg1"">@JoinColumn</code> annotation.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>public class Person {\n   @Id\n   @GeneratedValue\n   private Long id;\n\n   @ManyToMany\n   @JoinTable(\n      name = ""person_outfit"",\n      joinColumns = { @JoinColumn(name = ""person_id"")},\n      inverseJoinColumns = { @JoinColumn(name = ""outfit_id"")}\n   )\n   private List&lt;Outfit&gt; outfits;\n\n   / *rest of class* /\n}\n</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">@ElementCollection</h3>\n<p class=""chakra-text css-o3oz8b"">You can use the <code class=""chakra-code css-1u83yg1"">@ElementCollection</code> annotation to denote an association between a single Entity and a list of values that are not themselves Entities. This annotation lets you persist Lists of Embeddables or enums, for example. These embeddables will be stored in a separate table, along with the id of the Entity in which they are contained.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>public class Person {\n   @Id\n   @GeneratedValue\n   private Long id;\n\n   @ElementCollection\n   private List&lt;Outfit&gt; outfits;\n\n   / *rest of class* /\n}\n\n@Embeddable\npublic class Outfit {\n   private String hat;\n   private String gloves;\n   private String shoes;\n   private String legs;\n   private String top;\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following can describe the relationship of an <strong>Entity</strong> to an <strong>ElementCollection</strong>?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">One Entity to One Value</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">One Entity to One Embeddable</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">One Entity to One Entity</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">One Entity to Many Values</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">One Entity to Many Embeddables</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">One Entity to Many Entities</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which annotations could you apply to the following List of Outfit Entities?</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>private class Person {\n</span>   @Id\n   @GeneratedValue\n   private Long id;\n\n   private List&lt;Outfit&gt; outfits;\n}```</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">@OneToOne</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">@OneToMany</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">@ManyToOne</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">@ManyToMany</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations"">Hibernate User Guide on Associations<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e4f9_screen-shot-2020-03-19-at-2.29.57-pm/screen-shot-2020-03-19-at-2.29.57-pm.png'],https://www.youtube.com/embed/jUPoWNXzfms
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.12  Single Table Inheritance,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Inheritance</h3>\n<p class=""chakra-text css-o3oz8b"">Inheritance is a way to share data and associations across multiple related classes. This is an example of sharing the association from <code class=""chakra-code css-1u83yg1"">Person</code> to <code class=""chakra-code css-1u83yg1"">Outfit</code> with another class by creating a <code class=""chakra-code css-1u83yg1"">Humanoid</code> parent class.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>public abstract class Humanoid {\n   @Id\n   @GeneratedValue\n   Long id;\n\n   @OneToMany(mappedBy = ""humanoid"")\n   List&lt;Outfit&gt; outfits;\n\n   / *getters and setters* /\n}\n\n@Entity\npublic class Person extends Humanoid {\n\n   @Type(type=""nstring"")\n   private String name;\n   private int age;\n   @Column(name=""composer"", length=512)\n   private String favoriteComposer;\n\n   / *getters and setters* /\n}\n\n@Entity\npublic class CreepyDepartmentStoreMannequin extends Humanoid {\n\n   private boolean hasAHead;\n   private MannequinShape mannequinShape;\n\n   enum MannequinShape {\n       LITHE, MUSCULUR, UNASSUMING;\n   }\n\n    / *getters and setters* /\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Single Table Inheritance</h3>\n<p class=""chakra-text css-o3oz8b"">The default inheritance strategy used by Hibernate is Single Table inheritance. All the fields of the parent and children classes are stored in the same table. Allows the fastest polymorphic queries because no tables need to be joined to access all subclasses. Cannot support Not Null column constraints because columns must be able to contain null for sibling classes.</p>\n<h3 class=""chakra-heading css-k57syw"">Polymorphic Query</h3>\n<p class=""chakra-text css-o3oz8b"">A query for the parent class that returns elements of all subclass types.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Single Table Inheritance</strong></p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e546_screen-shot-2020-03-19-at-2.31.14-pm/screen-shot-2020-03-19-at-2.31.14-pm.png'],https://www.youtube.com/embed/GOaxQvmx7Hw
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.13  Other Inheritance Strategies,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You can specify other inheritance strategies using the <code class=""chakra-code css-1u83yg1"">@Inheritance</code> annotation on the parent class. The valid choices are <code class=""chakra-code css-1u83yg1"">InheritanceType.SINGLE_TABLE</code>,\n<code class=""chakra-code css-1u83yg1"">InheritanceType.JOINED</code>, and <code class=""chakra-code css-1u83yg1"">InheritanceType.TABLE_PER_CLASS</code>.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>@Inheritance(strategy = InheritanceType.JOINED)\npublic class Humanoid {\n   @Id\n   @GeneratedValue\n   Long id;\n\n   @OneToMany(mappedBy = ""humanoid"")\n   List&lt;Outfit&gt; outfits;\n\n   / *getters and setters* /\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">JOINED</h3>\n<p class=""chakra-text css-o3oz8b"">Creates a table for the parent class and each subclass. The subclass tables only have fields unique to their class. Supports polymorphic queries by UNIONing subclass tables. Uses the least space of the solutions that allow Not Null columns.</p>\n<h3 class=""chakra-heading css-k57syw"">TABLE_PER_CLASS</h3>\n<p class=""chakra-text css-o3oz8b"">Creates a table for the parent class and each subclass. The subclass tables have all fields from the parent class as well as fields unique to their class. Supports polymorphic queries by UNIONing subclass tables, but does not require any UNION to access superclass fields on non-polymorphic queries.</p>\n<h3 class=""chakra-heading css-k57syw"">Mapped Superclass</h3>\n<p class=""chakra-text css-o3oz8b"">This is selected by using the <code class=""chakra-code css-1u83yg1"">@MappedSuperclass</code> annotation on the parent class instead of <code class=""chakra-code css-1u83yg1"">@Entity</code>. It creates a table per class just like TABLE_PER_CLASS, but there is no superclass table. It does not support polymorphic queries, but never requires UNIONS to query subclasses.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Joined and Table Per Class Inheritance Strategies</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What is the best Inheritance strategy if you require polymorphic queries and need to support ‘not null’ constraints?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Single Table</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Joined</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">TABLE_PER_CLASS</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Mapped Superclass</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which Inheritance strategy offers the best performance on polymorphic queries?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Single Table</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Joined</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">TABLE_PER_CLASS</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Mapped Superclass</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which strategy should you choose if you do not expect to use polymorphic queries but want to be able to if you need to in the future?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Single Table</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Joined</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">TABLE_PER_CLASS</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Mapped Superclass</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#entity-inheritance"">Hibernate documentation on Inheritance<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e571_screen-shot-2020-03-19-at-2.31.56-pm/screen-shot-2020-03-19-at-2.31.56-pm.png'],https://www.youtube.com/embed/m1yj6qbmEuQ
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.14  Entities Exercise 2,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following steps:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a <code class=""chakra-code css-1u83yg1"">Plant</code> Entity. Create subclasses <code class=""chakra-code css-1u83yg1"">Shrub</code> and <code class=""chakra-code css-1u83yg1"">Flower</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Move id, name, and price into the <code class=""chakra-code css-1u83yg1"">Plant</code> class.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add height and width to <code class=""chakra-code css-1u83yg1"">Shrub</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use an inheritance strategy that stores all shared data in the ‘plant’ table and all unique data in other tables.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a <code class=""chakra-code css-1u83yg1"">List</code> to <code class=""chakra-code css-1u83yg1"">Delivery</code> to store flowers and shrubs.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Establish a bidirectional relationship between <code class=""chakra-code css-1u83yg1"">Delivery</code> and store it in the ‘plant’ table in a column called ‘delivery_id’.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add and update getter and setter methods.</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.15  Solution: Entities Exercise 2,[],[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.16  Entities in Multitier Architecture,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Entity Role in Multitier Architecture</h3>\n<p class=""chakra-text css-o3oz8b"">Entities belong in the Data layer, as their primary role is bridging the communication between our Application layer and the database. They also serve as components of business logic, making them relevant components in our controller and service layers.</p>\n<p class=""chakra-text css-o3oz8b"">The Application layer should not communicate with the database, and the Data layer should not execute business logic.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Entity Visibility in Multitier Architecture</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Multitier Architecture Advantages</h3>\n<h4 class=""chakra-heading css-1dlhxqh"">Maintenance</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Centralizes access to your data source</li><li class=""css-cvpopp"">Reduces time needed to make changes to Entity interactions</li><li class=""css-cvpopp"">Reduces amount of code each developer needs to understand</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">Performance</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Allows application layers to easily be separated into modules</li><li class=""css-cvpopp"">Reduces application size</li><li class=""css-cvpopp"">Enables scaling of independent components</li><li class=""css-cvpopp"">Supports future architecture deployment</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">Security</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Able to secure each tier with different permissions</li><li class=""css-cvpopp"">Reduces redundant authentication in other tiers</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which part of application should contain your Entity definitions?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Front End</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Controller Layer</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application/Service Layer</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Data/Repository Layer</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Database</p></div>']",['https://video.udacity-data.com/topher/2020/April/5ea0bdfd_screen-shot-2020-04-22-at-2.33.38-pm/screen-shot-2020-04-22-at-2.33.38-pm.png'],https://www.youtube.com/embed/RvxKl94xqhw
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.17  Data Conversion,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Data Transfer Objects (DTOs)</h3>\n<p class=""chakra-text css-o3oz8b"">Data structures designed to represent the needs of the front end.</p>\n<h3 class=""chakra-heading css-k57syw"">DTO Summary</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Simplify and document interaction between front end and Controller.</li><li class=""css-cvpopp"">Conceal database structures.</li><li class=""css-cvpopp"">Limit the amount of data exchanged.</li><li class=""css-cvpopp"">Customize display data to meet the needs of the front end.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">JSONView Demo</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Differences between DTO and <code class=""chakra-code css-1u83yg1"">@JSONView</code></strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">JSONView Annotations</h3>\n<p class=""chakra-text css-o3oz8b"">Annotation that filters which Entity data is visible to the Presentation layer.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">@JSONView</code> Summary</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Quickly specify which parts of Entities should be visible to which consumer.</li><li class=""css-cvpopp"">Often a simple choice when controlling full stack.</li><li class=""css-cvpopp"">Not as helpful when you need to combine data from multiple Entities.</li><li class=""css-cvpopp"">Can require Entity updates if front end needs change.</li><li class=""css-cvpopp"">Often grouped together in a Views class, containing interfaces such as ‘Public’, ‘Private’, or interfaces named for specific endpoint recipients.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Below is a list of scenarios. Check each entry that should have DTOs created and leave blank each entry that you think should use <code class=""chakra-code css-1u83yg1"">@JSONView</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Your front end is maintained by a team of web developers and your back end is managed by DBAs.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You’re trying to quickly prototype a full-stack application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Your front end is a single-page application that requires data from multiple entities.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Your legacy application Entities are extremely large.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Your Entities match your front end but contain some sensitive information.</p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e78c_screen-shot-2020-03-19-at-2.40.14-pm/screen-shot-2020-03-19-at-2.40.14-pm.png'],https://www.youtube.com/embed/wpA1ahs1IF8
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.18  Entities Exercise 3,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following tasks.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create<code class=""chakra-code css-1u83yg1""> PlantService.java</code> and <code class=""chakra-code css-1u83yg1"">PlantController.java</code> using the above code.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a class called <code class=""chakra-code css-1u83yg1"">PlantDTO</code> that contains name and price variables.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Modify the <code class=""chakra-code css-1u83yg1"">PlantController</code> class to convert the Plant Entity into a <code class=""chakra-code css-1u83yg1"">PlantDTO</code> and return that from the <code class=""chakra-code css-1u83yg1"">getPlantDTO</code> method.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a new class called <code class=""chakra-code css-1u83yg1"">Views</code>. Create an interface in that class called <code class=""chakra-code css-1u83yg1"">Public</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use the <code class=""chakra-code css-1u83yg1"">@JSONView</code> annotation in <code class=""chakra-code css-1u83yg1"">Plant.java</code> and <code class=""chakra-code css-1u83yg1"">PlantController.java</code> so that <code class=""chakra-code css-1u83yg1"">getFilteredPlant</code> only returns name and price.</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.19  Solution: Entities Exercise 3,[],[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 2: Data in Multitier Architecture,2.20  Data in Multitier Architecture Recap,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Glossary</h3>\n<h4 class=""chakra-heading css-1dlhxqh"">Multitier Architecture</h4>\n<p class=""chakra-text css-o3oz8b"">Refers to a form of design that separates various functions of the application into their own layers.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Java Persistence API (JPA)</h4>\n<p class=""chakra-text css-o3oz8b"">A specification describing how to manage relational data.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Hibernate</h4>\n<p class=""chakra-text css-o3oz8b"">An implementation of the JPA Specification. You can access <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://hibernate.org/orm/"">Hibernate’s documentation page here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">POJO or ""Plain Old Java Object""</h4>\n<p class=""chakra-text css-o3oz8b"">A Java object that contains data, but no methods to describe behavior.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Entity Types</h4>\n<p class=""chakra-text css-o3oz8b"">Java classes that describe a collection of data.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Contain Data only, no behavior</li><li class=""css-cvpopp"">Represented by a table in the database</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">Value Types</h4>\n<p class=""chakra-text css-o3oz8b"">The data inside an Entity.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Primitives like int, boolean, char</li><li class=""css-cvpopp"">Classes that only represent a single piece of data, like BigInteger or LocalDate</li><li class=""css-cvpopp"">Represented by a column in the database</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">Basic Types</h4>\n<p class=""chakra-text css-o3oz8b"">Basic Types map a single database column to a single, non-aggregated Java type.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Serialization</h4>\n<p class=""chakra-text css-o3oz8b"">Transforming your data into a format that can be stored and reconstructed later.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">First Normal form</h4>\n<p class=""chakra-text css-o3oz8b"">Each attribute of a table contains only <strong>atomic</strong> values.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Atomic</h4>\n<p class=""chakra-text css-o3oz8b"">Representing a single piece of data; indivisible.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Embeddables</h4>\n<p class=""chakra-text css-o3oz8b"">Add their attributes as columns in the containing Entity’s table.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Entities</h4>\n<p class=""chakra-text css-o3oz8b"">Become new tables which relate to a containing entity by a <strong>Join Column</strong>.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Unidirectional</h4>\n<p class=""chakra-text css-o3oz8b"">Association specified on one side of the relationship only.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Doesn\'t retrieve data you won’t use.</li><li class=""css-cvpopp"">Should use Set collection type for most efficient SQL.</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">Bidirectional</h4>\n<p class=""chakra-text css-o3oz8b"">Association specified on both sides of the relationship. Use <code class=""chakra-code css-1u83yg1"">mappedBy</code> on the containing Entity side.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Access both sides of relationship with a single query.</li><li class=""css-cvpopp"">Hibernate recommends for <code class=""chakra-code css-1u83yg1"">@OneToMany</code>, because it allows the foreign key constraint to exist only on the table of the contained object.</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">OneToOne</h4>\n<p class=""chakra-text css-o3oz8b"">Single Entity on each side of the relationship.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">OneToMany and ManyToOne</h4>\n<p class=""chakra-text css-o3oz8b"">List of Entities on one side, single Entity on the other.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">ManyToMany</h4>\n<p class=""chakra-text css-o3oz8b"">Lists of Entities on both sides.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Inheritance</h4>\n<p class=""chakra-text css-o3oz8b"">Inheritance is a way to share data and associations across multiple related classes.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Single Table Inheritance</h4>\n<p class=""chakra-text css-o3oz8b"">The default inheritance strategy used by Hibernate. All the fields of the parent and children classes are stored in the same table. Allows the fastest polymorphic queries because no tables need to be joined to access all subclasses. Cannot support Not Null column constraints because columns must be able to contain null for sibling classes.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Polymorphic Query</h4>\n<p class=""chakra-text css-o3oz8b"">A query for the parent class that returns elements of all subclass types.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Joined Inheritance</h4>\n<p class=""chakra-text css-o3oz8b"">Creates a table for the parent class and each subclass. The subclass tables only have fields unique to their class. Supports polymorphic queries by UNIONing subclass tables. Uses the least space of the solutions that allow Not Null columns.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Table Per Class Inheritance</h4>\n<p class=""chakra-text css-o3oz8b"">Creates a table for the parent class and each subclass. The subclass tables have all fields from the parent class as well as fields unique to their class. Supports polymorphic queries by UNIONing subclass tables, but does not require any UNION to access superclass fields on non-polymorphic queries.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Mapped Superclass</h4>\n<p class=""chakra-text css-o3oz8b"">This is selected by using the <code class=""chakra-code css-1u83yg1"">@MappedSuperclass</code> annotation on the parent class instead of <code class=""chakra-code css-1u83yg1"">@Entity</code>. It creates a table per class just like TABLE_PER_CLASS, but there is no superclass table. It does not support polymorphic queries, but never requires UNIONS to query subclasses.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Data Transfer Objects (DTOs)</h4>\n<p class=""chakra-text css-o3oz8b"">Data structures designed to represent the needs of the front end.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">JSONView Annotations</h4>\n<p class=""chakra-text css-o3oz8b"">Annotation that filters which Entity data is visible to the Presentation layer.</p></div>']",[],https://www.youtube.com/embed/lciXYPTeqeQ
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.1  Introduction to Java Persistence API,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>You are <em class=""chakra-text css-o3oz8b"">Here</em></strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Persistence Context</li><li class=""css-cvpopp"">Entity Manager</li><li class=""css-cvpopp"">Queries and JPQL</li><li class=""css-cvpopp"">Projections</li><li class=""css-cvpopp"">Repository Pattern</li><li class=""css-cvpopp"">Spring Data JPA</li><li class=""css-cvpopp"">Transactions and Flushing</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Definitions</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Java Persistence API (JPA):</strong> A specification describing how to manage relational data</li><li class=""css-cvpopp""><strong>Hibernate:</strong> An implementation of the JPA Specification</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Note about JPA rebranding</h3>\n<p class=""chakra-text css-o3oz8b"">JPA changed names in 2018 when Java EE was rebranded to Jakarta EE in an effort to separate the Enterprise Edition development from ongoing trademark issues surrounding the term Java in their framework name. Java EE, or Jakarta EE now, fills a similar role to Spring in that it provides a large number of tools to enable enterprise-scale projects. One of those tools is JPA, now Jakarta Persistence API (but, conveniently, still the same letters). Just something to keep in mind when searching for more info.</p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e90b_screen-shot-2020-03-19-at-12.56.42-pm/screen-shot-2020-03-19-at-12.56.42-pm.png'],https://www.youtube.com/embed/-hAHyi1u1AE
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.2  Persistence Context,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Definitions</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Persistence Context:</strong> Describes the relationship between all the Entity instances in our program and their representations in the underlying database.</li><li class=""css-cvpopp""><strong>Instance:</strong> A specific copy of an Entity in program memory.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Persistence Context Entity States</h3>\n<p class=""chakra-text css-o3oz8b""><strong>Transient:</strong> not associated with the persistence context. Often has not yet had an ID assigned.<br>\n<strong>Managed:</strong> persistent. Managed by the current persistence context. Changes to the entity will be reflected in the backing database.<br>\n<strong>Detached:</strong> previously managed. Occurs to all managed entities when persistence context ends.<br>\n<strong>Removed:</strong> scheduled to be removed from the database. Java object still exists and has ID.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Persistence Context Keeps Track of which Java Objects are Managed Entities</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If I create a new instance of a Person object using <code class=""chakra-code css-1u83yg1"">new Person()</code>, what state will this object have in the current <code class=""chakra-code css-1u83yg1"">PersistenceContext</code>?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Transient</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Managed</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Detached</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Removed</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">True or False: If I make changes to a managed Entity, those changes will be reflected in the database.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">True</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">False</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#pc"">Hibernate Documentation on Persistence Context<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73e965_screen-shot-2020-03-19-at-2.48.50-pm/screen-shot-2020-03-19-at-2.48.50-pm.png'],https://www.youtube.com/embed/DAd8RjeM5eY
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.3  Entity Manager,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Changing Persistence States</h3>\n<p class=""chakra-text css-o3oz8b""><strong>Persist:</strong> Takes an Entity not yet managed. The Entity becomes managed and will be saved to the database.<br>\n<strong>Find:</strong> Looks up an id in the database and returns a managed Entity.<br>\n<strong>Merge:</strong> Updates an Entity that is in the detached state. Returns an instance of that Entity that is now managed. If Entity was not found in the database to update, persists Entity as a new row.<br>\n<strong>Remove:</strong> Detaches an entity and deletes it from the database.</p>\n<h3 class=""chakra-heading css-k57syw"">Example Code</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@PersistenceContext\n</span>EntityManager entityManager;\n\npublic void persistExample(Person p) {\n   entityManager.persist(p); //write p to the database\n   p.setFavoriteComposer(""Johann Strauss II""); //will update database\n}\n\npublic void findExample(Long id) {\n   Person p = entityManager.find(Person.class, id); //retrieve an instance by its key\n   p.setFavoriteComposer(""Sir Malcolm Arnold""); // will update database\n}\n\npublic void getReferenceExample(Long personId, Long outfitId) {\n   Person p = entityManager.find(Person.class, personId);\n   Outfit outfitReference = entityManager.getReference(Outfit.class, outfitId);\n   p.getOutfits().add(outfitReference);\n}\n\npublic void mergeExample(Person detachedPerson){\n   detachedPerson.setFavoriteComposer(""Rimsky Korsakov"");\n   Person managedPerson = entityManager.merge(detachedPerson);\n   detachedPerson.setFavoriteComposer(""Antonio Salieri""); //will have no effect on database\n   managedPerson.setFavoriteComposer(""C.P.E. Bach""); //will overwrite Korsakov\n}\n\npublic void deleteExample(Long id) {\n   Person p = entityManager.find(Person.class, id); //retrieve an instance by its key\n   entityManager.remove(p); //will delete row from database\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Note about Hibernate Session</h3>\n<p class=""chakra-text css-o3oz8b"">Hibernate exposes some methods beyond those specified in the JPA API. Hibernate-specific methods can be accessed through an object called Session, which is the Hibernate implementation of EntityManager. You can acquire a Session object by using the method <code class=""chakra-code css-1u83yg1"">entityManager.unwrap(Session.class)</code>. You can use Session to access some Hibernate’s own implementation methods. See <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#pc"">the Hibernate documentation on Persistence Context<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details about Session as well as the above four methods.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which method should you use to save a new entity in the database?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Persist</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Merge</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Find</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Either Persist or Merge</p></div>']",[],https://www.youtube.com/embed/zJ2vhVApiY4
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.4  Lazy Loading,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Setting a fetch strategy can prevent your Entities from loading associated values until those values are referenced.</p>\n<h3 class=""chakra-heading css-k57syw"">FetchType.EAGER</h3>\n<p class=""chakra-text css-o3oz8b"">Always retrieve the associated values as part of the Entity retrieval. This means the initial query for the entity retrieves this data.</p>\n<h3 class=""chakra-heading css-k57syw"">FetchType.LAZY</h3>\n<p class=""chakra-text css-o3oz8b"">Wait to retrieve associated values until they are referenced. Lazy-loaded attributes are Hibernate proxy objects whose specific values are retrieved from the database only if they’re accessed. The initial query for the entity will NOT retrieve this data.</p>\n<h3 class=""chakra-heading css-k57syw"">Example Usage</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>public class Person {\n\n   @Id\n   @GeneratedValue\n   Long id;\n\n   @OneToMany(mappedBy = ""person"", fetch = FetchType.LAZY)\n   List&lt;Outfit&gt; outfits;\n\n   private String name;\n   private int age;\n   private String favoriteComposer;\n\n   / *rest of class* /\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Default Values</h3>\n<p class=""chakra-text css-o3oz8b"">An easy way to remember this is that both associations mapping to Many objects default to Lazy, because it’s more costly to retrieve lots of objects from the database. Associations mapping to One object default to Eager, because there’s usually less information.</p>\n<p class=""chakra-text css-o3oz8b""><strong>FetchType.LAZY:</strong></p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">@OneToMany</li><li class=""css-cvpopp"">@ManyToMany</li></ul>\n<p class=""chakra-text css-o3oz8b""><strong>FetchType.EAGER:</strong></p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">@ManyToOne</li><li class=""css-cvpopp"">@OneToOne</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#fetching"">Hibernate documentation on Fetching<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/kk4kIAH1XdM
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.5  Cascading,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CascadeType allows us to modify Entity associations so that persistence operations on one Entity will cascade to other Entities associated with it.</p>\n<h3 class=""chakra-heading css-k57syw"">Example Usage</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>public class Person {\n\n   @Id\n   @GeneratedValue\n   Long id;\n\n   @OneToMany(mappedBy = ""person"", cascade = CascadeType.ALL)\n   List&lt;Outfit&gt; outfits;\n\n   private String name;\n   private int age;\n   private String favoriteComposer;\n\n   / *rest of class* /</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Valid CascadeTypes correspond to the different persistence operations, such as Persist, Merge, and Remove. See the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#pc-cascade"">Hibernate cascade documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider this code snippet:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>public class Person {\n\n   @OneToMany(mappedBy = ""person"")\n   List&lt;Outfit&gt; outfits;\n   / *rest of class* /\n}```\n\nWhich FetchType should I use if I always want to load my list of outfits immediately when retrieving a Person Entity?</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">FetchType.LAZY</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">None, it will do this by default</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">FetchType.EAGER</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which CascadeType should you use to add new rows for associated Entities?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CascadeType.FIND</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CascadeType.PERSIST</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CascadeType.REMOVE</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CascadeType.ALL</p></div>']",[],https://www.youtube.com/embed/QC8tTxRyAKo
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.6  JPA Exercise 1,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following steps:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a new class called DeliveryRepository</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create methods to persist, find, merge, and delete Delivery objects</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Modify Delivery so that it will delete any associated Plants when removed</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Modify Plant so that it won’t query for Delivery objects until they’re referenced</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.7  Solution: JPA Exercise 1,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We’re really making progress! Your service can finally schedule new deliveries!</p>\n<h3 class=""chakra-heading css-k57syw"">DeliveryRepository.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Repository\n</span>@Transactional\npublic class DeliveryRepository {\n   @PersistenceContext\n   EntityManager entityManager;\n\n   public void persist(Delivery delivery) {\n       entityManager.persist(delivery);\n   }\n\n   public Delivery find(Long id) {\n       return entityManager.find(Delivery.class, id);\n   }\n\n   public Delivery merge(Delivery delivery){\n       return entityManager.merge(delivery);\n   }\n\n   public void delete(Long id) {\n       Delivery delivery = entityManager.find(Delivery.class, id);\n       entityManager.remove(delivery);\n   }\n\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Plant.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Entity\n</span>@Inheritance(strategy = InheritanceType.JOINED)\npublic class Plant {\n   @Id\n   @GeneratedValue\n   private Long id;\n\n   @JsonView(Views.Public.class)\n   @Nationalized\n   private String name;\n\n   @JsonView(Views.Public.class)\n   @Column(precision=12, scale=4)\n   private BigDecimal price;\n\n   //don\'t retrieve delivery if we don\'t need it\n   @ManyToOne(fetch = FetchType.LAZY)\n   @JoinColumn(name = ""delivery_id"")\n   private Delivery delivery;\n\n   / *getters and setters* /\n}```\n\n### Delivery.java\n\n```Java\n@Entity\npublic class Delivery {\n   @Id\n  @GeneratedValue\n   private Long id;\n\n   @Nationalized\n   private String name;\n   @Column(name = ""address_full"", length = 500)\n   private String address;\n   private LocalDateTime deliveryTime;\n   @Type(type = ""yes_no"")\n   private Boolean completed;\n\n   // added CascadeType.REMOVE to automatically clear any associated plants when removed\n   @OneToMany(fetch = FetchType.LAZY, mappedBy = ""delivery"", cascade = CascadeType.REMOVE)\n   private List&lt;Plant&gt; plants;\n  \n   / *getters and setters* /\n}</code></div></div></pre></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.8  Queries,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JPQL allows us to write queries for the EntityManager that return objects directly. Their syntax is very similar to SQL, but we reference Entities instead of tables.</p>\n<h3 class=""chakra-heading css-k57syw"">SQL</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>SELECT * \n</span>FROM   person p / *Table name* / \nWHERE  p.favoritecomposer LIKE \'%Sibelius%\' / *Column* /</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">JPQL</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>SELECT p \n</span>FROM   person p / *Entity* / \nWHERE  p.favoritecomposer LIKE \'%Sibelius%\' / *Attribute* /</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Creating a JPQL Query</h3>\n<p class=""chakra-text css-o3oz8b"">To create a query, inject an entityManager into your class and then use the <code class=""chakra-code css-1u83yg1"">createQuery</code> method. This method returns different types of Query objects depending on your parameters. TypedQuery is recommended for clarity.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>private static final String FIND_PERSON_BY_COMPOSER =\n</span>       ""select p from Person p "" +\n       ""where p.favoriteComposer like :favoriteComposer"";\n\npublic Person findPersonByFavoriteComposer(String favoriteComposer){\n   TypedQuery&lt;Person&gt; query = entityManager.createQuery(FIND_PERSON_BY_COMPOSER, Person.class);\n   query.setParameter(""favoriteComposer"", favoriteComposer);\n   return query.getSingleResult();\n}\n</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Referencing Associated Entities</h3>\n<p class=""chakra-text css-o3oz8b"">In SQL, you will often join tables together to search for results by related Entities. In JPQL, you can reference the value of associated Entities by accessing them directly as Entity attributes in the query.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>private static final String FIND_HUMANOID_BY_OUTFIT =\n</span>       ""select h from Humanoid h "" +\n       ""where :outfit member of h.outfits"";\n\nList&lt;Humanoid&gt; findHumanoidByOutfit(Outfit o){\n   TypedQuery&lt;Humanoid&gt; query = entityManager.createQuery(FIND_HUMANOID_BY_OUTFIT, Humanoid.class);\n   query.setParameter(""outfit"", o);\n   return query.getResultList();\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select the statements below that are correct.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">TypedQuery requires you to cast the results to an Entity type</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JPQL Queries are transformed into SQL before being executed</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To access a related Entity, you must use the JOIN keyword in JPQL</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JPQL can automatically reference the correct tables for polymorphic queries</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql"">Hibernate Documentation on queries<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],https://www.youtube.com/embed/jMjsA872Kx8
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.9  Named Queries,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Named queries can help us organize our queries by class. They also allow us to compiler-check our queries for validity at build time. Any named queries that reference invalid entities will throw exceptions, helping ensure we don’t commit invalid query strings. To use them, declare them at the top of the Entity class to which they refer. Remember that their names are global across the whole persistence unit, so they should all have unique names.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@NamedQueries({\n</span> @NamedQuery(\n  name = ""Outfit.findByHat"", \n  query = ""select o from Outfit o where o.hat = :hat""),\n @NamedQuery(\n  name = ""Outfit.findBySock"", \n  query = ""select o from Outfit o where o.sock = :sock"")\n})```\n\nYou can also use the criteria builder to construct queries dynamically using Java code. We can represent the following query with criteria builder as follows.\n\n```SQL\nSELECT h FROM Humanoid h\nWHERE :outfit MEMBER OF h.outfits</code></div></div></pre>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>List&lt;Humanoid&gt; findHumanoidByOutfitCriteria(Outfit o) {\n</span>   CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n   CriteriaQuery&lt;Humanoid&gt; criteria = cb.createQuery(Humanoid.class);\n   Root&lt;Humanoid&gt; root = criteria.from(Humanoid.class);\n\n   criteria.select(root).where(cb.isMember(o, root.get(""outfits"")));\n   return entityManager.createQuery(criteria).getResultList();\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Note about Legacy CriteriaBuilder</h3>\n<p class=""chakra-text css-o3oz8b"">Watch out for a legacy Hibernate CriteriaBuilder. This version has been deprecated in favor of the jakarta.persistence.CriteriaBuilder, so make sure you use entityManager.getCriteriaBuilder, <strong>NOT</strong> session.getCriteriaBuilder.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#jpql-api"">Hibernate Documentation for JPQL<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a><br>\n<a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#criteria"">Hibernate Documentation for CriteriaBuilder<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/97KRHZtt8So
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.10  Projections,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Projections allow us to return non-Entity data from queries.</p>\n<h3 class=""chakra-heading css-k57syw"">Projecting into a Value Type</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>private static final String LIST_FAVORITE_COMPOSERS = ""select distinct p.favoriteComposer from Person p"";\n</span>\nList&lt;String&gt; listFavoriteComposers() {\n   TypedQuery&lt;String&gt; query = entityManager.createQuery(LIST_FAVORITE_COMPOSERS, String.class);\n   return query.getResultList();\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Projecting into a non-Entity Object</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public class PersonComposerDTO {\n</span>   private String name;\n   private String composer;\n\n   public PersonComposerDTO(String name, String composer) {\n       this.name = name;\n       this.composer = composer;\n   }\n   / *getters and setters* /\n}</code></div></div></pre>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>private static final String GET_PERSON_AND_COMPOSER =\n</span>       ""select new com.udacity.jdnd.course3.controller.PersonComposerDTO(p.name, p.favoriteComposer) "" +\n       ""from Person p "" +\n       ""where p.id = :id"";\n\nPersonComposerDTO getPersonComposer(Long id) {\n   TypedQuery&lt;PersonComposerDTO&gt; query = entityManager.createQuery(GET_PERSON_AND_COMPOSER, PersonComposerDTO.class);\n   query.setParameter(""id"", id);\n   return query.getSingleResult();\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When should you use projections?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You need to return a single Value type.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You need an object that contains data from two, unrelated Entities.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You want to return an object containing both an Entity and its associated Entities.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You only need a couple fields from an Entity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql-api-scroll"">Hibernate Projections documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/6fax_UKk5wE
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.11  JPA Exercise 2,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following tasks:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create the DeliveryService and DeliveryController classes provided above</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use Postman to send the provided JSON to the /delivery endpoint and verify you get an id back (probably 1)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a @NamedQuery that returns all Deliveries for a specified Name. Place it in the appropriate Entity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a method in DeliveryRepository that accepts a String name and returns a List of Delivery Entities using your @NamedQuery.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a data class called RecipientAndPrice that contains a String name and BigDecimal price.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a method in DeliveryRepository that accepts a Long deliveryId and uses CriteriaBuilder to populate an instance of RecipientAndPrice that contains the recipient name for the provided deliveryId and the total price of all the plants in the order.</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.12  Solution: JPA Exercise 2,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Now we’re getting organized! Let’s look at some example solutions.</p>\n<h3 class=""chakra-heading css-k57syw"">Named Query in Delivery.Java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@NamedQuery(name = ""Delivery.findByName"",\n</span>         query = ""select d from Delivery d where d.name = :name"")\n@Entity\npublic class Delivery {\n   @Id\n   @GeneratedValue\n   private Long id;\n\n   // changed CascadeType to ALL\n   @OneToMany(fetch = FetchType.LAZY, mappedBy = ""delivery"", cascade = CascadeType.ALL)\n   private List&lt;Plant&gt; plants;\n\n   / *rest of class unchanged* /\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">RecipientAndPrice.java projection class</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public class RecipientAndPrice {\n</span>   private String recipientName;\n   private BigDecimal price;\n\n   //You\'ll probably need a constructor like this so CriteriaBuilder can create\n   public RecipientAndPrice(String recipientName, BigDecimal price) {\n       this.recipientName = recipientName;\n       this.price = price;\n   }\n   / *getters and setters* /\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">DeliveryRepository.java demonstrating both examples</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Repository\n</span>@Transactional\npublic class DeliveryRepository {\n   @PersistenceContext\n   EntityManager entityManager;\n\n   public List&lt;Delivery&gt; findDeliveriesByName(String name){\n       TypedQuery&lt;Delivery&gt; query = entityManager.createNamedQuery(""Delivery.findByName"", Delivery.class);\n       query.setParameter(""name"", name);\n       return query.getResultList();\n   }\n\n   // One possible way to solve this - query a list of Plants with deliveryId matching\n   // the one provided and sum their prices.\n   public RecipientAndPrice getBill(Long deliveryId) {\n       CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n       CriteriaQuery&lt;RecipientAndPrice&gt; query = cb.createQuery(RecipientAndPrice.class);\n       Root&lt;Plant&gt; root = query.from(Plant.class);\n       query.select(\n               cb.construct(\n                       RecipientAndPrice.class,\n                       root.get(""delivery"").get(""name""),\n                       cb.sum(root.get(""price""))))\n               .where(cb.equal(root.get(""delivery"").get(""id""), deliveryId));\n       return entityManager.createQuery(query).getSingleResult();\n   }\n   / *rest of class unchanged* /\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Resultant Hibernate-generated Query from CriteriaBuilder:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>Hibernate: \n</span>    select\n        delivery1_.name as col_0_0_,\n        sum(plant0_.price) as col_1_0_ \n    from\n        plant plant0_ cross \n    join\n        delivery delivery1_ \n    where\n        plant0_.delivery_id=delivery1_.id \n        and plant0_.delivery_id=3</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Some sample test methods you could use:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@RestController\n</span>@RequestMapping(""/delivery"")\npublic class DeliveryController {\n   @Autowired\n   DeliveryService deliveryService;\n\n   @PostMapping\n   public Long scheduleDelivery(@RequestBody Delivery delivery) {\n       return deliveryService.save(delivery);\n   }\n\n   @GetMapping(""/bill/{deliveryId}"")\n   public RecipientAndPrice getBill(@PathVariable Long deliveryId) {\n       return deliveryService.getBill(deliveryId);\n   }\n}\n\n@Service\npublic class DeliveryService {\n   @Autowired\n   DeliveryRepository deliveryRepository;\n\n   public RecipientAndPrice getBill(Long deliveryId){\n       return deliveryRepository.getBill(deliveryId);\n   }\n\n   public Long save(Delivery delivery) {\n       delivery.getPlants().forEach(plant -&gt; plant.setDelivery(delivery));\n       deliveryRepository.persist(delivery);\n       return delivery.getId();\n   }\n}</code></div></div></pre></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.13  Repository Pattern,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Repository pattern is a way of thinking about your database as a collection of objects.</p>\n<h3 class=""chakra-heading css-k57syw"">Simple Repository Interface</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public interface HumanoidRepository {\n</span>   Humanoid save(Humanoid h);\n   Humanoid findById(Long id);\n   void delete(Humanoid h);\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Sample Implementation</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Repository\n</span>public class HumanoidRepositoryImpl implements HumanoidRepository {\n   @Autowired\n   EntityManager entityManager;\n\n   @Override\n   public Humanoid save(Humanoid h) {\n       if(h.getId() == null || h.getId() &lt;= 0) {\n           entityManager.persist(h);\n       } else {\n           h = entityManager.merge(h);\n       }\n       return h;\n   }\n\n   @Override\n   public Humanoid findById(Long id) {\n       return entityManager.find(Humanoid.class, id);\n   }\n\n   @Override\n   public void delete(Humanoid h) {\n       if (entityManager.contains(h)) {\n           entityManager.remove(h);\n       } else {\n           entityManager.remove(entityManager.merge(h));\n       }\n   }\n\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>A Repository has a Similar Interface to a Collection</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Repository Management</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Unique Interface, Unique Implementation</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">More customizable, able to limit methods per Entity.</li><li class=""css-cvpopp"">Lots of very similar interfaces and classes.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Generic Interface, Unique Implementation</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Fewer Interfaces, but implement unused methods.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Generic Interface, Generic Implementation</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Most work up front.</li><li class=""css-cvpopp"">Least redundant code.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/March/5e73ef4c_screen-shot-2020-03-19-at-3.13.32-pm/screen-shot-2020-03-19-at-3.13.32-pm.png'],https://www.youtube.com/embed/ffmPznccpOY
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.14  Spring Data JPA,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Data JPA provides code and code-generation tools to make it easier to use JPA. To start with Spring Data JPA, simply extend one of the Spring Data interfaces. This example allows us to access CRUD operations related to Outfits:</p>\n<h3 class=""chakra-heading css-k57syw"">OutfitRepository.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Repository\n</span>public interface OutfitRepository extends CrudRepository&lt;Outfit, Long&gt; {\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Now we can simply inject this interface into our service classes and use it:</p>\n<h3 class=""chakra-heading css-k57syw"">OutfitService.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Service\n</span>public class OutfitService {\n\n   @Autowired\n   OutfitRepository outfitRepository;\n\n   public void eatOutfit(Outfit outfit){\n       outfitRepository.save(outfit);\n   }\n\n   public Outfit expelOutfit(Long id){\n       return outfitRepository.findById(id).orElse(null);\n   }\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To expand the repository, you can add new methods that will automatically be implemented:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Repository\n</span>public interface OutfitRepository extends CrudRepository&lt;Outfit, Long&gt; {\n   //finds a single outfit by attribute\n   Outfit findByHat(String hat);\n   //you can use Operators like And/Or, Lessthan/greaterthan, null/notnull\n   Outfit findByHatAndShoes(String hat, String shoes);\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Referencing Associations, Providing JPQL, and using Named Queries</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Repository\n</span>public interface HumanoidRepository extends JpaRepository&lt;Humanoid, Long&gt; {\n   //you can reference associations and attributes by chaining\n   //attribute names. Here we reference Humanoid.outfits.hat\n   List&lt;Humanoid&gt; findAllByOutfitsHat(String hat);\n\n   //you can provide specific JPQL Queries\n   @Query(""select h from Humanoid h where :outfit member of h.outfits "")\n   List&lt;Humanoid&gt; findAllByOutfit(@Param(""outfit"") Outfit outfit);\n\n   //does the same as above\n   List&lt;Humanoid&gt; findAllByOutfitsContaining(Outfit outfit);\n\n   //automatically uses query named Humanoid.findAllNamedQuery\n   List&lt;Humanoid&gt; findAllNamedQuery(Outfit outfit);\n\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">JpaRepository</h3>\n<p class=""chakra-text css-o3oz8b"">Extension of CrudRepository that provides some other JPA-specific methods, such as <code class=""chakra-code css-1u83yg1"">getOne</code>, which returns an Entity reference, just like <code class=""chakra-code css-1u83yg1"">entityManager.getReference</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Data JPA is not part of Hibernate, so you should look for the documentation on Repositories specifically on the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories"">Spring Data JPA Documentation site<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/v4T6Jd6_q0s
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.15  JPA Exercise 3,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following tasks:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a PlantRepository interface that extends JpaRepository.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add one (or more!) methods that can return a Boolean indicating whether a specified plant id has been delivered.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a method that returns all plants cheaper than a specified price.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create service methods to:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Save a plant</li><li class=""css-cvpopp"">Check if a plant has been delivered</li><li class=""css-cvpopp"">Find a list of plants cheaper than a specified price</li></ul></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.16  Solution: JPA Exercise 3,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Excellent! We’re able to easily add new functionality to our Services using these Repositories.</p>\n<h3 class=""chakra-heading css-k57syw"">PlantRepository.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Repository\n</span>public interface PlantRepository extends JpaRepository&lt;Plant, Long&gt; {\n\n   //check if a plant by this id exists where delivery has been completed\n   Boolean existsPlantByIdAndDeliveryCompleted(Long id, Boolean delivered);\n\n   //you can return a primitive directly\n   @Query(""select p.delivery.completed from Plant p where p.id = :plantId"")\n   Boolean deliveryCompleted(Long plantId);\n\n   //to return a wrapper class, you may need to construct it as a projection\n   @Query(""select new java.lang.Boolean(p.delivery.completed) from Plant p where p.id = :plantId"")\n   Boolean deliveryCompletedBoolean(Long plantId);\n  \n   //we can do this entirely with the method name\n   List&lt;Plant&gt; findByPriceLessThan(BigDecimal price);\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">PlantService.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Service\n</span>public class PlantService {\n   @Autowired\n   PlantRepository plantRepository;\n\n   public Long save(Plant plant){\n       return plantRepository.save(plant).getId();\n   }\n\n   public Boolean delivered(Long id){\n       // return plantRepository.deliveryCompleted(id); \n       return plantRepository.existsPlantByIdAndDeliveryCompleted(id, true);\n   }\n\n   public List&lt;Plant&gt; findPlantsBelowPrice(BigDecimal price) {\n       return plantRepository.findByPriceLessThan(price);\n   }\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Example PlantController.java for testing</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@RestController\n</span>@RequestMapping(""/plant"")\npublic class PlantController {\n\n   @Autowired\n   private PlantService plantService;\n\n   @GetMapping(""/delivered/{id}"")\n   public Boolean delivered(@PathVariable Long id) {\n       return plantService.delivered(id);\n   }\n\n   @GetMapping(""/under-price/{price}"")\n   @JsonView(Views.Public.class)\n   public List&lt;Plant&gt; plantsCheaperThan(@PathVariable BigDecimal price) {\n       return plantService.findPlantsBelowPrice(price);\n   }\n}</code></div></div></pre></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.17  Flushing and Transactions,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Definitions</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Flushing:</strong> The process of synchronizing the state of the persistence context with the underlying database.</li><li class=""css-cvpopp""><strong>Transaction:</strong> A set of operations that either succeed or fail as a group.</li><li class=""css-cvpopp""><strong>Level 1 Cache:</strong> The Persistence Context functions as a <strong>Level 1 Cache</strong>, because it does not write changes to the database until <strong>Flushing</strong> occurs.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Flushing Triggers</h3>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Transaction Ends</li><li class=""css-cvpopp"">Query overlaps with queued Entity actions</li><li class=""css-cvpopp"">Native SQL Query executes without registering affected Entities</li></ol>\n<h3 class=""chakra-heading css-k57syw"">Transactions</h3>\n<p class=""chakra-text css-o3oz8b"">If we execute multiple persistence operations, a failure on one could leave the Database in an inconsistent state. By wrapping multiple operations in a Transaction, no changes will be applied unless all operations succeed.<br>\nA good practice is to start one Transaction for each request that interacts with the database. The simplest way to do this in Spring is through the @Transactional annotation. You can annotate methods to begin a transaction when the method starts and close it when you leave. You can also annotate classes to treat all their methods as @Transactional.\nThis annotation is best done at the Service layer, so a new transaction is started whenever the Controller classes request operations that may involve the database.</p>\n<h3 class=""chakra-heading css-k57syw"">Transactional example</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Transactional\n</span>public void createOutfitForPerson(Outfit outfit, Long personId) {\n   outfitRepository.save(outfit);\n\n   //getOne throws EntityNotFoundException if personId doesn\'t exist!\n   humanoidRepository.getOne(personId).getOutfits().add(outfit);\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select the correct statement:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Transactions should be declared only on Repositories</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Flushing will occur every time you execute a JPQL query</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Transactions are best specified declaratively, through the @Transactional annotation</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Change you make to Entity instances are immediately written to the database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#flushing"">Hibernate Documentation on Flushing<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/PRyPh55b8Fw
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 3: Java Persistence API (JPA),3.18  Java Persistence API Recap,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Persistence Context</li><li class=""css-cvpopp"">Entity Manager</li><li class=""css-cvpopp"">Queries and JPQL</li><li class=""css-cvpopp"">Projections</li><li class=""css-cvpopp"">Repository Pattern</li><li class=""css-cvpopp"">Spring Data JPA</li><li class=""css-cvpopp"">Transactions and Flushing</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Definitions:</h3>\n<h4 class=""chakra-heading css-1dlhxqh"">Java Persistence API (JPA)</h4>\n<p class=""chakra-text css-o3oz8b"">A specification describing how to manage relational data</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Hibernate</h4>\n<p class=""chakra-text css-o3oz8b"">An implementation of the JPA Specification</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Persistence Context</h4>\n<p class=""chakra-text css-o3oz8b"">Describes the relationship between all the Entity instances in our program and their representations in the underlying database.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Instance</h4>\n<p class=""chakra-text css-o3oz8b"">A specific copy of an Entity in program memory.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Persistence Context Entity States</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Transient:</strong> not associated with the persistence context. Often has not yet had an ID assigned.</li><li class=""css-cvpopp""><strong>Managed:</strong> persistent. Managed by the current persistence context. Changes to the entity will be reflected in the backing database.</li><li class=""css-cvpopp""><strong>Detached:</strong> previously managed. Occurs to all managed entities when persistence context ends.</li><li class=""css-cvpopp""><strong>Removed:</strong> scheduled to be removed from the database. Java object still exists and has ID.</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">Entity Manager</h4>\n<p class=""chakra-text css-o3oz8b"">Class that manages the persistence state of Entities in the Persistence Context</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Entity Manager Operations</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Persist:</strong> Takes an Entity not yet managed. The Entity becomes managed and will be saved to the database.</li><li class=""css-cvpopp""><strong>Find:</strong> Looks up an id in the database and returns a managed Entity.</li><li class=""css-cvpopp""><strong>Merge:</strong> Updates an Entity that is in the detached state. Returns an instance of that Entity that is now managed. If Entity was not found in the database to update, persists Entity as a new row.</li><li class=""css-cvpopp""><strong>Remove:</strong> Detaches an entity and deletes it from the database.</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">Lazy Loading</h4>\n<p class=""chakra-text css-o3oz8b"">A way to prevent associated Entities from being retrieved until they are referenced.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">FetchType.EAGER</h4>\n<p class=""chakra-text css-o3oz8b"">Always retrieve the associated values as part of the Entity retrieval. Default value for @ManyToOne and @OneToOne.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">FetchType.LAZY</h4>\n<p class=""chakra-text css-o3oz8b"">Wait to retrieve associated values until they are referenced. Default value for @OneToMany and @ManyToMany.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">CascadeType</h4>\n<p class=""chakra-text css-o3oz8b"">Specifies which persistence operations should apply to associated entities when executed on the containing entity.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">CRUD</h4>\n<p class=""chakra-text css-o3oz8b"">Short for \'Create\', \'Read\', \'Update\', \'Delete\', the four main categories of basic database operations.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">JPQL</h4>\n<p class=""chakra-text css-o3oz8b"">Java Persistence Query Language. A query language very similar to SQL that can be used to reference Entities and their attributes directly.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Named Queries</h4>\n<p class=""chakra-text css-o3oz8b"">Query strings that are defined in a class-level annotation that are validated on application launch.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Projections</h4>\n<p class=""chakra-text css-o3oz8b"">Results of queries that are loaded into objects other than Entities.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Repository Pattern</h4>\n<p class=""chakra-text css-o3oz8b"">A way of thinking about your database as a collection of objects. Exposes methods similar to Collection interfaces like Map or Set.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">@Repository Annotation</h4>\n<p class=""chakra-text css-o3oz8b"">A specialization of the Spring @Component annotation. Marks a class for component scanning by Spring and also indicates that persistence exceptions thrown by the class should be translated into Spring exceptions.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Spring Data JPA Repository</h4>\n<p class=""chakra-text css-o3oz8b"">An interface specifying default repository behavior. Extending these interfaces allows Spring Data to automatically generate implementations based on interface method names.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Flushing</h4>\n<p class=""chakra-text css-o3oz8b"">The process of synchronizing the state of the persistence context with the underlying database.  Triggered by:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Transaction Ends</li><li class=""css-cvpopp"">Query overlaps with queued Entity actions</li><li class=""css-cvpopp"">Native SQL Query executes without registering affected Entities</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">Transaction</h4>\n<p class=""chakra-text css-o3oz8b"">A set of operations that either succeed or fail as a group.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Level 1 Cache</h4>\n<p class=""chakra-text css-o3oz8b"">An intermediate layer into which changes can be written and objects retrieved quickly. The Persistence Context functions as a <strong>Level 1 Cache</strong>, because it does not write changes to the database until <strong>Flushing</strong> occurs.</p></div>']",[],https://www.youtube.com/embed/vfdDhOXCS8Q
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.1  Introduction to Connecting to Data Sources,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>You are <em class=""chakra-text css-o3oz8b"">Here</em></strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Summary</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Set up an external database.</li><li class=""css-cvpopp"">Connect to external databases.</li><li class=""css-cvpopp"">Configure and initialize multiple data sources.</li><li class=""css-cvpopp"">Configure data sources for unit tests.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/March/5e73fdea_screen-shot-2020-03-19-at-12.56.55-pm/screen-shot-2020-03-19-at-12.56.55-pm.png'],https://www.youtube.com/embed/avGTKAhvA7o
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.2  Data Sources Exercise 0,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For this lesson, you will need to install and configure a database to connect to. These instructions are for MySQL, though you may use another database provider if you wish.</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Visit [dev.mysql.com/downloads/](<a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://dev.mysql.com/downloads/"">https://dev.mysql.com/downloads/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>] and download the latest version for your operating system. I found the All-in-one installer to be the most convenient option for Windows. For Mac, you can download the Workbench as a separate application at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://dev.mysql.com/downloads/workbench"">dev.mysql.com/downloads/workbench/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp"">Run the installer and select the components: workbench, server, java connector, and documentation. If you prefer to use other sql server management tools, you can just install the server and java connector.</li><li class=""css-cvpopp"">After installing, continue through the prompts to configure your server. Select Standalone MySQL Server and choose the Development Computer config type. Then we\'ll choose Strong Password Encryption and create a root password. This is the password you\'ll use when connecting to MySQL from the workbench as the system admin.</li><li class=""css-cvpopp"">On Windows, you\'ll choose to configure MySQL Server as a Windows Service and start on startup using a Standard account. On Mac, start the MySQL Server once installation is complete.</li><li class=""css-cvpopp"">Click Execute to apply the configuration on windows, or Finish on mac.</li></ol>\n<p class=""chakra-text css-o3oz8b"">Note that these instructions may vary depending on which version of MySQL you install.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Use Strong Password Encryption</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Password To Connect Via Workbench</strong></p></div>']","['https://video.udacity-data.com/topher/2020/March/5e73fe43_screen-shot-2020-03-19-at-4.17.37-pm/screen-shot-2020-03-19-at-4.17.37-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e73fe6a_screen-shot-2020-03-19-at-4.18.23-pm/screen-shot-2020-03-19-at-4.18.23-pm.png']",https://www.youtube.com/embed/TO8Yp_I73aI
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.3  Java DataSources,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Data Source vs. DataSource</h3>\n<p class=""chakra-text css-o3oz8b"">Sometimes we use these words interchangeable, so just to clarify:</p>\n<p class=""chakra-text css-o3oz8b""><strong>Data Source:</strong> A source of data, such as a database.\n<strong>DataSource:</strong> Java utility class that manages connections to physical or logical databases.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Types of Java DataSource Objects</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which type of DataSource does Spring inject by default?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Basic DataSource</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Connection-Pooling DataSource</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Distributed Transaction DataSource</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/8/docs/api/javax/sql/DataSource.html"">Java Documentation on DataSource class<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73fece_screen-shot-2020-03-19-at-4.19.59-pm/screen-shot-2020-03-19-at-4.19.59-pm.png'],https://www.youtube.com/embed/XzrUBArT3uM
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.4  Spring DataSources,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Spring DataSource Properties</h3>\n<p class=""chakra-text css-o3oz8b"">Spring automatically builds a DataSource for us on startup. You can configure all the properties of the datasource by setting values in your application.properties file. Here is a <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#data-properties"">List of Spring Data Properties<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Anything beginning with spring.datasource refers to DataSource configuration.</p>\n<p class=""chakra-text css-o3oz8b"">Example application.properties:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring.datasource.url</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>jdbc:mysql://localhost:3306/exampledb\n</span><span>spring.datasource.username</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>sa\n</span><span>spring.datasource.password</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>sa1234</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The <strong>url</strong> property uses the format:\n<code class=""chakra-code css-1u83yg1"">subprotocol : serverName[:port] / databaseName : properties</code></p>\n<p class=""chakra-text css-o3oz8b"">We have not specified any properties as part of the URL string  in this example, because we are specifying them using additional rows in our properties file.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Note:</strong> Depending on your driver version and locale, you may run into issues with Spring Boot retrieving the server timezone from MySQL and deciding that it is invalid. This is because certain time zones, such as ‘PDT’, Pacific Daylight Time, are not recognized by some Java MySQL connectors.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring.datasource.url</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>jdbc:mysql://localhost:3306/exampledb?serverTimezone</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>UTC</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Creating Initial Database</h3>\n<p class=""chakra-text css-o3oz8b"">Before using your application to connect to a database server, you should create a database instance on that server to store your information. Then you should create an admin user for that database. You can use the MySQL Workbench to do this, or any other tool that allows you to execute sql against your database.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>create user \'sa\'@\'localhost\' identified by \'sa1234\'; -- Create the user\n</span>grant all on exercise1.* to \'sa\'@\'localhost\'; -- Gives all privileges to that user on new db</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What is the default behavior if no spring.datasource.url is provided?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create no DataSource objects</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a DataSource for an in-memory database if one is found on the classpath</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a DataSource for the most recent database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create one DataSource for each database on the classpath</p></div>']",[],https://www.youtube.com/embed/-eTmMMGvdHc
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.5  Data Sources Exercise 1,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For this exercise, we’ll configure your local database to hold results from our plant delivery project. Note that you’ll need to make sure your pom.xml includes the dependency for the mysql-connector-java artifact in order to complete this exercise:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>mysql</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>mysql-connector-java</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>runtime</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span></code></div></div></pre>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Create a new schema on your database server called ‘plant’</li><li class=""css-cvpopp"">Create an admin user that is authorized to ‘plant’</li><li class=""css-cvpopp"">Update your application.properties file with your new database url and credentials</li><li class=""css-cvpopp"">Set the initialization-mode property to ‘always’ so that it continues to operate on our external db</li><li class=""css-cvpopp"">Launch your application and verify that it starts successfully</li></ul>\n<p class=""chakra-text css-o3oz8b"">If you get an access denied exception when connecting to your database, make sure the user credentials you created match the ones in your application.properties. Ensure that you granted that user all permissions on the database you’re trying to access.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following tasks:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create the ‘plant’ schema on your database server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a user to access it</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update your project application.properties file</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Launch your application and verify that it starts successfully</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.6  Solution: Data Sources Exercise 1,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Example application.properties contents</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring.datasource.url</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>jdbc:mysql://</span><span class=""token"" style=""color: rgb(2, 124, 124);"">${MYSQL_HOST</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">localhost}</span><span>:3306/plant\n</span><span>spring.datasource.username</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>sa\n</span><span>spring.datasource.password</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>sa1234</span></code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Example SQL Execution</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>CREATE SCHEMA `plant` ; -- Create the plant database\n</span>\nCREATE USER \'sa\'@\'localhost\' IDENTIFIED BY \'sa1234\'; -- Create the user if you haven’t yet\nGRANT ALL ON plant.* TO \'sa\'@\'localhost\'; -- Gives all privileges to the new user on plant</code></div></div></pre></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.7  Programmatic Configuration,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">@Bean</code></h3>\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@Bean</code> annotation marks methods that should create beans during Spring initialization. Each method will be executed and the returned object will be added as a Bean for Spring to use in dependency injection. These can also be configured by xml. We’re using the <code class=""chakra-code css-1u83yg1"">@Bean</code> annotation to identify methods that return DataSource instances. Spring will inject these into persistence classes as needed.</p>\n<h3 class=""chakra-heading css-k57syw"">Programmatic Configuration</h3>\n<p class=""chakra-text css-o3oz8b"">DataSources can also be configured programmatically by creating a class annotated with <code class=""chakra-code css-1u83yg1"">@Configuration</code> that returns a <code class=""chakra-code css-1u83yg1"">@Bean</code> of the desired type. Spring will inject this DataSource whenever a DataSource is requested. This could be useful if you need to retrieve some DataSource properties dynamically.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Configuration\n</span>public class DatasourceConfig {\n\n   @Bean\n   public DataSource getDatasource() {\n       DataSourceBuilder dsb = DataSourceBuilder.create();\n       dsb.username(""sa2"");\n       dsb.password(securePasswordService());\n       dsb.url(""jdbc:mysql://localhost:3306/exercise1"");\n       return dsb.build();\n   }\n\n   private String securePasswordService() {\n       return ""sa1234"";\n   }\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">@ConfigurationProperties</code></h3>\n<p class=""chakra-text css-o3oz8b"">You can also combine properties and programmatic configuration by using the <code class=""chakra-code css-1u83yg1"">@ConfigurationProperties</code> annotation. Spring will attempt to inject any properties found beginning with the provided prefix into the returned <code class=""chakra-code css-1u83yg1"">@Bean</code>.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Configuration\n</span>public class DatasourceConfig {\n\n   @Bean\n   @ConfigurationProperties(""foo.datasource"")\n   public DataSource getDatasource() {\n       DataSourceBuilder dsb = DataSourceBuilder.create();\n       dsb.password(securePasswordService());\n       return dsb.build();\n   }\n\n   private String securePasswordService() {\n       return ""sa1234"";\n   }\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When are the values from <code class=""chakra-code css-1u83yg1"">@ConfigurationProperties</code> injected?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When the <code class=""chakra-code css-1u83yg1"">@Bean</code> is returned, overwriting properties set programmatically</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Before the values are set programmatically in the <code class=""chakra-code css-1u83yg1"">@Bean</code> method</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When the default DataSource is referenced</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Each time the returned DataSource is accessed</p></div>']",[],https://www.youtube.com/embed/_3_AS9qNbYw
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.8  Data Sources Exercise 2,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For this assignment, we’d like to store our credentials in a property file, but load our datasource URL programmatically.</p>\n<p class=""chakra-text css-o3oz8b"">First, create a new class to hold your DataSource <code class=""chakra-code css-1u83yg1"">@Bean</code>. Use DataSourceBuilder to create and return a new instance of DataSource.</p>\n<p class=""chakra-text css-o3oz8b"">Now add new properties to your application.properties for a prefix of your choice. Our solution example will begin with ‘com.udacity’. Create a property for url. Our solution property will be called ‘com.udacity.datasource.url’, for example.</p>\n<p class=""chakra-text css-o3oz8b"">Update your DataSource bean to retrieve the url from your properties file and set the username and password programmatically. Run your application to make sure it still connects!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following tasks:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a new class annotated with @Configuration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a @Bean method that returns a DataSource</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a new property to your application.properties file that stores the url for your datasource</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the method to retrieve the url from the properties file</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Programmatically set the user and password on the datasource object</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run your application to make sure you can still connect</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.9  Solution: Data Sources Exercise 2,[],[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.10  Custom/Multiple Data Sources,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">DataSourceProperties</h3>\n<p class=""chakra-text css-o3oz8b"">Different DataSource providers sometimes have different names for their properties. You can use a DataSourceProperties object to manage converting between the standard spring.datasource properties and your desired DataSource type by creating a <code class=""chakra-code css-1u83yg1"">@Bean</code> that returns a DataSourceProperties object you populate from your properties file.</p>\n<p class=""chakra-text css-o3oz8b"">We will annotate both the DataSourceProperties and DataSource beans with <code class=""chakra-code css-1u83yg1"">@Primary</code> so that spring knows which beans to use by default of that type.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Bean\n</span>@Primary\n@ConfigurationProperties(""spring.datasource"")\npublic DataSourceProperties getDataSourceProperties(){\n   return new DataSourceProperties();\n}\n\n@Bean\n@Primary\n@ConfigurationProperties(prefix = ""spring.datasource.configuration"")\npublic DataSource getDatasource(DataSourceProperties properties) {\n   return properties.initializeDataSourceBuilder().type(HikariDataSource.class).build();\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Multiple DataSources</h3>\n<p class=""chakra-text css-o3oz8b"">If your data is stored in multiple locations, you can access it by creating multiple DataSource @Beans. You will have to provide beans for an EntityManagerFactory and a TransactionManager as well. To support Spring Data repositories, we also use the <code class=""chakra-code css-1u83yg1"">@EnableJpaRepositories</code> annotation to reference the specific classes.</p>\n<p class=""chakra-text css-o3oz8b"">Here are the definitions for two different config classes. The first one defines everything we need to load spring.datasource properties into one DataSource for storing our Humanoid Entities. The next one uses the properties from spring.datasource2 to access our Outfit Entities.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">DatasourceConfig.java</h4>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Configuration\n</span>@EnableJpaRepositories(basePackageClasses = Humanoid.class, entityManagerFactoryRef = ""humanoidFactory"")\npublic class DatasourceConfig {\n\n   @Bean\n   @Primary\n   @ConfigurationProperties(""spring.datasource"")\n   public DataSourceProperties getDataSourceProperties(){\n       return new DataSourceProperties();\n   }\n\n   @Bean\n   @Primary\n   @ConfigurationProperties(prefix = ""spring.datasource.configuration"")\n   public DataSource getDatasource(DataSourceProperties properties) {\n       return properties.initializeDataSourceBuilder().type(HikariDataSource.class).build();\n   }\n\n   @Bean(name = ""humanoidFactory"")\n   @Primary\n   public LocalContainerEntityManagerFactoryBean humanoidEntityManagerFactory(\n           EntityManagerFactoryBuilder entityManagerFactoryBuilder) {\n       return entityManagerFactoryBuilder\n               .dataSource(getDatasource(getDataSourceProperties()))\n               .packages(Humanoid.class)\n               .persistenceUnit(""humanoid"")\n               .build();\n   }\n\n   @Bean(name = ""humanoidTx"")\n   @Primary\n   public PlatformTransactionManager humanoidTransactionManager(@Qualifier(""humanoidFactory"")EntityManagerFactory entityManagerFactory){\n       return new JpaTransactionManager(entityManagerFactory);\n   }\n\n}</code></div></div></pre>\n<h4 class=""chakra-heading css-1dlhxqh"">DatasourceConfig2.java</h4>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\n</span>@Configuration\n@EnableJpaRepositories(basePackageClasses = {Outfit.class, OutfitRepository.class}, entityManagerFactoryRef = ""outfitFactory"")\npublic class Datasource2Config {\n\n   @Bean\n   @ConfigurationProperties(""spring.datasource2"")\n   public DataSourceProperties getDataSource2Properties(){\n       return new DataSourceProperties();\n   }\n\n   @Bean\n   @ConfigurationProperties(prefix = ""spring.datasource2.configuration"")\n   public DataSource getDatasource2(DataSourceProperties properties) {\n       return properties.initializeDataSourceBuilder().type(HikariDataSource.class).build();\n   }\n\n   @Bean(name = ""outfitFactory"")\n   public LocalContainerEntityManagerFactoryBean outfitEntityManagerFactory(\n           EntityManagerFactoryBuilder entityManagerFactoryBuilder) {\n       return entityManagerFactoryBuilder\n               .dataSource(getDatasource2(getDataSource2Properties()))\n               .packages(Outfit.class)\n               .persistenceUnit(""outfit"")\n               .build();\n   }\n\n   @Bean(name = ""outfitTx"")\n   public PlatformTransactionManager outfitTransactionManager(@Qualifier(""outfitFactory"")EntityManagerFactory entityManagerFactory){\n       return new JpaTransactionManager(entityManagerFactory);\n   }\n\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto-data-access"">Spring Boot documentation on custom and multiple DataSources<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/EPHDSYj7ZzM
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.11  Initialization,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">spring.datasource.initialization-mode values</h3>\n<p class=""chakra-text css-o3oz8b""><strong>Embedded:</strong> Default. Initialization performed on embedded databases only.<br>\n<strong>Always:</strong> Initialization for both embedded and external databases.<br>\n<strong>Never:</strong> No initialization for either embedded or external databases.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto-database-initialization"">Spring Boot Documentation on Initialization<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/TGqoIQOsJ0k
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.12  Initialization With Hibernate,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">spring.jpa.hibernate.ddl-auto</h3>\n<p class=""chakra-text css-o3oz8b"">This property allows you to customize Hibernate’s initialization behavior.</p>\n<p class=""chakra-text css-o3oz8b""><strong>create</strong>: Drop all tables for defined Entities, then create them.<br>\n<strong>create-drop</strong>: Create tables, drop them when application stops.<br>\n<strong>update</strong>: Attempt to migrate previous version of tables to match current Entities.<br>\n<strong>validate</strong>: Throw an exception if tables or columns are missing.<br>\n<strong>none</strong>: Do not initialize tables.</p>\n<h3 class=""chakra-heading css-k57syw"">show-sql</h3>\n<p class=""chakra-text css-o3oz8b"">Spring offers a useful command to print all generated sql commands to the console:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-sql"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>jpa</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">show</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">sql</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">There’s also a hibernate property for formatting the sql output that makes it easier to read:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-javascript"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">jpa</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">properties</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">hibernate</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">format_sql</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto-initialize-a-database-using-hibernate"">Spring Boot Documentation on Initializing a database with Hibernate<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/0-NIcLaGDX0
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.13  Data Sources Exercise 3,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This is a simple exercise to continue our exploration of data source initialization. First, update your application.properties to always initialize the datasource and set it to create tables on startup. Next, set the properties to show and format sql.</p>\n<p class=""chakra-text css-o3oz8b"">Run your application again and check out the execution of create statements in your console. Head over to the MySQL Workbench and verify that all the tables have been created for your Plant and Delivery Entities.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following tasks:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update application.properties to always initialize your datasource and tell hibernate to create tables</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Set the properties to show formatted SQL output</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run your application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Verify the tables were created for Plant and Delivery Entities</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.14  Solution: Data Sources Exercise 3,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Example application.properties</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring.datasource.url</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>jdbc:mysql://</span><span class=""token"" style=""color: rgb(2, 124, 124);"">${MYSQL_HOST</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">localhost}</span><span>:3306/plant\n</span><span>spring.datasource.username</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>sa\n</span><span>spring.datasource.password</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>sa1234\n</span><span>spring.datasource.initialization-mode</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>always\n</span><span>spring.jpa.hibernate.ddl-auto</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>create</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">After launching your application, make sure tables have been created for ‘delivery’ as well as ‘plant’ and its subclasses ‘flower’ and ‘shrub’ in your database. Since we’re using the JOINED inheritance strategy, you can see that flower and shrub tables don’t contain the same columns as plant.</p>\n<h3 class=""chakra-heading css-k57syw"">Initialization scripts</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>Hibernate: \n</span>    \n    alter table flower \n       drop \n       foreign key FKdn67xpln3filirucdvdwyo5ix\nHibernate: \n    \n    alter table plant \n       drop \n       foreign key FKiq1ux1y4sjxoh9ty39rk7j0am\nHibernate: \n    \n    alter table shrub \n       drop \n       foreign key FK511y91sacosf2eyo1pv096jer\nHibernate: \n    \n    drop table if exists delivery\nHibernate: \n    \n    drop table if exists flower\nHibernate: \n    \n    drop table if exists hibernate_sequence\nHibernate: \n    \n    drop table if exists plant\nHibernate: \n    \n    drop table if exists shrub\nHibernate: \n    \n    create table delivery (\n       id bigint not null,\n        address_full varchar(500),\n        completed char(1),\n        delivery_time datetime(6),\n        name nvarchar(255),\n        primary key (id)\n    ) engine=InnoDB\nHibernate: \n    \n    create table flower (\n       color varchar(255),\n        id bigint not null,\n        primary key (id)\n    ) engine=InnoDB\nHibernate: \n    \n    create table hibernate_sequence (\n       next_val bigint\n    ) engine=InnoDB\nHibernate: \n    \n    insert into hibernate_sequence values ( 1 )\nHibernate: \n    \n    insert into hibernate_sequence values ( 1 )\nHibernate: \n    \n    create table plant (\n       id bigint not null,\n        name nvarchar(255),\n        price decimal(12,4),\n        delivery_id bigint,\n        primary key (id)\n    ) engine=InnoDB\nHibernate: \n    \n    create table shrub (\n       height_cm integer not null,\n        width_cm integer not null,\n        id bigint not null,\n        primary key (id)\n    ) engine=InnoDB\nHibernate: \n    \n    alter table flower \n       add constraint FKdn67xpln3filirucdvdwyo5ix \n       foreign key (id) \n       references plant (id)\nHibernate: \n    \n    alter table plant \n       add constraint FKiq1ux1y4sjxoh9ty39rk7j0am \n       foreign key (delivery_id) \n       references delivery (id)\nHibernate: \n    \n    alter table shrub \n       add constraint FK511y91sacosf2eyo1pv096jer \n       foreign key (id) \n       references plant (id)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">List of Tables in Schema ‘plant’</p></div>']",['https://video.udacity-data.com/topher/2020/March/5e73ffae_screen-shot-2020-03-19-at-4.23.35-pm/screen-shot-2020-03-19-at-4.23.35-pm.png'],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.15  Unit Test Data Source,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Configuring Unit Tests with application.properties</h3>\n<p class=""chakra-text css-o3oz8b"">One way to configure the unit test datasource is to simply provide a second application.properties file. You could add the following properties to force H2 for unit tests:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-javascript"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">datasource</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">driver</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>name</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>org</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">h2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access maybe-class-name"">Driver</span><span>\n</span><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">datasource</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">url</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>jdbc</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span>h2</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span>mem</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span>db\n</span><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">datasource</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">username</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>sa\n</span><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">datasource</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">password</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>sa</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Remember, the default initialization-mode is <code class=""chakra-code css-1u83yg1"">embedded</code>, so you do not need to specify this property when using H2 for unit tests. Also recall that the default ddl-auto property for in-memory databases is <code class=""chakra-code css-1u83yg1"">create-drop</code>, so you also do not need to set that property unless you wish some other behavior.</p>\n<h3 class=""chakra-heading css-k57syw"">@SpringBootTest</h3>\n<p class=""chakra-text css-o3oz8b"">This annotation goes on your unit test class. creates an entire Spring ApplicationContext when running unit tests. It is used if you need to test controller or service classes, or perform integration tests spanning multiple layers.</p>\n<h3 class=""chakra-heading css-k57syw"">@DataJpaTest</h3>\n<p class=""chakra-text css-o3oz8b"">This annotation provides an alternate way to test your data layer without providing an application.properties file. It disables Spring autoconfiguration and automatically uses an in-memory database if available. It only loads Entities and Spring Data JPA repositories, but not your Services or Controllers.</p>\n<h3 class=""chakra-heading css-k57syw"">TestEntityManager</h3>\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">TestEntityManager</code> is a class provided by Spring Boot that provides useful methods for persisting test data inside persistence unit tests. It is still available in <code class=""chakra-code css-1u83yg1"">@DataJpaTests</code> despite the rest of the app not being wired up.</p>\n<h3 class=""chakra-heading css-k57syw"">@AutoConfigureTestDatabase</h3>\n<p class=""chakra-text css-o3oz8b"">This annotation can be used with either @SpringBootTest or @DataJpaTest. You can use it to customize Spring’s behavior for replacing the normal datasource. For example, the following annotation could be used in conjunction with @DataJpaTest to indicate that Spring should NOT replace the datasource with an in-memory datasource.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@AutoConfigureTestDatabase(replace=Replace.NONE)</span></code></div></div></pre></div>']",[],https://www.youtube.com/embed/jzn2bkAI0Bs
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.16  Data Sources Exercise 4,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For this exercise, you’ll create a unit test to validate the methods in the <code class=""chakra-code css-1u83yg1"">PlantRepository</code> interface. In particular, you should create the following two unit tests:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testPriceLessThan()</code> - Adds two new plants to your database with two different prices. Use the PlantRepository.findByPriceLessThan method to make sure the correct plant is returned.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testDeliveryCompleted()</code> - Create a new Plant and a new Delivery. Set both sides of their bi-directional relationship. Verify that PlantRepository.deliveryCompleted returns false for the plant you just created. Then, set the Delivery to true and verify that deliveryCompleted returns true.</li></ol>\n<p class=""chakra-text css-o3oz8b"">Use the <code class=""chakra-code css-1u83yg1"">@DataJpaTest</code> annotation and inject a <code class=""chakra-code css-1u83yg1"">TestEntityManager</code> to prepare the data for the above tests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following tasks:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a new test class or modify the default test class included from Spring Initializr</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add the @DataJpaTest annotation</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Inject a TestEntityManager</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a testPriceLessThan method that validates your PlantRepository.findByPriceLessThan method</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a testDeliveryCompleted method that validates your PlantRepository.deliveryCompleted method</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run the tests to make sure they pass!</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.17  Solution: Data Sources Exercise 4,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here’s the unit test class I created to demonstrate this assignment, but there are many different ways you might have set up the test data. Try to make sure you test reasonable boundary conditions and don’t simply validate that one example works how you expect.</p>\n<p class=""chakra-text css-o3oz8b"">Note that, to facilitate writing these tests, I added extra constructors to Plant and Delivery that may take in extra arguments. Feel free to do the same!</p>\n<h3 class=""chakra-heading css-k57syw"">Lesson3ExercisesApplicationTests.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@DataJpaTest\n</span>class Lesson3ExercisesApplicationTests {\n\n  @Autowired\n  TestEntityManager testEntityManager;\n\n  @Autowired\n  PlantRepository plantRepository;\n\n  @Test\n  public void testPriceLessThan() {\n    //test boundary conditions\n     Plant p = testEntityManager.persist(new Plant(""Foo Leaf"", 4.99)); \n     testEntityManager.persist(new Plant(""Bar Weed"", 5.01));\n\n     List&lt;Plant&gt; cheapPlants = plantRepository.findByPriceLessThan(BigDecimal.valueOf(5));\n     Assertions.assertEquals(1, cheapPlants.size(), ""Size"");\n     Assertions.assertEquals(p.getId(), cheapPlants.get(0).getId(), ""Id"");\n  }\n\n  @Test\n  public void testDeliveryCompleted() {\n     Plant p = testEntityManager.persist(new Plant(""Baz Root"", 9.99));\n     Delivery d = testEntityManager.persist(new Delivery(""Leonard Bernstein"", ""234 West Side"", LocalDateTime.now()));\n\n     d.setPlants(Lists.newArrayList(p));\n     p.setDelivery(d);\n\n     //test both before and after\n     Assertions.assertFalse(plantRepository.deliveryCompleted(p.getId()));\n     d.setCompleted(true);\n     Assertions.assertTrue(plantRepository.deliveryCompleted(p.getId()));\n  }\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Example constructors:</p>\n<h3 class=""chakra-heading css-k57syw"">Delivery.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@NamedQuery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>name </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Delivery.findByName""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> query </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""select d from Delivery d where d.name = :name""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Entity</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Id</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@GeneratedValue</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Nationalized</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Column</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>name </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""address_full""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> length </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">500</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> address</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LocalDateTime</span><span> deliveryTime</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Type</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>type </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""yes_no""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Boolean</span><span> completed </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">false</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// changed CascadeType to ALL</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@OneToMany</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>fetch </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FetchType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>LAZY</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> mappedBy </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""delivery""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> cascade </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">CascadeType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>ALL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Plant</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> plants</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Convenience Constructor</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> address</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LocalDateTime</span><span> deliveryTime</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>name </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>address </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> address</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>deliveryTime </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> deliveryTime</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">Plant.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Entity</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Inheritance</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>strategy </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">InheritanceType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>JOINED</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Plant</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Id</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@GeneratedValue</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Long</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@JsonView</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Views</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Public</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Nationalized</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@JsonView</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Views</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Public</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Column</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>precision</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(2, 124, 124);"">12</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> scale</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(2, 124, 124);"">4</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BigDecimal</span><span> price</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">//don\'t retrieve delivery if we don\'t need it</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@ManyToOne</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>fetch </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FetchType</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>LAZY</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@JoinColumn</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>name </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""delivery_id""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Convenience Constructor</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Plant</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">double</span><span> price</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>name </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>price </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BigDecimal</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">valueOf</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>price</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Plant</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 4: Connecting To Data Sources,4.18  Connecting to Datasources API Recap,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In this lesson, we learned how to set up and connect to our external database. We covered customizing our DataSource objects and writing unit tests for our Repositories.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Definitions</h3>\n<h4 class=""chakra-heading css-1dlhxqh"">Data Source</h4>\n<p class=""chakra-text css-o3oz8b"">A source of data, such as a database.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">DataSource</h4>\n<p class=""chakra-text css-o3oz8b"">Java utility class that manages connections to physical or logical databases.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">spring.datasource properties</h4>\n<p class=""chakra-text css-o3oz8b"">The list of all the datasource variables that can be configured in your application.properties file. <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#data-properties"">List of Spring Data Properties<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<h4 class=""chakra-heading css-1dlhxqh"">@Bean</h4>\n<p class=""chakra-text css-o3oz8b"">Annotation that specifies a method returns a component normally configured and injected by Spring Boot. Used inside a class with @Configuration annotation.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">@ConfigurationProperties</h4>\n<p class=""chakra-text css-o3oz8b"">Annotation that allows you to inject values from the specified property prefix into the return object provided by your @Bean annotation.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">spring.datasource.initialization-mode values</h4>\n<p class=""chakra-text css-o3oz8b"">This property allows you to specify whether database initialization should run when the application starts up.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Embedded:</strong> Default. Initialization performed on embedded databases only.</li><li class=""css-cvpopp""><strong>Always:</strong> Initialization for both embedded and external databases.</li><li class=""css-cvpopp""><strong>Never:</strong> No initialization for either embedded or external databases.</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">spring.jpa.hibernate.ddl-auto</h4>\n<p class=""chakra-text css-o3oz8b"">This property allows you to customize Hibernate’s initialization behavior.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>create</strong>: Drop all tables for defined Entities, then create them.</li><li class=""css-cvpopp""><strong>create-drop</strong>: Create tables, drop them when application stops.</li><li class=""css-cvpopp""><strong>update</strong>: Attempt to migrate previous version of tables to match current Entities.</li><li class=""css-cvpopp""><strong>validate</strong>: Throw an exception if tables or columns are missing.</li><li class=""css-cvpopp""><strong>none</strong>: Do not initialize tables.</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">@SpringBootTest</h4>\n<p class=""chakra-text css-o3oz8b"">This annotation goes on your unit test class. creates an entire Spring ApplicationContext when running unit tests. It is used if you need to test controller or service classes, or perform integration tests spanning multiple layers.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">@DataJpaTest</h4>\n<p class=""chakra-text css-o3oz8b"">This annotation provides an alternate way to test your data layer without providing an application.properties file. It disables Spring autoconfiguration and automatically uses an in-memory database if available. It only loads Entities and Spring Data JPA repositories, but not your Services or Controllers.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">TestEntityManager</h4>\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">TestEntityManager</code> is a class provided by Spring Boot that provides useful methods for persisting test data inside persistence unit tests. It is still available in <code class=""chakra-code css-1u83yg1"">@DataJpaTests</code> despite the rest of the app not being wired up.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">@AutoConfigureTestDatabase</h4>\n<p class=""chakra-text css-o3oz8b"">This annotation can be used with either @SpringBootTest or @DataJpaTest. You can use it to customize Spring’s behavior for replacing the normal datasource. For example, the following annotation could be used in conjunction with @DataJpaTest to indicate that Spring should NOT replace the datasource with an in-memory datasource.</p></div>']",[],https://www.youtube.com/embed/__vjMkvo3Ik
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.1  Introduction to Persistence Without JPA,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>You are <em class=""chakra-text css-o3oz8b"">Here</em></strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Initialization with SQL</li><li class=""css-cvpopp"">Data Object vs. Entities</li><li class=""css-cvpopp"">Data Access Objects (DAOs)</li><li class=""css-cvpopp"">JdbcTemplate</li><li class=""css-cvpopp"">Performance</li></ul></div>']",['https://video.udacity-data.com/topher/2020/March/5e740097_screen-shot-2020-03-19-at-12.57.06-pm/screen-shot-2020-03-19-at-12.57.06-pm.png'],https://www.youtube.com/embed/1mem6oToBgc
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.2  Initialization With SQL,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select the combination of settings that you should use when using schema.sql to initialize your data.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-cpp"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>datasource</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>initialization</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>mode</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">?</span><span>\n</span><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>jpa</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>hibernate</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>ddl</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">auto</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">?</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">initialization-mode=never<br>\nddl-auto=none</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">initialization-mode=never<br>\nddl-auto=create</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">initialization-mode=always<br>\nddl-auto=none</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">initialization-mode=always<br>\nddl-auto=create</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For additional information, see the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-initialize-a-database-using-spring-jdbc"">Spring boot documentation on initialization behavior<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/s7gPjGda4-c
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.3  Exercise 1,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For this exercise, we’re going to add a new table that’s not built by Hibernate. Our flower delivery company is branching out (heh) and acquired a candy business. We want to create a new table in our database that matches their desired format.</p>\n<p class=""chakra-text css-o3oz8b"">Create a schema.sql for your project that creates a new table called ‘candy’. It should have columns to support:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Long id</li><li class=""css-cvpopp"">String name</li><li class=""css-cvpopp"">BigDecimal price</li></ul>\n<p class=""chakra-text css-o3oz8b"">If you’re unsure of the syntax to do this, turn on the spring.jpa.show-sql property and look at what statements are used to generate similar tables in your existing project (like the ‘plant’ table). You could also use the <code class=""chakra-code css-1u83yg1"">create table if not exists</code> syntax to avoid exceptions when re-running the script.</p>\n<p class=""chakra-text css-o3oz8b"">Now create an initialization script in data.sql that populates your candy table with some candy names and prices when the application starts. You can use the <code class=""chakra-code css-1u83yg1"">INSERT IGNORE</code> syntax to ignore attempts to insert values that already exist. For example:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>insert ignore into candy\n</span>   set id = 1,\n       name = \'Gummy Badgers\',\n       price = \'3.50\';</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">After creating your schema.sql and data.sql, launch your application and verify that your candy table has been populated with data correctly.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following steps:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a schema.sql file that creates the ‘candy’ table</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a data.sql file that populates your ‘candy’ table with a few items</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Launch your application and verify the table was created and populated</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Stop the application and launch it again, to make sure your sql produces no errors when the table and data already exist. Check to make sure there are no duplicate entries in your candy table.</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.4  Solution: Exercise 1,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Make sure to check that your application can start repeatedly and doesn’t produce duplicate data. Note that your existing Entities are still created automatically by hibernate. This is okay since we’re using them both in the same project, but you would probably set ddl-auto to ‘none’ outside of a development environment.</p>\n<p class=""chakra-text css-o3oz8b"">Here are some sample schema.sql and data.sql files:</p>\n<h3 class=""chakra-heading css-k57syw"">schema.sql</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>create table if not exists candy (\n</span>   id bigint not null,\n   name nvarchar(255),\n   price decimal(12,4),\n   primary key (id)\n);</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">data.sql</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>insert ignore into candy\n</span>   set id = 1,\n       name = \'Gummy Badgers\',\n       price = \'3.50\';\n\ninsert ignore into candy\nset id = 2,\n   name = \'Chocolate CreepyDepartmentStoreMannequin\',\n   price = \'18.50\';\n\ninsert ignore into candy\nset id = 3,\n   name = \'Lemon Icosahedrons\',\n   price = \'6.20\';\n\ninsert ignore into candy\nset id = 4,\n   name = \'Halm\',\n   price = \'2.99\';</code></div></div></pre></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.5  Data Object Design,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">SQL-based persistence layers often use Data Objects to map to their database tables. Data Objects usually have a one-to-one mapping of table fields to object attributes, though projections are frequently used outside ORM as well.</p>\n<p class=""chakra-text css-o3oz8b"">The below images demonstrate how associations are often mapped into secondary id fields of Data Objects rather than populating the associated objects.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Representing an Association in an Entity</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Representing an Association in a Data Object</strong></p></div>']","['https://video.udacity-data.com/topher/2020/March/5e7400f4_screen-shot-2020-03-19-at-4.29.08-pm/screen-shot-2020-03-19-at-4.29.08-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e740118_screen-shot-2020-03-19-at-4.29.46-pm/screen-shot-2020-03-19-at-4.29.46-pm.png']",https://www.youtube.com/embed/7c6t_yH9Qlg
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.6  Data Access Objects,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">DAO vs. Repository</h3>\n<p class=""chakra-text css-o3oz8b"">The Data Access Object (DAO) pattern is an alternative to the Repository pattern. A DAO is a programmatic interface to a table or collection of related tables. Whereas a Repository presents a collection of Entities that you modify to update the database, a DAO will often provide methods that expose various actions, along with standard CRUD operations.</p>\n<h3 class=""chakra-heading css-k57syw"">Data Object Projection Scope</h3>\n<p class=""chakra-text css-o3oz8b"">Data Object scope can vary depending on the needs of the application. It is more common to project directly into DTOs from a DAO, but remember that <code class=""chakra-code css-1u83yg1"">@JSONView</code> still works with Data Objects, so it is often still worth adhering to a similar set of boundaries to what you would observe with Entities.</p>\n<h3 class=""chakra-heading css-k57syw"">DAO pattern in Hibernate</h3>\n<p class=""chakra-text css-o3oz8b"">While the Repository pattern is common with Hibernate, because most modifications can be done simply by editing Entities, there is nothing that prevents us from using the DAO pattern in either a Hibernate or SQL-based persistence model.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Comparison of Update - Repository vs. DAO</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which statements apply to Data Access Objects (DAOs)?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Provide a similar interface to Collection classes</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Provide methods to perform specific modifications to a table</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Can project into Data Objects</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Provides CRUD operations</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Cannot return managed Entities</p></div>']",['https://video.udacity-data.com/topher/2020/March/5e740145_screen-shot-2020-03-19-at-4.30.33-pm/screen-shot-2020-03-19-at-4.30.33-pm.png'],https://www.youtube.com/embed/XEFG-pIvtjg
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.7  Exercise 2,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We need to start putting our new candy table to work. Our customers want to be able to add candy to their flower deliveries. Each delivery could have multiple pieces of candy, and the same types of candy can, of course, be included on different deliveries. That means we want to represent a many-to-many relationship between candy and deliveries.</p>\n<p class=""chakra-text css-o3oz8b"">Let’s create a mapping table that can be used to add candy to our deliveries. We’ll call the table ‘candy_delivery’ and it should have a column for both candy_id and delivery_id.</p>\n<p class=""chakra-text css-o3oz8b"">Now let’s make a CandyData class. This class maps directly to the candy table. It should have one field for each column in the candy table.</p>\n<p class=""chakra-text css-o3oz8b"">Lastly, let’s define an interface for a DAO. Create an interface called CandyDAO. Add three method signatures:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Get a list of all the available candy</li><li class=""css-cvpopp"">A method that allows you to add a candy item to a delivery by id</li><li class=""css-cvpopp"">A method that lets you get a list of all the candy for a specific delivery</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following steps:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a new table to store a many-to-many mapping of candy to deliveries. You should put the create statement in your schema.sql.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a CandyData class that maps to the candy table.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a CandyDAO that defines methods for retrieving the available candy, adding candy to deliveries and getting a list of candy on a delivery.</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.8  Solution: Exercise 2,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">First we’ll add a new create statement to our schema.sql:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>create table if not exists candy_delivery (\n</span>   candy_id bigint not null,\n   delivery_id bigint not null\n);</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Next, we’ll create a CandyData.java:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public class CandyData {\n</span>   private Long id;\n   private String name;\n   private BigDecimal price;\n   / *also include getter and setters* /\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Lastly, we’ll add an interface for our CandyDAO.java:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\n</span>public interface CandyDAO {\n   List&lt;CandyData&gt; list();\n   void addToDelivery(Long candyId, Long deliveryid);\n   List&lt;CandyData&gt; findByDelivery(Long deliveryId);\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Note:</em>\nYou may wish to add some foreign key constraints to your candy_delivery table. This could cause some conflicts with the default hibernate ddl-auto behavior if hibernate attempts to delete the delivery table after adding the foreign key relationship, but if you were defining all your tables in sql it would definitely be something to keep in mind. This example will only allow you to add rows to candy_delivery if the candy and delivery referenced exists, and deleting the delivery will automatically remove the corresponding row from candy_delivery.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>create table if not exists candy_delivery (\n</span>   candy_id bigint not null,\n   delivery_id bigint not null,\n   foreign key (candy_id) references candy(id),\n   foreign key (delivery_id) references delivery(id) on delete cascade\n);</code></div></div></pre></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.9  JdbcTemplate,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">JdbcTemplate</h3>\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">JdbcTemplate</code> functions like the EntityManager: it provides connections, executes queries, and manages transactions.</p>\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">NamedParameterJdbcTemplate</code> allows you to use named parameters in your query string.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>-- with standard JdbcTemplate\n</span>select * from person where id = ? and age &gt;= ?\n\n-- with NamedParameterJdbcTemplate\nselect * from person where id = :id and age &gt;= :minAge</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">queryForObject</h3>\n<p class=""chakra-text css-o3oz8b"">To query for a single object, you can use the <code class=""chakra-code css-1u83yg1"">jdbcTemplate.queryForObject</code> method. This example takes three parameters:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Query String</li><li class=""css-cvpopp"">A map of parameter names to parameter values</li><li class=""css-cvpopp"">A RowMapper that returns the instance of the object for which we’re querying</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@Autowired\n</span>NamedParameterJdbcTemplate jdbcTemplate;\n\nprivate static final String SELECT_PERSON_BY_ID = \n   ""SELECT * FROM person "" + \n   ""WHERE id = :id"";\n\npublic PersonData getPersonById(Long id){\n   return jdbcTemplate.queryForObject(\n           SELECT_PERSON_BY_ID,\n           new MapSqlParameterSource().addValue(""id"", id),\n           new BeanPropertyRowMapper&lt;&gt;(PersonData.class));\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">update</h3>\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">jdbcTemplate.update</code> method allows you to execute SQL statements that modify the database, such as <code class=""chakra-code css-1u83yg1"">INSERT</code>, <code class=""chakra-code css-1u83yg1"">UPDATE</code>, or <code class=""chakra-code css-1u83yg1"">DELETE</code>.</p>\n<p class=""chakra-text css-o3oz8b"">Instead of taking a RowMapper, it takes an optional KeyHolder object that can contain the id of the new row.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>private static final String INSERT_PERSON = \n</span>   ""INSERT INTO person (name, age, favorite_composer) "" + \n   ""VALUES(:name, :age, :favoriteComposer)"";\n\npublic Long addPerson(PersonData personData) {\n   KeyHolder key = new GeneratedKeyHolder();\n   jdbcTemplate.update(\n           INSERT_PERSON,\n           new BeanPropertySqlParameterSource(personData),\n           key);\n   return key.getKey().longValue();\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">SimpleJdbcInsert</h3>\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">SimpleJdbcInsert</code> class allows us to do inserts without writing a query, which can make it easier to maintain our code if the composition of our tables change.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>// does the same as the previous addPerson method\n</span>public Long addPersonInsert(PersonData personData) {\n   SimpleJdbcInsert sji = new SimpleJdbcInsert(jdbcTemplate.getJdbcTemplate())\n           .withTableName(""person"")\n           .usingGeneratedKeyColumns(""id"");\n   return sji.executeAndReturnKey(new \n  BeanPropertySqlParameterSource(personData)).longValue();\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What are some reasons to create Data Objects that match your table?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Easier to create parameters map</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Faster queries</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Easier to populate Data Objects with returned data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Better security</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What’s the best way to insert a new row using JdbcTemplate?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">jdbcTemplate.queryForObject</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">jdbcTemplate.update</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">SimpleJdbcInsert</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">jdbcTemplate.execute</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-using-jdbc-template"">Spring Boot documentation on using JdbcTemplate<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html"">Spring JdbcTemplate Javadoc<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/9CmW9Yk8gB0
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.10  Querying for Complex Objects,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">OneToOne with RowMapper</h3>\n<p class=""chakra-text css-o3oz8b"">We will write a query to return this object:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public class PersonWithOneOutfit {\n</span>   private String name;\n   private int age;\n   private String favoriteComposer;\n   private OutfitData outfit;\n  / *getters and setters* /\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">We can populate an object representing a OneToOne relationship between tables with a single query by combining multiple ``RowMapper```s in the same statement. The query returns all the values necessary to build both objects, and then we use an anonymous RowMapper to make the results into two different objects.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>private static final String SELECT_PERSON_WITH_ONE_OUTFIT =\n</span>       ""SELECT * FROM person p "" +\n               ""JOIN outfit o "" +\n               ""ON p.id = o.person_id "" +\n               ""WHERE p.id = :personId AND o.id = :outfitId"";\n\n\nprivate static final BeanPropertyRowMapper&lt;PersonWithOneOutfit&gt; personWithOneOutfitRowMapper = new BeanPropertyRowMapper&lt;&gt;(PersonWithOneOutfit.class);\nprivate static final BeanPropertyRowMapper&lt;OutfitData&gt; outfitRowMapper = new BeanPropertyRowMapper&lt;&gt;(OutfitData.class);\n\npublic PersonWithOneOutfit addOutfitForPerson(Long personId, OutfitData outfitData) {\n   outfitData.setPersonId(personId);\n   Long outfitId = addOutfit(personId, outfitData);\n\n   return jdbcTemplate.queryForObject(SELECT_PERSON_WITH_ONE_OUTFIT,\n           new MapSqlParameterSource()\n                   .addValue(""personId"", personId)\n                   .addValue(""outfitId"", outfitId),\n           //anonymous row mapper lambda\n           (resultSet, i) -&gt; {\n               PersonWithOneOutfit person = personWithOneOutfitRowMapper.mapRow(resultSet, i);\n               person.setOutfit(outfitRowMapper.mapRow(resultSet, i));\n               return person;\n           });\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">OneToMany with ResultSetExtractor</h3>\n<p class=""chakra-text css-o3oz8b"">We will now look at a query to retrieve this object:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public class PersonWithAllOutfits {\n</span>   private String name;\n   private int age;\n   private String favoriteComposer;\n   private List&lt;OutfitData&gt; outfits;\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">If you want to construct an object with more complex relationships, you have two main choices:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Query twice and assemble the objects</li><li class=""css-cvpopp"">Query once and loop through every row to build objects from the result set</li></ol>\n<h3 class=""chakra-heading css-k57syw"">jdbcTemplate.query</h3>\n<p class=""chakra-text css-o3oz8b"">To retrieve a list of items representing the second part of your OneToMany association, you can use jdbcTemplate.query. Here is a query returning all the outfits for a specific person. By using this in conjunction with a query to retrieve a single PersonData, you can then populate PersonWithAllOutfits.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>private static final String SELECT_OUTFIT_BY_PERSON_ID = ""SELECT * FROM outfit o WHERE o.person_id = :personId"";\n</span>\npublic List&lt;OutfitData&gt; getOutfitsByPerson(Long personId){\n   return jdbcTemplate.query(SELECT_OUTFIT_BY_PERSON_ID,\n           new MapSqlParameterSource().addValue(""personId"", personId),\n           new BeanPropertyRowMapper&lt;&gt;(OutfitData.class));\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">ResultSetExtractor</h3>\n<p class=""chakra-text css-o3oz8b"">If we wrote a single query that retrieved all the data for both <code class=""chakra-code css-1u83yg1"">PersonData</code> and our <code class=""chakra-code css-1u83yg1"">List&lt;OutfitData&gt;</code>, we can use a <code class=""chakra-code css-1u83yg1"">ResultSetExtractor</code> to build the objects for us from the data.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>private static final String SELECT_PERSON_WITH_ALL_OUTFITS =\n</span>       ""SELECT * FROM person p "" +\n       ""JOIN outfit o "" +\n       ""ON p.id = o.person_id "" +\n       ""WHERE p.id = :personId"";\n\nprivate static final BeanPropertyRowMapper&lt;PersonWithAllOutfits&gt; personWithAllOutfitsRowMapper = new BeanPropertyRowMapper&lt;&gt;(PersonWithAllOutfits.class);\npublic PersonWithAllOutfits addOutFitForPersonReturnAllFancy(Long personId, OutfitData outfitData) {\n   //add the outfit to db\n   outfitData.setPersonId(personId);\n   addOutfit(personId, outfitData);\n\n   //iterate over the result set to construct the outfit list\n   return jdbcTemplate.query(\n           SELECT_PERSON_WITH_ALL_OUTFITS,\n           new MapSqlParameterSource().addValue(""personId"", personId),\n           //anonymous ResultSetExtractor lambda\n           resultSet -&gt; {\n               PersonWithAllOutfits person = null;\n               List&lt;OutfitData&gt; outfits = new ArrayList&lt;&gt;();\n               int row = 0;\n               while(resultSet.next()) {\n                   if(person == null){\n                       person = personWithAllOutfitsRowMapper.mapRow(resultSet, row);\n                   }\n                   outfits.add(outfitRowMapper.mapRow(resultSet, row++));\n               }\n               if(person != null) {\n                   person.setOutfits(outfits);\n               }\n               return person;\n           });\n}</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What’s the difference between a ResultSetExtractor and a RowMapper?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A RowMapper has to loop through every row the query returns, while the ResultSetExtractor only works on one row.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A ResultSetExtractor has to loop through every row the query returns, while the RowMapper only works on one row.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The RowMapper can work on either one row or a set of all rows, while the ResultSetExtractor can only accept the set of all rows.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The ResultSetExtractor can work on either one row or a set of all rows, while the RowMapper can only accept the set of all rows.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#jdbc"">Spring Documentation on JdbcTemplate<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/bTd3sLUZiMc
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.11  Transactions in JDBC,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">@Transactional</h3>\n<p class=""chakra-text css-o3oz8b"">Many operations in DAOs involve combining multiple queries into a single request, so transaction management is just as important as before! Fortunately, <code class=""chakra-code css-1u83yg1"">JdbcTemplate</code> provides a Spring-managed connection, so we can simply use <code class=""chakra-code css-1u83yg1"">@Transactional</code> to set our transaction boundaries by method just like we did when using Hibernate.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Multiple Database Requests Occurring Inside Transaction</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which statement is incorrect:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring manages connections provided by JdbcTemplate.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JdbcTemplate must use TransactionTemplate or PlatformTransactionManager to start and end transactions.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">DAOs using JdbcTemplate sometimes perform multiple queries in the same method.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You can use the @Transactional annotation on methods that use JdbcTemplate.</p></div>']",['https://video.udacity-data.com/topher/2020/April/5ea0ca07_screen-shot-2020-04-22-at-3.49.21-pm/screen-shot-2020-04-22-at-3.49.21-pm.png'],https://www.youtube.com/embed/QJnuLz845Ec
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.12  Exercise 3,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For this exercise, we’d like to implement the DAO interface we designed earlier. You’ll create a new class called CandyDAOImpl that implements CandyDAO. Use a NamedParameterJdbcTemplate to complete implementations of the three methods we declared before:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>List&lt;CandyData&gt; list();\n</span>void addToDelivery(Long candyId, Long deliveryid);\nList&lt;CandyData&gt; findByDelivery(Long deliveryId);</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Your DAO implementation should still use the @Repository annotation, because it is a Spring Component that handles database interactions. You should also use the @Transactional annotation either at the class or method level to ensure all your methods execute inside a transaction.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the following tasks:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a new class called CandyDAOImpl that implements CandyDAO</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Inject a NamedParameterJdbcTemplate instance</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement the three methods in CandyDAO</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add @Repository and @Transactional annotations</p></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.13  Solution: Exercise 3,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Let’s look at an example implementation of CandyDAO. We’ve organized our queries and made reusable code into constants. You can see that our implementation methods are actually quite simple!</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\n</span>@Repository\n@Transactional\npublic class CandyDAOImpl implements CandyDAO {\n\n   @Autowired\n   NamedParameterJdbcTemplate jdbcTemplate;\n\n   //we can avoid some typo-based errors by using string constants\n   private static final String CANDY_ID = ""candyId"";\n   private static final String DELIVERY_ID = ""deliveryId"";\n\n   private static final String SELECT_ALL_CANDY =\n           ""SELECT * FROM candy"";\n\n   private static final String INSERT_DELIVERY =\n           ""INSERT INTO candy_delivery (candy_id, delivery_id) "" +\n           ""VALUES (:"" + CANDY_ID + "", :"" + DELIVERY_ID + "")"";\n\n   private static final String FIND_CANDY_BY_DELIVERY =\n           ""SELECT c.* FROM candy_delivery AS cd "" +\n           ""JOIN candy AS c on c.id = cd.candy_id "" +\n           ""WHERE cd.delivery_id = :"" + DELIVERY_ID;\n\n   private static final RowMapper&lt;CandyData&gt; candyDataRowMapper =\n           new BeanPropertyRowMapper&lt;&gt;(CandyData.class);\n\n   @Override\n   public List&lt;CandyData&gt; list() {\n       //no parameters, so we can use a version of .query that only takes two arguments\n       return jdbcTemplate.query(SELECT_ALL_CANDY, candyDataRowMapper);\n   }\n\n   @Override\n   public void addToDelivery(Long candyId, Long deliveryid) {\n       //we don\'t have an object of the right type to use SimpleJdbcInsert, so we\'ll just do a normal .update\n       jdbcTemplate.update(INSERT_DELIVERY,\n               new MapSqlParameterSource()\n                       .addValue(CANDY_ID, candyId)\n                       .addValue(DELIVERY_ID, deliveryid));\n   }\n\n   @Override\n   public List&lt;CandyData&gt; findByDelivery(Long deliveryId) {\n       return jdbcTemplate.query(FIND_CANDY_BY_DELIVERY,\n               new MapSqlParameterSource(DELIVERY_ID, deliveryId),\n               candyDataRowMapper);\n   }\n}\n</code></div></div></pre></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.14  Why Not Both?,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">JPA vs. JDBC</h3>\n<p class=""chakra-text css-o3oz8b""><strong>JPA</strong></p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Convenient</li><li class=""css-cvpopp"">Table relationships defined in Java</li><li class=""css-cvpopp"">SQL is generated</li></ul>\n<p class=""chakra-text css-o3oz8b""><strong>JDBC</strong></p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Can be faster</li><li class=""css-cvpopp"">Table relationships defined in Database</li><li class=""css-cvpopp"">SQL is written</li></ul>\n<p class=""chakra-text css-o3oz8b"">Generally, optimizing for convenience will save you more time in the long run. If you need to improve the performance of specific operations, there are a few properties you can use to help measure performance. This will cause Hibernate to report on the number of JDBC Statements prepared and executed during each session, as well as their time costs.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-javascript"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>spring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">jpa</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">properties</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">hibernate</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">generate_statistics</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span>\n</span><span>logging</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">level</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">org</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">hibernate</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token property-access"">stat</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">DEBUG</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">For Hibernate 5.4.5 and later you can also use this property to cause any single query longer than the specified duration to print a message to the log.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-matlab"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>hibernate</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>session</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>events</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>log</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>LOG_QUERIES_SLOWER_THAN_MS</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(2, 124, 124);"">25</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Comparing Performance - Simple Example</h3>\n<p class=""chakra-text css-o3oz8b"">Consider 3 different implementations of the same solution:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\n</span>public void setFavoriteComposerModifyEntity(Long personId, String favoriteComposer) {\n   personRepository.getOne(personId).setFavoriteComposer(favoriteComposer);\n}\n\nprivate static final String SET_FAVORITE_COMPOSER = \n    ""update Person p set p.favoriteComposer = :favoriteComposer where p.id =:id"";\npublic void setFavoriteComposerJpql(Long personId, String favoriteComposer){\n   entityManager.createQuery(SET_FAVORITE_COMPOSER)\n           .setParameter(""favoriteComposer"", favoriteComposer)\n           .setParameter(""id"", personId)\n           .executeUpdate();\n}\n\nprivate static final String SET_FAVORITE_COMPOSER_NATIVE = \n    ""update humanoid h set h.favorite_composer = :favoriteComposer where h.id = :id"";\npublic void setFavoriteComposerNative(Long personId, String favoriteComposer){\n   entityManager.createNativeQuery(SET_FAVORITE_COMPOSER_NATIVE)\n           .setParameter(""favoriteComposer"", favoriteComposer)\n           .setParameter(""id"", personId)\n           .executeUpdate();\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The first solution executes 2 JDBC Statements, one to look up, another to modify. If favoriteComposer is unchanged, then it only executes 1 JDBC Statement.</p>\n<p class=""chakra-text css-o3oz8b"">The second and third solutions both execute 1 JDBC Statement. However, the native SQL example requires knowing the Person is stored in a table called humanoid, while the JPQL does not. Their performance is otherwise similar.</p>\n<p class=""chakra-text css-o3oz8b"">In practice, only about a third of the time in each Session is preparing and executing statements, and the performance difference between these situations is nominal, so it could be hard to justify not using the first example.</p>\n<h3 class=""chakra-heading css-k57syw"">Comparing Performance - Complex Example</h3>\n<p class=""chakra-text css-o3oz8b"">Let’s consider a more expensive operation - updating every outfit a Person owns.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\n</span>public void setShoeColorModifyEntity(Long personId, String shoeColor) {\n   personRepository.findById(personId).get().getOutfits().stream()\n           .forEach(o -&gt; o.setShoes(shoeColor));\n}\n\nprivate static final String SET_SHOE_COLOR_NATIVE =\n       ""update Outfit o "" +\n               ""set o.shoes = :color "" +\n               ""where o.id in "" +\n               ""(select ho.outfits_id "" +\n               ""from humanoid_outfits ho "" +\n               ""where ho.humanoid_id = :id)"";\npublic void setShoeColorNative(Long humanoidId, String color){\n   entityManager.createNativeQuery(SET_SHOE_COLOR_NATIVE)\n           .setParameter(""color"", color)\n           .setParameter(""id"", humanoidId)\n           .executeUpdate();\n}\n</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">In this case, the first example is vastly simpler. It doesn’t require knowledge of the database structure, is easy to understand, and can be easily modified. However, it executes 1 JDBC Statement for every single outfit a person owns, plus 1 JDBC statement to find a person and 1 JDBC statement to write them. If you modify the shoe color of someone with 30 pairs of shoes, you will prepare and execute 32 JDBC statements.</p>\n<p class=""chakra-text css-o3oz8b"">The second example is messy, but only requires a single JDBC statement. However, it’s faster than the first example, taking about a third the time.</p>\n<p class=""chakra-text css-o3oz8b"">The question is whether that kind of performance improvement is worth the complexity. If it was a 30x performance for cases with 30 outfits, perhaps so, but I think it would be an error to perform this optimization for a 2-3x improvement before you know it’s going to be a problem.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Note:</strong> This is not a robust performance testing setup, it is only meant to demonstrate the statistics provided by hibernate for discussion.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Note 2:</strong> MySQL prohibits subselects containing the same table you modify in an update statement. As such, you cannot use the following JPQL, because it is converted into a SQL statement containing a subselect of Outfit.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-SQL"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>update Outfit o \n</span>set o.shoes = :color \nwhere o.id in \n(select o2.id from Humanoid h \njoin h.outfits o2 \nwhere h.id = :id)</code></div></div></pre></div>']",[],https://www.youtube.com/embed/XI1CwwfTIM4
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.15  Persistence Without JPA Recap,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Initialization with SQL</li><li class=""css-cvpopp"">Data Object vs. Entities</li><li class=""css-cvpopp"">Data Access Objects (DAOs)</li><li class=""css-cvpopp"">JdbcTemplate</li><li class=""css-cvpopp"">Performance</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Definitions</h3>\n<h4 class=""chakra-heading css-1dlhxqh"">SQL Initialization Scripts</h4>\n<p class=""chakra-text css-o3oz8b"">Spring attempts to execute two scripts by default when the application starts:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">schema.sql - Create or update the schema.</li><li class=""css-cvpopp"">data.sql - Initialize or modify the data in your tables.</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">Platform-specific initialization</h4>\n<p class=""chakra-text css-o3oz8b"">You may provide additional initialization scripts using the naming pattern:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">schema-${platform}.sql</li><li class=""css-cvpopp"">data-${platform}.sql</li></ul>\n<h4 class=""chakra-heading css-1dlhxqh"">Data Object</h4>\n<p class=""chakra-text css-o3oz8b"">A Java class that maps to a specific database.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">Data Access Object</h4>\n<p class=""chakra-text css-o3oz8b"">A design pattern for the data layer that presents a programmatic interface to one or more related tables. Whereas a Repository presents a collection of Entities that you modify to update the database, a DAO will often provide methods that expose various actions, along with standard CRUD operations.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">JdbcTemplate</h4>\n<p class=""chakra-text css-o3oz8b"">Provides connections, executes queries, and manages transactions.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">NamedParameterJdbcTemplate</h4>\n<p class=""chakra-text css-o3oz8b"">A JdbcTemplate that allows you to use named parameters in your query strings.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">RowMapper</h4>\n<p class=""chakra-text css-o3oz8b"">Class that takes a single row for a query result set and returns an object representing that row.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">ResultSetExtractor</h4>\n<p class=""chakra-text css-o3oz8b"">Class that takes an entire result set and returns one object representing all the results.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">spring.jpa.properties.hibernate.generate_statistics</h4>\n<p class=""chakra-text css-o3oz8b"">Property that enables a feature causing Hibernate to print all transaction statistics when a transaction ends.</p></div>']",[],https://www.youtube.com/embed/1QkRphkpjvY
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 5: Persistence Without JPA,5.16  Course Recap,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Look at Everything You\'ve Covered!</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You\'ve made it! Congratulations. I\'ve enjoyed learning with you and can\'t wait to see what you create.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You can find all the Hibernate documentation here:\n<a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://hibernate.org/orm/"">https://hibernate.org/orm/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">Direct link to the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html"">Hibernate 5.4 User Guide<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> referenced by this course.</p>\n<p class=""chakra-text css-o3oz8b"">You can find all the primary Spring Boot documentation here:\n<a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/"">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">Direct link to the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#reference"">Datasource configuration<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> referenced by this course.</p></div>']",['https://video.udacity-data.com/topher/2020/March/5e7401e9_screen-shot-2020-03-19-at-12.52.56-pm/screen-shot-2020-03-19-at-12.52.56-pm.png'],https://www.youtube.com/embed/2__yAirWxhs
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 6: Critter Chronologer,6.1  Project Instructions,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Design and implement the data model for <strong>Critter Chronologer</strong>, a Software as a Service application that provides a scheduling interface for a small business that takes care of animals. This Spring Boot project will allow users to create pets, owners, and employees, and then schedule events for employees to provide services for pets.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">""Is it time for my appointment yet?""</em></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Starter Code</h3>\n<p class=""chakra-text css-o3oz8b"">You can access and download <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c3-data-stores-and-persistence-project-starter"">the starter code here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Instructions for setting up your system for the project are included in the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c3-data-stores-and-persistence-project-starter/blob/master/README.md#getting-started"">project README<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Task 1: Configure Properties</h3>\n<p class=""chakra-text css-o3oz8b"">The starter project contains a blank <strong>application.properties</strong> file. Provide the appropriate connection url and credentials for Spring to configure your external db as the primary data source. If you want Spring to automatically generate schema for you, set values for initialization-mode and ddl-auto to customize the way Spring generates or updates your schema.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Task 2: Configure Unit Tests</h3>\n<p class=""chakra-text css-o3oz8b"">Create a new <strong>application.properties</strong> file in your <strong>test/resources</strong> directory and configure it to use an H2 in-memory database for unit tests. The starter project includes a set of functional tests to help you make sure you’ve met the requirements. More information can be found about the unit tests and how to run them in the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c3-data-stores-and-persistence-project-starter#testing""><strong>Testing</strong> section of the README<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. They will fail for now because the starter project controller methods are incomplete, but you can use them to check your progress as you go.</p>\n<p class=""chakra-text css-o3oz8b"">The starter project also includes a Postman collection under <strong>src/main/resource/Udacity.postman_collection.json</strong>. Importing this collection into the Postman application will provide you with a variety of requests you can submit. You should use them to confirm functionality of your external data source as you work. You will also find information about the Postman collection in the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c3-data-stores-and-persistence-project-starter#postman"">project README<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">A successful Postman request</em></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Task 3: Design Entities To Represent Your Data</h3>\n<p class=""chakra-text css-o3oz8b"">You’ll need to decide how to persist your information. To complete this project, you will need to store the following:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Two different kinds of users - Employees and Customers.</li><li class=""css-cvpopp"">Any type of pet, such as cats, dogs, lizards, hedgehogs, toucans, etc. We don\'t want to discriminate against owners of odd pets!</li><li class=""css-cvpopp"">Schedules that indicate one or more employees will be meeting one or more pets to perform one or more activities on a specific day.</li></ol>\n<p class=""chakra-text css-o3oz8b"">As you consider your design, think about how you want these entities to be stored in your database. Be deliberate about whether you are representing data via inheritance or composition and use the tools that Spring and Hibernate provide to create the appropriate tables to relate your data. Remember that the Data Transfer Objects represent the structure of request and response data, but do <strong>not</strong> have to represent the structure of your persistence model. The Data Transfer Objects are represented by the <strong>[NAME]DTO.java</strong> files in the starter code.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Task 4: Create Tables in your Database</h3>\n<p class=""chakra-text css-o3oz8b"">There are a variety of ways to create the tables your program will use. Hibernate can automatically generate them when you launch the application, or you may use a schema.sql to manually define and create the tables. Automatic generation is a simpler, quicker solution and recommended for this project. Just as some of your furry clients would choose to Hibernate, we suggest the same! That being said, you may choose any method you wish.</p>\n<p class=""chakra-text css-o3oz8b"">Once your tables are constructed, review the schema in MySQL workbench or in another tool of your choice. Hibernate’s HQL and Spring Data’s JPQL allow you to work with Java objects, but it’s still useful to look at the SQL schema verify your Entity design produces the type of tables you want.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Task 5: Create a Data Access Layer</h3>\n<p class=""chakra-text css-o3oz8b"">It’s important to isolate requests to the database from the business logic of our application in order to minimize the impact of changes. In other words, we want a pet door to let your marmot, wombat, and capybara reach the database while keeping your product owner out. There are a variety of ways to do this. You can use the Data Access Object pattern, Spring Data Repositories, or some combination thereof to create a single DAO or Repository for each type of Entity you created in the previous step. These will handle persistence requests pertaining to those Entities.</p>\n<p class=""chakra-text css-o3oz8b"">For this project, you may elect to use any of the persistence strategies discussed in this course. That could mean using a JdbcTemplate to execute native queries, using Hibernate and EntityManager, or using Spring Data JPA. Regardless of your approach, be sure to encapsulate persistence logic inside your Data layer.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Task 6: Create a Service Layer</h3>\n<p class=""chakra-text css-o3oz8b"">This project is designed so that the majority of the work can be performed by the Data layer, but you still need another layer that can combine calls to multiple DAOs or Repositories. Create Service objects that can handle requests from the Controller layer and make the appropriate calls to the Data layer. Avoid exposing the starter code’s DTO objects to your Service layer. The Service layer should work with Entities or primitives, but not DTOs.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Task 7: Update the Controller to use Services</h3>\n<p class=""chakra-text css-o3oz8b"">Inject Service references into the provided Controller classes and use those Services to complete the methods in the Controller. Once you have completed each request, test it using the JUnit tests and Postman.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Task 8: Review and Refactor</h3>\n<p class=""chakra-text css-o3oz8b"">Your project should now support the following workflow:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Create a new customer.</li><li class=""css-cvpopp"">Create a pet for that customer.</li><li class=""css-cvpopp"">Create an employee.</li><li class=""css-cvpopp"">Update the employee’s schedule.</li><li class=""css-cvpopp"">Find out which employees with the right skills are available on a given date.</li><li class=""css-cvpopp"">Schedule one or more employees to do a set of activities with one or more pets.</li><li class=""css-cvpopp"">Look up currently scheduled events for an employee, a pet, or a customer.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">""Smells like a well-factored program!""</em></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If you can do all these things, you should be able to send all the requests from the Postman collection, and your unit tests should pass.</p>\n<p class=""chakra-text css-o3oz8b"">Once both of these things are working, take another pass through your project and look for opportunities to clean things up.\nDo you need to add comments?\nAre you handling exceptional cases?\nWould anything be easier if you changed your data model?\nDo you have clear separation between your layers?\nIs there any functionality not requested by the Controllers that would be nice to add?</p></div>']","['https://video.udacity-data.com/topher/2020/January/5e162028_2020-01-07-rev/2020-01-07-rev.jpg', 'https://video.udacity-data.com/topher/2020/January/5e162195_postman-1/postman-1.png', 'https://video.udacity-data.com/topher/2020/January/5e162267_crisp/crisp.jpg']",
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 6: Critter Chronologer,6.2  Project Rubric,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Connect applications to external MySQL database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>src/main/resources/application.properties</strong> file contains entries specifying the datasource url and user credentials.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Connect unit tests to internal H2 database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>src/test/resources/application.properties</strong> file contains entries specifying the internal h2 url and credentials.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Initialize DataSources from within Spring</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Tables are created in a <strong>schema.sql</strong> or the <strong>application.properties</strong> file specifies an initialization mode and ddl-auto.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create Entities that represent the storage needs of the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Each Entity should represent a single, coherent data type. This project will require Entities that represent multiple types of pets, both customer and employee users, and schedules that associate pets and employees. This will require at least three Entity classes and perhaps more, depending on which strategies for managing complex or polymorphic types are chosen.</p>\n<p class=""chakra-text css-o3oz8b"">Relationships between Entities should be clear from the Entity design. Entities that contain references to multiple objects of the same type should represent that relationship with collection classes, not by packing multiple values into a single field, such as a delimited String or bit-packed integer.</p>\n<p class=""chakra-text css-o3oz8b"">If polymorphic types are used, be sure to consider which table mapping strategy you wish to use and comment in the respective Entity classes why you’ve chosen a particular strategy.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create components to access the data source</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The application should either use the DAO pattern or Repository pattern to isolate access to your data source. You should have one DAO or Repository for each Entity you define and that component will expose CRUD operations to the rest of the program.</p>\n<p class=""chakra-text css-o3oz8b"">A DAO or Repository can handle complex query operation, but should not combine multiple separate actions into a single call.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Choose appropriate data types</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When considering data that can be represented by a variety of types, prefer choices that maximize clarity and limit the potential for invalid data.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Date vs. DateTime vs. Time</strong> - Do not store date or time information unrelated to the requirements of that field.</li><li class=""css-cvpopp""><strong>Set vs. List</strong> - Select collections that match your constraints, such as uniqueness.</li><li class=""css-cvpopp""><strong>Enum vs. String constant vs. int constant</strong> - Where possible, prefer Enum representation in Java to maximize compiler assistance. SQL representation is up to you.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Additionally, consider both the current and long term needs of the data and choose data types that will be resilient to change without being inefficient.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Long vs Int</strong> - Generally longs for ids and ints for everything else is fine, but always consider the ranges for your values</li><li class=""css-cvpopp""><strong>SQL Column width</strong> - Large widths don’t cost anything if unused, so avoid imposing narrow width restrictions on fields that could occasionally be long, like name. Restrict width on fields you know will always have a finite length and increase width on fields that you want to allow more than the default (255 for hibernate).</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Set Transaction Boundaries</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Individual SQL request are already transactional, but any part of your program that initiates a database request should start a transaction before taking steps that can cause failure. For most projects, a sensible transaction boundary will likely occur at the Service layer. You can begin transactions by annotating the methods @Transactional, or you can specify an entire class as @Transactional to mark all methods transactional.</p>\n<p class=""chakra-text css-o3oz8b"">If you wish to use the EntityManager to manually start and end transactions you may, but be sure to minimize the scope of each method to limit the necessity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Transform Entity Data into DTOs</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The output from your Data layer is in a format suitable for use by the rest of the application, but not necessarily the format you want to provide to consumers of your REST endpoints.</p>\n<p class=""chakra-text css-o3oz8b"">For the purpose of this program, a number of pre-made DTOs have been provided to demonstrate the requirements of the front end without implying the structure of data on the back end. DTO needs will vary by consumer, but for the purpose of this program you will need to convert your Entity data back into the provided DTO format.</p>\n<p class=""chakra-text css-o3oz8b"">This mapping should happen either in the DTO itself or in the Controller layer, so that the Service layer does not need to know anything about DTO structure. It should not happen in the Service layer. Feel free to use Spring utilities such as BeanUtils.copyProperties to facilitate copying properties of the same name between objects.</p>\n<p class=""chakra-text css-o3oz8b"">If you’re feeling adventurous, check out the Stand Out Suggestions #2 and replace some of the DTOs with the original Entities annotated using JSONView and JSONIgnore. Many applications will create DTOs for large transformations but expose annotated Entities for scenarios where little or no transformation is necessary. Note that this approach may require updates to the unit tests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Separate Domain Logic from Persistence Layer</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Partition your logic into these layers:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Service Layer</strong> retrieves information from one or more data sources. It can handle coordination between multiple data sources to solve multi-step problems</li><li class=""css-cvpopp""><strong>Data Layer</strong> modifies or returns Entities. It can join tables to aggregate data across multiple Entity types but should avoid performing multiple operations in a single request.</li></ul>\n<p class=""chakra-text css-o3oz8b"">For example, if you wanted to modify an incoming Schedule request if it occurs on the same date as a Pet’s birthday, you would do this in the Service layer by first looking up the Pet and then modifying and saving the Schedule.</p>\n<p class=""chakra-text css-o3oz8b"">However, if you wanted to find all pets who had an event scheduled on their birthday, this would make more sense as a single query, rather than having the Service layer request all Schedules and compare dates itself.</p>\n<p class=""chakra-text css-o3oz8b"">Validation should occur in the Service layer rather than the Data layer, so rather than writing a query that will fail for invalid data, it is better to handle or throw an exception from the Service layer.</p>\n<p class=""chakra-text css-o3oz8b"">Do not put any domain logic into the Controller layer.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">DAO or Repository objects focus on their own Entities</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Repositories should return objects of their own Entity type. For example, you would expect a  “findPetsByOwner” query in the Pet Repository, rather than creating a method in a User or Customer Repository that looks up a customer then returns the Pets associated with it.</p>\n<p class=""chakra-text css-o3oz8b"">While the Data layer can join and sometimes even modify other tables, the primary focus should be on the Entity it manages. In this project, every method that returns an Entity or List of Entities from the data layer should exist in the DAO or Repository of the same name as that Entity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write code that passes all unit tests</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All original unit tests must all pass. You can write your own, but you will only be evaluated on the passing of:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testCreateCustomer</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testCreateEmployee</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testAddPetsToCustomer</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testFindPetsByOwner</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testFindOwnerByPet</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testChangeEmployeeAvailability</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testFindEmployeesByServiceAndTime</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testSchedulePetsForServiceWithEmployee</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testFindScheduleByEntities</code></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write code that allows all requests in the included Postman collection to execute</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the requests in the Postman collection can be run and return correct information based on the data requested.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Add additional validations. Can you prevent requests from creating invalid schedules? Avoid detached Pets with no owners?</li><li class=""css-cvpopp"">It may be possible to replace some or all DTOs by using JSONView and JSONIgnore annotations. Can you replace the DTO objects without compromising encapsulation between the data layer and the controller layer? Watch out for lazy loading of collections!</li><li class=""css-cvpopp"">Add support for custom behaviors for Pets, or maybe a way to specify which activities are relevant to which type of pet. Can you implement this solution in a way that allows you to add new pets or change pet behavior without modifying code each time?</li><li class=""css-cvpopp"">Create new endpoints that complete the rest of the missing CRUD operations and support them on the back end. Or come up with additional data about your Entities that may be relevant and write queries to reference it.</li><li class=""css-cvpopp"">Add support for Schedules that include a startTime and endTime. Add a query that can find an open employee for a specific timeslot during the day.</li></ol></div>']",[],
Java Web Developer,COURSE 4:Data Stores & Persistence,Lesson 6: Critter Chronologer,6.3  Submit Project,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Connect unit tests to internal H2 database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">✅ src/test/resources/application.properties file contains entries specifying the internal h2 url and credentials.</h3>\n<p class=""chakra-text css-o3oz8b"">This demonstrates a clear understanding of the need for separate database configuration for testing and production environments. It\'s crucial for accurate and reliable testing of your application\'s database-related functionality.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># H2 Database Configuration</span><span>\n</span><span>spring.datasource.url</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>jdbc:h2:mem:testdb\n</span><span>spring.datasource.driverClassName</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>org.h2.Driver\n</span><span>spring.datasource.username</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>sa\n</span><span>spring.datasource.password</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>\n</span><span>spring.datasource.platform</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>h2\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Hibernate settings</span><span>\n</span><span>spring.jpa.database-platform</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>org.hibernate.dialect.H2Dialect\n</span><span>spring.jpa.hibernate.ddl-auto</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>update\n</span><span>spring.jpa.show-sql</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>true\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># H2 Console Configuration (Optional)</span><span>\n</span><span>spring.h2.console.enabled</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>true\n</span><span>spring.h2.console.path</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span>/h2-console</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>src/test/resources/application.properties</strong> file contains entries specifying the internal h2 url and credentials.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Connect applications to external MySQL database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">✅ src/main/resources/application.properties file contains entries specifying the datasource url and user credentials.</h3>\n<p class=""chakra-text css-o3oz8b"">This demonstrates a clear understanding of the application\'s data source configuration requirements. It also helps ensure that the application is correctly set up to interact with the database, which is crucial for its proper functioning.</p>\n<p class=""chakra-text css-o3oz8b"">Useful Resource:- <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.geeksforgeeks.org/spring-boot-application-properties/"">https://www.geeksforgeeks.org/spring-boot-application-properties/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-apache"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span># Server port is arbitrary\n</span>server.port=8082\n\n# Data Source Setup\n# Note: Users must create a mysql db that they will reference here, create a user that has access to it on localhost\n#       and provide the credentials below to access it\n\n# uncomment the below lines to view sql output in console\n#spring.jpa.show-sql=true\n#spring.jpa.properties.hibernate.format_sql=true\n\n# MySQL Database Configuration\nspring.datasource.url=jdbc:mysql://localhost:3306/fsoft_db\nspring.datasource.username=root\nspring.datasource.password=1234567890\nspring.datasource.driverClassName=com.mysql.cj.jdbc.Driver\n\n# Hibernate settings\nspring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect\nspring.jpa.hibernate.ddl-auto=create\nspring.jpa.show-sql=true\n\n\n## Datasource settings for PostgreSQL\n#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres\n#spring.datasource.username=postgres\n#spring.datasource.password=1234567890\n#spring.datasource.driverClassName=org.postgresql.Driver\n#\n## Hibernate settings\n#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\n#spring.jpa.hibernate.ddl-auto=create\n#spring.jpa.show-sql=true</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>src/main/resources/application.properties</strong> file contains entries specifying the datasource url and user credentials.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Initialize DataSources from within Spring</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">✅ Tables have been successfully created. This was achieved either through utilization of a schema.sql file (containing the appropriate table creation scripts) or by configuring the application.properties file specifing an initialization mode and ddl-auto.</h3>\n<p class=""chakra-text css-o3oz8b"">This ensures your database schema is set up correctly, aligning with your project\'s requirements.</p>\n<p class=""chakra-text css-o3oz8b"">Relevant Links:\n<a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/how-to/data-initialization.html#:~:text=do%20with%20Spring"">Spring Boot Reference Guide: Initializing a Database<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.baeldung.com/spring-boot-data-sql-and-schema-sql#:~:text=3.%20The%C2%A0,SQL%20scripts."">Spring Boot Reference Guide: Creating a schema.sql File<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Tables are created in a <strong>schema.sql</strong> or the <strong>application.properties</strong> file specifies an initialization mode and ddl-auto.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Choose appropriate data types</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">✅✅ Your code carefully selects data types and representations to maximize clarity, minimize invalid data, and ensure adaptability to future changes.</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When considering data that can be represented by a variety of types, prefer choices that maximize clarity and limit the potential for invalid data.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Date vs. DateTime vs. Time</strong> - Do not store date or time information unrelated to the requirements of that field.</li><li class=""css-cvpopp""><strong>Set vs. List</strong> - Select collections that match your constraints, such as uniqueness.</li><li class=""css-cvpopp""><strong>Enum vs. String constant vs. int constant</strong> - Where possible, prefer Enum representation in Java to maximize compiler assistance. SQL representation is up to you.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Additionally, consider both the current and long term needs of the data and choose data types that will be resilient to change without being inefficient.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Long vs Int</strong> - Generally longs for ids and ints for everything else is fine, but always consider the ranges for your values</li><li class=""css-cvpopp""><strong>SQL Column width</strong> - Large widths don’t cost anything if unused, so avoid imposing narrow width restrictions on fields that could occasionally be long, like name. Restrict width on fields you know will always have a finite length and increase width on fields that you want to allow more than the default (255 for hibernate).</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create Entities that represent the storage needs of the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">The requirements that are listed are completely fulfilled.😊✅ Your Entity design guidelines are clear and promote best practices, emphasizing single, coherent data types, clear relationships, and proper handling of polymorphic types.</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Each Entity should represent a single, coherent data type. This project will require Entities that represent multiple types of pets, both customer and employee users, and schedules that associate pets and employees. This will require at least three Entity classes and perhaps more, depending on which strategies for managing complex or polymorphic types are chosen.</p>\n<p class=""chakra-text css-o3oz8b"">Relationships between Entities should be clear from the Entity design. Entities that contain references to multiple objects of the same type should represent that relationship with collection classes, not by packing multiple values into a single field, such as a delimited String or bit-packed integer.</p>\n<p class=""chakra-text css-o3oz8b"">If polymorphic types are used, be sure to consider which table mapping strategy you wish to use and comment in the respective Entity classes why you’ve chosen a particular strategy.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create components to access the data source</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Your pattern choices and guidelines for data source access are clear and align with best practices, promoting a structured and maintainable data access layer.</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.baeldung.com/java-dao-pattern"">Dao pattern in java<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> -- includes explanation of the DAO pattern in Java, including its purpose, implementation, and benefits.</p>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://stackoverflow.com/questions/31305199/repository-pattern-how-to-understand-it-and-how-does-it-work-with-complex-en"">Understanding Repository pattern<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> -- includes insights into the Repository pattern, explaining its concepts and how it works with complex entity structures.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The application should either use the DAO pattern or Repository pattern to isolate access to your data source. You should have one DAO or Repository for each Entity you define and that component will expose CRUD operations to the rest of the program.</p>\n<p class=""chakra-text css-o3oz8b"">A DAO or Repository can handle complex query operation, but should not combine multiple separate actions into a single call.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Set Transaction Boundaries</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">✅ Great! @Transactional is annotated in all service layers.😊</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.geeksforgeeks.org/spring-boot-transaction-management-using-transactional-annotation/"">Additional insights and guidance on transaction management using @Transactional annotation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Individual SQL request are already transactional, but any part of your program that initiates a database request should start a transaction before taking steps that can cause failure. For most projects, a sensible transaction boundary will likely occur at the Service layer. You can begin transactions by annotating the methods @Transactional, or you can specify an entire class as @Transactional to mark all methods transactional.</p>\n<p class=""chakra-text css-o3oz8b"">If you wish to use the EntityManager to manually start and end transactions you may, but be sure to minimize the scope of each method to limit the necessity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Transform Entity Data into DTOs</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">The output from your Data layer is in a format suitable for use by the rest of the application ✅</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The output from your Data layer is in a format suitable for use by the rest of the application, but not necessarily the format you want to provide to consumers of your REST endpoints.</p>\n<p class=""chakra-text css-o3oz8b"">For the purpose of this program, a number of pre-made DTOs have been provided to demonstrate the requirements of the front end without implying the structure of data on the back end. DTO needs will vary by consumer, but for the purpose of this program you will need to convert your Entity data back into the provided DTO format.</p>\n<p class=""chakra-text css-o3oz8b"">This mapping should happen either in the DTO itself or in the Controller layer, so that the Service layer does not need to know anything about DTO structure. It should not happen in the Service layer. Feel free to use Spring utilities such as BeanUtils.copyProperties to facilitate copying properties of the same name between objects.</p>\n<p class=""chakra-text css-o3oz8b"">If you’re feeling adventurous, check out the Stand Out Suggestions #2 and replace some of the DTOs with the original Entities annotated using JSONView and JSONIgnore. Many applications will create DTOs for large transformations but expose annotated Entities for scenarios where little or no transformation is necessary. Note that this approach may require updates to the unit tests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">DAO or Repository objects focus on their own Entities</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Good Job! Repositories are returning objects of their Entity type.</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Repositories should return objects of their own Entity type. For example, you would expect a  “findPetsByOwner” query in the Pet Repository, rather than creating a method in a User or Customer Repository that looks up a customer then returns the Pets associated with it.</p>\n<p class=""chakra-text css-o3oz8b"">While the Data layer can join and sometimes even modify other tables, the primary focus should be on the Entity it manages. In this project, every method that returns an Entity or List of Entities from the data layer should exist in the DAO or Repository of the same name as that Entity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Separate Domain Logic from Persistence Layer</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Great Job! The partitioning of logic into distinct layers, as outlined, reflects a strong understanding of software architecture best practices.😊</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Partition your logic into these layers:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Service Layer</strong> retrieves information from one or more data sources. It can handle coordination between multiple data sources to solve multi-step problems</li><li class=""css-cvpopp""><strong>Data Layer</strong> modifies or returns Entities. It can join tables to aggregate data across multiple Entity types but should avoid performing multiple operations in a single request.</li></ul>\n<p class=""chakra-text css-o3oz8b"">For example, if you wanted to modify an incoming Schedule request if it occurs on the same date as a Pet’s birthday, you would do this in the Service layer by first looking up the Pet and then modifying and saving the Schedule.</p>\n<p class=""chakra-text css-o3oz8b"">However, if you wanted to find all pets who had an event scheduled on their birthday, this would make more sense as a single query, rather than having the Service layer request all Schedules and compare dates itself.</p>\n<p class=""chakra-text css-o3oz8b"">Validation should occur in the Service layer rather than the Data layer, so rather than writing a query that will fail for invalid data, it is better to handle or throw an exception from the Service layer.</p>\n<p class=""chakra-text css-o3oz8b"">Do not put any domain logic into the Controller layer.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write code that passes all unit tests</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Tests that are written in the CritterFunctionalTest.java file pass successfully.</h3>\n<p class=""chakra-text css-o3oz8b"">✅ testCreateCustomer</p>\n<p class=""chakra-text css-o3oz8b"">✅ testCreateEmployee</p>\n<p class=""chakra-text css-o3oz8b"">✅ testAddPetsToCustomer</p>\n<p class=""chakra-text css-o3oz8b"">✅ testFindPetsByOwner</p>\n<p class=""chakra-text css-o3oz8b"">✅ testFindOwnerByPet</p>\n<p class=""chakra-text css-o3oz8b"">✅ testChangeEmployeeAvailability</p>\n<p class=""chakra-text css-o3oz8b"">✅ testFindEmployeesByServiceAndTime</p>\n<p class=""chakra-text css-o3oz8b"">✅ testSchedulePetsForServiceWithEmployee</p>\n<p class=""chakra-text css-o3oz8b"">✅ testFindScheduleByEntities</p>\n<p class=""chakra-text css-o3oz8b""><img alt=""Screenshot 2024-08-29 at 9.14.39 PM.png"" src=""https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/3546516/1724946281/Screenshot_2024-08-29_at_9.14.39_PM.png"" class=""chakra-image css-0"" node=""[object Object]""></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All original unit tests must all pass. You can write your own, but you will only be evaluated on the passing of:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testCreateCustomer</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testCreateEmployee</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testAddPetsToCustomer</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testFindPetsByOwner</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testFindOwnerByPet</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testChangeEmployeeAvailability</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testFindEmployeesByServiceAndTime</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testSchedulePetsForServiceWithEmployee</code></li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">testFindScheduleByEntities</code></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write code that allows all requests in the included Postman collection to execute</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">All the requests in the Postman collection are running and returning correct information based on the data requested.😊</h3>\n<p class=""chakra-text css-o3oz8b"">✅ Save Customer</p>\n<p class=""chakra-text css-o3oz8b"">✅ Save Pet</p>\n<p class=""chakra-text css-o3oz8b"">✅ Save Employee</p>\n<p class=""chakra-text css-o3oz8b"">✅ Add Employee Schedule</p>\n<p class=""chakra-text css-o3oz8b"">✅ Check Availability</p>\n<p class=""chakra-text css-o3oz8b"">✅ Create Schedule</p>\n<p class=""chakra-text css-o3oz8b"">✅ Create Schedule For Employee</p>\n<p class=""chakra-text css-o3oz8b"">✅ Find Schedule By Pet</p>\n<p class=""chakra-text css-o3oz8b"">✅ Find Schedule By Employee</p>\n<p class=""chakra-text css-o3oz8b"">✅ Find Schedule By Owner</p>\n<p class=""chakra-text css-o3oz8b"">✅ Get All Customers</p>\n<p class=""chakra-text css-o3oz8b"">✅ Get All Pets</p>\n<p class=""chakra-text css-o3oz8b"">✅ Get Pets By Owner</p>\n<p class=""chakra-text css-o3oz8b"">✅ Get Owner By Pet</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the requests in the Postman collection can be run and return correct information based on the data requested.</p></div>']",['https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/3546516/1724946281/Screenshot_2024-08-29_at_9.14.39_PM.png'],
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.1  Course Overview,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In this course, you will learn about the technologies involved in the <strong>”Security”</strong> and <strong>”DevOps”</strong> of a Java-based enterprise application development. By the end of this course, you will be able to...</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Implement authentication and authorization on a Spring Boot application using JSON Web Token (JWT)</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Unit test the Spring application using <strong>”JUnit”</strong> and <strong>”Mockito”</strong> frameworks</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Use SLF4J logging API and Log4J logging framework for code insight and debugging the application</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Use the <strong>”Splunk”</strong> tool for analyzing machine-generated raw data</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Set up a <strong>”CI/CD”</strong> pipeline, that will connect and automate the deployment of your code present in Github to the server running on the cloud.</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">Also, we will introduce an “eCommerce application” that you will work through and submit as your final project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Motivation 1 - Authentication and Authorization</h3>\n<p class=""chakra-text css-o3oz8b"">Security is an essential aspect of a web application. There could be various security breaches that can happen if the web application has not addressed these during the design and development phase. The diagram below describes some common security vulnerabilities:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Some common security vulnerabilities</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We will learn about a few authentication and authorization mechanisms, along with the implementation of JSON web token-based (JWT) authentication.</p>\n<h3 class=""chakra-heading css-k57syw"">Motivation 2 - Logging and Splunk</h3>\n<p class=""chakra-text css-o3oz8b"">An enterprise web application generates a massive amount of raw data, such as application logs, server logs, network devices logs, IoT data, and many more. Therefore, to evolve the application, we need a suitable depth of logging and an efficient tool to analyze the logs using Splunk.</p>\n<h3 class=""chakra-heading css-k57syw"">Motivation 3 - DevOps</h3>\n<p class=""chakra-text css-o3oz8b"">The requirements of the customer are agile, as is the software development model. We need to follow the industry best-practices, which will increase the speed of software delivery and the speed of software evolution (enhancements). This requirement makes it essential to use DevOps model for  <strong>“expeditious”</strong> software development.</p>\n<hr aria-orientation=""horizontal"" aria-hidden=""true"" class=""chakra-divider css-zmjcvi""></div>']",['https://video.udacity-data.com/topher/2020/February/5e58a422_copy-of-images/copy-of-images.png'],https://www.youtube.com/embed/pi7sa00tVws
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.2  Authentication,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">After completing this lesson, you will be able to ...</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Explain the fundamentals of authentication and authorization</li><li class=""css-cvpopp"">Implement the hashing and salting techniques, such as bCrypt, and SHA-256</li><li class=""css-cvpopp"">Make use of JSON Web Tokens (JWTs) for authentication in your Spring application</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Authentication confirms your identity. It is a process that proves that you are the person who you say you are. In the digital world, the most common way to authenticate is to use a username and password. For example, while logging into your eCommerce account, you prove your identity by providing an email and a password, sometimes followed by an OTP or a second factor. There are many other ways to authenticate, and these are depicted in the figure below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Common Methods for Authentication</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Common Mechanisms for Authentication</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Token-based authentication</strong> - It is a temporary credential that you (client) have which proves your identity. Read more <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Note: we do use this later in the form of JWT, but we first authenticate with the username and password, then send the token on each subsequent request.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>OAuth</strong> - is an industry-standard protocol for authorization that provides a token on your behalf once you’ve authenticated to the external service. Read more <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://auth0.com/docs/protocols/oauth2"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.  For example, if you\'ve ever seen a ""Sign in with Google/Facebook/etc"", this is likely done using OAuth.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Time-based token</strong> (TOTP) - a token is generated with something only you know. This token changes after some time period. Read more <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.freecodecamp.org/news/how-time-based-one-time-passwords-work-and-why-you-should-use-them-in-your-app-fdd2b9ed43c3/"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. This is very commonly used in Two Factor Authentication as the 2nd factor. If you have random codes you need to enter, they may have been generated using this scheme.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Biometric authentication</strong> such as Fingerprint or Facial recognition (popular on smartphones). Most of the standard mechanisms for authentication utilizes either of the following two ""Network authentication protocols"": i). Kerberos, and ii). Secure Sockets Layer (SSL) / Transport Layer Security (TLS).</p>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Authentication</strong> is all about...</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Determining what a user is allowed to access.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Proving that you are the person you say you are.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following are examples of authentication?<br>\n(Select all that apply.)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Photo ID</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Social Security card</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Biometric screening (e.g., fingerprints, facial recognition, etc.)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Username and password</p></div>', '<div class=""ureact-markdown css-tc5hjw""><hr aria-orientation=""horizontal"" aria-hidden=""true"" class=""chakra-divider css-zmjcvi"">\n<h3 class=""chakra-heading css-k57syw"">More to Explore - Network Authentication Protocols</h3>\n<p class=""chakra-text css-o3oz8b"">Kerberos provides secure authentication for client/server applications by using secret-key cryptography. Here are some links on Kerberos <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.kerberos.org/docs/index.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. On the other hand, SSL/TLS uses a cryptographic system that uses two keys to encrypt data − a public key known to everyone and a private or secret key known only to the recipient of the message. A typical example is an HTTPS website that utilizes SSL/TLS certificate that is signed by a publicly trusted Certifying Authority. Here is a  resource for SSL/TLS <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://en.wikipedia.org/wiki/Transport_Layer_Security"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">Details about these ""Network authentication protocols"" are beyond the scope of this lesson.</p></div>']",['https://video.udacity-data.com/topher/2020/February/5e39ae41_authentication/authentication.png'],https://www.youtube.com/embed/XZgBIIs2Qeg
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.3  Points to Consider,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Good authentication practices center around protecting the data used for authentication, such as:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">You wouldn\'t just tell people your password, and so your website shouldn\'t either.</li><li class=""css-cvpopp"">You also need to ensure that passwords are sufficiently random and complex, with things like length requirements, to ensure that your credentials aren\'t easily cracked.</li><li class=""css-cvpopp"">They must not be able to be forged easily, so no one can impersonate anyone else. Finally, they have to be deterministically generated, that is they must be generated the same way every time, to ensure you actually can authenticate users into your system.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As referenced in the above video, you can check out the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md"">OWASP authentication cheatsheet<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for guidelines to authentication best practices. This is a great resource to check out now, or to bookmark for later reference.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following is true with regard to authentication considerations and mechanisms?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Password length and complexity requirements shouldn\'t be considered while deciding on Authentication strategy.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The data used for authentication should be sufficiently random, is an authentication consideration.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Time based token (TOTP)  can be used as an authentication mechanism.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Let\'s learn more about Hashing, and see how it is implemented in Java.</p></div>']",[],https://www.youtube.com/embed/NPIO7_4sZbg
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.4  Hashing,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The two essential properties of hashing are:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Hashing must be irreversible</li><li class=""css-cvpopp"">Each input should have a unique output (or, practically, as close to unique as possible)</li></ul>\n<p class=""chakra-text css-o3oz8b"">A scenario, when a hash function gives the same output for different inputs, is called a <strong>collision</strong>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Irreversible vs. Reversible functions</h3>\n<p class=""chakra-text css-o3oz8b"">Let there be a function <em class=""chakra-text css-o3oz8b"">f</em>, which can generate unique hash values for a given set of input. Another function <em class=""chakra-text css-o3oz8b"">g</em> can get the original value back if the hash value is given as input. In such a case, the function <em class=""chakra-text css-o3oz8b"">f</em> would be called <strong>reversible</strong>, as we can get the original value back. Hence, <em class=""chakra-text css-o3oz8b"">f</em> cannot be used as a Hash function. Following is an example of a reversible function:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Theoretical Example</h3>\n<p class=""chakra-text css-o3oz8b"">Let\'s look at a simple example of hashing. Suppose that a user has the following password:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">passw0rd!</code> - If we directly store this text in the database, we will have a major security vulnerability.</li></ul>\n<p class=""chakra-text css-o3oz8b"">So instead, we can first run the password through a one-way function that produces a jumbled up piece of text (which has no obvious discernible relationship to the original password). That jumbled up piece of text is the <em class=""chakra-text css-o3oz8b"">hash</em>, and it might look something like this:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">passw0rd!</code> → hash function → <code class=""chakra-code css-1u83yg1"">@kdF3lkAWoLA</code></li></ul>\n<p class=""chakra-text css-o3oz8b"">So when the client interacts with the server, rather than directly sending the password, the client can instead send the hash:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">passw0rd!</code> → hashing function → <code class=""chakra-code css-1u83yg1"">@kdF3lkAWoLA</code> → stored in database</li></ul>\n<p class=""chakra-text css-o3oz8b"">This way, if someone gains access to the database, they will still not have access to the plain-text password.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of these statements correctly describes a hashing function?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A hashing function produces output that is hard or impossible to reverse (it is a one-way function)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A hashing function encrypts the data in a way that can be reversed as needed (it is a two-way function)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A good hash function needs to be efficiently computable, so it needs to be reasonably fast.\nIt needs to be uniform, which means given an input the output needs to be as unique as possible. In other words, a low number of collisions exists.\nA given output should give absolutely no indication of its input. Inputs should be effectively random and uniformly distributed. Changing ""cat"" to ""bat"" should yield unpredictable results (this is known as the avalanche property)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Some famous Hashing Algorithms</h3>\n<p class=""chakra-text css-o3oz8b"">There are many hashing algorithms prevalent in the industry.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>MD5</strong>: The MD5 Message-Digest Algorithm is a hash function that accepts an input message of any length, and correspondingly produces a 128-bit (16-byte) hash value. Mostly, MD5 is used to verify data integrity. It was proposed by Ronal Rivest in 1992, as specified in <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://tools.ietf.org/html/rfc1321"">RFC 1321<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. MD5 is comparatively unsafe, as it might get reversed by using brute-force-attack. Also, the chances of collision are very high in MD5. For non-critical applications, MD5 can be a good choice as it is computationally faster than other algorithms.<br><br></li><li class=""css-cvpopp""><strong>SHA</strong>: The SHA (Secure Hash Algorithm) is a set (SHA-0, SHA-1, SHA-2, and SHA-3) of cryptographic hash functions developed by the National Institute of Standards and Technology (NIST). In comparison to MD5, SHA generates secure hashes. SHA-1 is a 160-bit hash function. SHA-2 is further of two types: SHA-256 and SHA-512. SHA-256 is a 256-bit hash function that provides 128 bits of security in the case of collision attacks, while SHA-512 is a 512-bit hash function is designed for 256 bits of security. SHA-3 supports the same hash lengths as SHA-2. Chances of collision are high in SHA as well, but lesser than MD5. Thus, SHA-2 could be a good choice for general purpose application with a limited set of inputs, such as a University portal.<br><br></li><li class=""css-cvpopp""><strong>bCrypt</strong>: It is generally used to generate the hash for user-passwords. bCrypt is based on the Blowfish cipher algorithm. It has a crucial phase for key setup. This phase starts with encrypting a sub-key and uses the output of this encryption to change another sub-key. This way, the bCrypt involves iterative steps for generating the hash, making it a preferred choice of developers for critical applications.<br><br></li><li class=""css-cvpopp""><strong>sCrypt</strong>: It is a computationally intensive password-based key derivation function, proposed in 2016, as specified in <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://tools.ietf.org/html/rfc7914"">RFC 7914<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. As part of the algorithm, it generates a large vector of pseudorandom bit strings. Thus, it requires a large amount of memory for computation. It isn\'t easy for a brute-force-attacker to reverse the hash, as it would involve a significantly high amount of time, memory, and a high number (billion) of attempts. Other password-based key derivation functions such as PBKDF1 and PBKDF2 have relatively low resource demands.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of these hashing algorithms is good for passwords?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">MD5</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Bcrypt</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Collision Resolution Techniques</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A collision can be resolved by using any of the following techniques:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Separate Chaining</strong> - It is a type of Open Hashing technique. The idea is to store the keys corresponding to collision (same) hash outputs in a Linked List. There would be a separate Linked List for each unique hash output. <br><br></li><li class=""css-cvpopp""><strong>Open Addressing</strong> - It is also called Closed Hashing. In this approach, for a given set of $n$ input keys, we take a data structure that can accommodate more than $n$ keys. The idea is to store the keys corresponding to collision (same) hash outputs in the next available slot in the data structure. <br><br>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Linear or quadratic probing - Keep <em class=""chakra-text css-o3oz8b"">probing</em> until an empty slot is found. <br><br></li><li class=""css-cvpopp""><strong>Double Hashing</strong> -  We use two hash functions - one for hashing, and another for calculating the <em class=""chakra-text css-o3oz8b"">offset</em>. Then, this offset is appended to the output of the first hash function. This way, the final output is expected to be a collision-free value.</li></ul>\n</li></ol>\n<p class=""chakra-text css-o3oz8b"">You may find it useful to read further about Collision Resolution Techniques <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://en.wikipedia.org/wiki/Hash_table#Collision_resolution"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']","['https://video.udacity-data.com/topher/2019/September/5d87c72d_screen-shot-2019-09-22-at-12.10.06-pm/screen-shot-2019-09-22-at-12.10.06-pm.png', 'https://video.udacity-data.com/topher/2020/February/5e39b35e_collisionresolutiontechniques/collisionresolutiontechniques.png']",https://www.youtube.com/embed/zyRoz2ziTow
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.5  Salting,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A salt is random data that is used as an additional input to the hash function so that the final hash becomes more secure.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Salting is an approach to generate two different hash values for two different users providing the same input.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">How does the Salting Works?</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The following figure shows another example to explain the concept of Salting:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Example - Two users providing the same password, would generate a same hash. However, the salting will generate a different hash.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following is not a good practice for storing passwords?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hashing</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Salting</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Encryption</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Using a database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What is a <em class=""chakra-text css-o3oz8b"">salt</em>?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A one way function that is not easily reversed.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A constant value appended to a user’s password.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Random data appended to a user’s password.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Something you put on french fries</p></div>']",['https://video.udacity-data.com/topher/2020/February/5e39b468_salting/salting.png'],https://www.youtube.com/embed/qfcENVs6Xks
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.6  Hashing (SHA) Implementation,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Step 2 - Create the <code class=""chakra-code css-1u83yg1"">createSalt()</code> to return a byte array</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Method to generate a Salt</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">createSalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecureRandom</span><span> random </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecureRandom</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> salt </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(2, 124, 124);"">16</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  random</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">nextBytes</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Step 3 - Create the <code class=""chakra-code css-1u83yg1"">get_SecurePassword()</code> to return a String</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Method to generate the hash. </span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">//It takes a password and the Salt as input arguments</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">get_SecurePassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> passwordToHash</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> generatedPassword </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">try</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MessageDigest</span><span> md </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MessageDigest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getInstance</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""SHA-256""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   md</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">update</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> bytes </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> md</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">digest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>passwordToHash</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getBytes</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">StringBuilder</span><span> sb </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">StringBuilder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">for</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> i</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> i</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span> bytes</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>length </span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>i</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">++</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    sb</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">append</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">toString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>bytes</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span>i</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&amp;</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0xff</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0x100</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">16</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">substring</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>   generatedPassword </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> sb</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">toString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> \n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">catch</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">NoSuchAlgorithmException</span><span> e</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   e</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">printStackTrace</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> generatedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To get acquainted with the  MessageDigest class, use your text editor to implement the MD5 algorithm (in the same manner, as shown above), and compare the generated hash, with and without salt.</p>\n<p class=""chakra-text css-o3oz8b"">Hint: Use <code class=""chakra-code css-1u83yg1"">getInstance(""MD5"")</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Generate the MD5 hash without salt</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Generate the MD5 hash with salt</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Compare the MD5 hash value with the SHA-256 hash value</p></div>']",[],
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.7  Hashing (bCrypt) Implementation,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Step 3 - Call either of the following built-in methods of the BCryptPasswordEncoder class</strong><br><br></p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">encode()</code> method - Encodes the raw password. Generally, a good encoding algorithm applies an SHA-1 or greater hash combined with an 8-byte or greater randomly generated salt.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>   </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// To encode a given rawPassword</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">encode</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">CharSequence</span><span> rawPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>rawPassword </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""rawPassword cannot be null""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>random </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                salt </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BCrypt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">gensalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getVersion</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>strength</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>random</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                salt </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BCrypt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">gensalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getVersion</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>strength</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BCrypt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">hashpw</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>rawPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">toString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b""><br><br>\n2. <code class=""chakra-code css-1u83yg1"">matches()</code> method -  It matches and verifies the encoded password obtained from the storage, and the submitted raw password (after encoding). Returns true if the passwords match, false if they do not. The stored password itself is never decoded.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">boolean</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">matches</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">CharSequence</span><span> rawPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> encodedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>rawPassword </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""rawPassword cannot be null""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>encodedPassword </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&amp;&amp;</span><span> encodedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">length</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!=</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>BCRYPT_PATTERN</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">matcher</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>encodedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">matches</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>logger</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">warn</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Encoded password does not look like BCrypt""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">false</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">BCrypt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">checkpw</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>rawPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">toString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> encodedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>logger</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">warn</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Empty encoded password""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">false</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b""><br><br>\n3. <code class=""chakra-code css-1u83yg1"">upgradeEncoding()</code> method -  It returns true if the encoded password should be encoded again for better security, else false. The default implementation always returns false.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">boolean</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">upgradeEncoding</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> encodedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>encodedPassword </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&amp;&amp;</span><span> encodedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">length</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!=</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Matcher</span><span> matcher </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>BCRYPT_PATTERN</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">matcher</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>encodedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span>matcher</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">matches</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Encoded password does not look like BCrypt: ""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> encodedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> strength </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">parseInt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>matcher</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">group</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> strength </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>strength</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>logger</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">warn</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Empty encoded password""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">false</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> - The code and description above is taken from the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html"">BCryptPasswordEncoder<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> class definition.</p>\n</blockquote></div>']",[],
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.8  Authorization,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The following figure shows the order of execution of basic authentication and authorization in an application that follows the Model View Controller (MVC)  architectural pattern.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Basic authentication and authorization steps</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Role-Based Access Control (RBAC)</h3>\n<p class=""chakra-text css-o3oz8b"">In RBAC, access is given based on a user\'s role—as a manager, engineer, customer service representative, etc.</p>\n<p class=""chakra-text css-o3oz8b"">Permissions can then be given (and limited) to users based on their roles. That way, each type of user only has <em class=""chakra-text css-o3oz8b"">limited access</em>—they are able to access only the specific things they need for their particular job.</p>\n<h3 class=""chakra-heading css-k57syw"">How to bring Authentication and Authorization together?</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Authentication and authorization are different, yet related. You can\'t grant a right to a user (i.e., <em class=""chakra-text css-o3oz8b"">authorize</em> that user) without first knowing who that user is (i.e., by <em class=""chakra-text css-o3oz8b"">authenticating</em> their identity).</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Authorization</strong> is all about...</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Determining what a user is allowed to access.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Proving that you are the person you say you are.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In <strong>RBAC</strong>:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Separate permissions are given to each individual user,</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Permissions are given to a group of users who all share the same role in the company.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The same permissions are given to everyone in the company.</p></div>']",['https://video.udacity-data.com/topher/2020/December/5fcf982a_screenshot-2020-12-08-at-8.41.49-pm/screenshot-2020-12-08-at-8.41.49-pm.png'],https://www.youtube.com/embed/fqTeO0JNGv4
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.9  JWTs,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JSON Web Token (JWT) is an open standard <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://tools.ietf.org/html/rfc7519"">RFC 7519<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, that defines a compact and self-contained way for securely transmitting information between parties as a JSON object.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">JWTs are used for authentication in (RESTful) microservices architecture.</li><li class=""css-cvpopp"">REST is an acronym for REpresentational State Transfer. It is a software-architectural style, in which there is <strong>stateless</strong> communication between client and server.</li><li class=""css-cvpopp""><strong>Stateless</strong> means that the server does not have to store the user cookies or other session data for any incoming request. Rather, the server authenticates a user based on a token (JWT).</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Example</strong> - An example of JSON Web Token is shown below. Can you notice the three parts (a header, payload, and signature) separated by a period (.)?</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-apache"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJVZGFjaXR5X1Rlc3QiLCJleHAiOjE2MDgzNjYxNDJ9.0kjTgAOOJkNxM908qJE9p1503-mi-2tha9UVneI04EXvxte4KpKYl0pVMjXG-FLtDFzfmEuRRYyPm2JRGvlKFg</span></code></div></div></pre>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">The token above is a Base64 encoded form of the individual three parts.</p>\n</blockquote>\n<p class=""chakra-text css-o3oz8b"">These three parts together help to authenticate a user.</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Header</strong> - In the example above, the <code class=""chakra-code css-1u83yg1"">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9</code> represents the header, such as:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(2, 124, 124);"">""alg""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""HS256""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(2, 124, 124);"">""typ""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""JWT""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<br>\n2. **Payload** - The `eyJzdWIiOiJVZGFjaXR5X1Rlc3QiLCJleHAiOjE2MDgzNjYxNDJ9` is the payload, also called a Claim. After Base64 decoding, you can get the actual user-data, such as:\n```json\n{\n""sub"": ""1234"",\n""name"": ""Sareeta Panda"",\n""admin"": true\n}\n```\nThe user-data above is not necessarily secret because anyone who has access to the token can decode (Base64 decoding) the payload. The payload tells us the username/ID (not password) of the user, i.e., who is making the request. \n<br><br>\n3. **Signature** - The remaining third part is the signature, which helps the server to verify the authenticity of the token as well as the user. In fact, the signature is generated by using the header, payload, and a secret residing on the server only. If anyone (header, payload, and a secret) changes, then the signature will also change. \n<h3 class=""chakra-heading css-k57syw"">How does it work?</h3>\n<p class=""chakra-text css-o3oz8b"">The diagram below shows how to generate, and use a JWT.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Two steps while using the JWT for authentication</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Step 1 - Generate JWT</strong> - A user can attempt to log in from any client. The server returns a JSON Web Token (JWT) upon successful validation of the user credentials. This JWT is then stored locally in the client.</li><li class=""css-cvpopp""><strong>Step 2 - Use JWT</strong> - Later, when the user requests to access any protected resource, a JWT is sent along. Then the server performs the JWT validation before granting access to the resource.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">What is statelessness?</h3>\n<p class=""chakra-text css-o3oz8b"">JSON web tokens are intrinsically <em class=""chakra-text css-o3oz8b"">stateless</em>, meaning, the server does not store the user\'s session or cookies. When a JWT is sent back from a client to a server, the server only has to validate the token.</p>\n<p class=""chakra-text css-o3oz8b"">Statelessness also solves the problem of scalability. Let\'s say we have our API server that starts to have a tremendous amount of demand. In this case, we\'ll be spinning up multiple servers over the same service.</p>\n<p class=""chakra-text css-o3oz8b"">Now, a JWT could be hitting any one of these servers, and since it\'s stateless, each of those servers can be confident in the identity provided.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What are some benefits of JWTs?<br>\n(Select all that apply.)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Stateless</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Difficult to Fake</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Expensive to Compute</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Popular and easily implemented across platforms</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Flexible</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What do you understand by “stateless communication between client and server”?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here are the three parts of an example JWT. Do you remember what each is called?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Header</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Payload</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Signature</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Token type and the algorithm to be used in the signature</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""alg""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""HS256""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""typ""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""JWT""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Claim</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""sub""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""1234""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""name""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Sareeta Panda""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(2, 124, 124);"">""admin""</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Encoded header, encoded payload, a secret, and the signing algorithm</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-json"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>HMACSHA256(\n</span><span>  base64UrlEncode(header) + </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"".""</span><span> +\n</span><span>  base64UrlEncode(payload)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span>  secret)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which JWT part is responsible for containing information specific to the currently authenticated user?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Header</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Payload</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Signature</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">True or False: The signature is used to help encrypt a JWT so it cannot be read without a key</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">True</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">False</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resources</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://jwt.io/introduction/"">JWT.io<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> a useful guide and list of popular JSON Web Token implementations.</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://en.wikipedia.org/wiki/Base64"">Base64 Encoding<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://en.wikipedia.org/wiki/HMAC"">HMAC<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> keyed-hash message authentication code</li></ul></div>']",['https://video.udacity-data.com/topher/2020/December/5fd086eb_screenshot-2020-12-09-at-1.42.09-pm/screenshot-2020-12-09-at-1.42.09-pm.png'],https://www.youtube.com/embed/Ea8T8fXsZlc
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.10  JWT Quiz,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of these JWTs may have been tampered with?<br>\nThese were signed with the secret <code class=""chakra-code css-1u83yg1"">learning</code>.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Token 1</strong></p><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXJrIjoiY2VudHJhbCBwYXJrIn0.H7sytXDEHK1fOyOYkII5aFfzEZqGIro0Erw_84jZuGc</span></code></div></div></pre><p class=""chakra-text css-o3oz8b""></p>\n<p class=""chakra-text css-o3oz8b""><strong>Token 2</strong>:</p><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXJrIjoiYmF0dGVyeSBwYXJrIn0.bQEjsBRGfhKKEFtGhh83sTsMSXgSstFA_P8g2qV5Sns</span></code></div></div></pre><p class=""chakra-text css-o3oz8b""></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Token 1</em></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Token 2</em></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Token A</em>:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXJrIjoiY2VudHJhbCBwYXJrIn0.H7sytXDEHK1fOyOYkII5aFfzEZqGIro0Erw_84jZuGc</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Token B</em>:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXJrIjoidW5pb24gc3F1YXJlIn0.N3EaAHsrJ9-ls82LT8JoFTNpDK3wcm5a79vYkSn8AFY</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Token C</em>:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXJrIjoiYmF0dGVyeSBwYXJrIn0.bQEjsBRGfhKKEFtGhh83sTsMSXgSstFA_P8g2qV5Sns</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">{\'park\':\'union square\'}</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">{\'park\': \'battery park\'}</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">{\'park\':\'central park\'}</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Token A</em></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Token B</em></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Token C</em></p></div>']",[],
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.11  Demo: eCommerce Starter Code,"['<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Note - To make it convenient for you, we have created a new Github repo dedicated to this course. All the steps mentioned above will be the same, except the repo name, and the folder name.</p>\n</blockquote>\n<p class=""chakra-text css-o3oz8b"">The repository for the eCommerce application starter code can be found at:\n<a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/JDND""><span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c4-Security-and-DevOps"">https://github.com/udacity/nd035-c4-Security-and-DevOps<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> .  Did you notice that this repo contains multiple branches, that contain the code associated with upcoming demos and exercises?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Switch to a different branch as you progress through this course.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Each branch contains an individual Maven project for you to follow.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">How to work with Github repo?</h3>\n<p class=""chakra-text css-o3oz8b"">You can choose from either of the below two options:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Option - Clone the repo locally</strong><br>\nHere are the steps that you need to follow:\n<ol role=""list"" class=""css-124kmyc""><li class=""css-cvpopp"">Fork the repo to your account.</li><li class=""css-cvpopp"">Clone the repo using the command in your terminal (Linux/MacOS) or Git Bash (Windows):</li></ol>\n</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>   </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">git</span><span> clone https://github.com/USERNAME/nd035-c4-Security-and-DevOps.git</span></code></div></div></pre>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Import the project into the IntelliJ IDE.</li><li class=""css-cvpopp"">Switch between branches, and make changes. By default, you will be on the <em class=""chakra-text css-o3oz8b"">master</em> branch. To switch branch, use the commands:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>   git branch\n</span><span>   git checkout </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">branch-name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">After switching the branch, the code in the IntelliJ will also change automatically.</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Push the local changes back to the remote (online) repo in your account. You can use:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-sql"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>   git </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">add</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>A \n</span><span>   git </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">commit</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>m </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""your message""</span><span>\n</span><span>   git push origin </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>branch</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>name</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Option - Link your IntelliJ IDE to Github repo</strong> (Recommended)<br>\nYou can even connect your IntelliJ directly with the Github repo (in your account), and switch branches when needed. Moreover, you can perform all Github operations from the IntelliJ IDE. Refer to the <strong>Troubleshooting Tips</strong> page for more info.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Before going any further, be sure you\'ve done the following:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Either forked and cloned the repository, or linked IntelliJ to the Github repo</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Imported the eCommerce application into IntelliJ</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Gone through the project README file in Github</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Class Diagrams</h3>\n<p class=""chakra-text css-o3oz8b"">Let\'s have a look at various classes present in the starter code.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Classes in the <strong>controllers</strong> package</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Classes in the <strong>model/persistence/</strong> package. In addition, it has a <strong>repositories</strong> sub-package.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Classes in the <strong>model/persistence/repositories/</strong> package</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Classes in the <strong>model/requests/</strong> package</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Before going further, be sure you\'ve tried the following:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a collection in Postman</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Save your requests for quick use</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Try making a <code class=""chakra-code css-1u83yg1"">CreateUser</code> request</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Try making a <code class=""chakra-code css-1u83yg1"">getUser</code> request</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Before going further, be sure you\'ve tried the following:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Try making an <code class=""chakra-code css-1u83yg1"">addToCart</code> request</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Try making an <code class=""chakra-code css-1u83yg1"">submitOrder</code> request</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Before going any further, it would be a good idea to make sure you feel relatively comfortable with the starter code. Here are some things to try:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Look up a user\'s order history</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">View information about the various items in the database</p></div>']","['https://video.udacity-data.com/topher/2020/December/5fd2110a_screenshot-2020-12-10-at-5.41.22-pm/screenshot-2020-12-10-at-5.41.22-pm.png', 'https://video.udacity-data.com/topher/2020/December/5fd1d53c_controllers/controllers.png', 'https://video.udacity-data.com/topher/2020/December/5fd1d564_screenshot-2020-12-10-at-12.32.39-pm/screenshot-2020-12-10-at-12.32.39-pm.png', 'https://video.udacity-data.com/topher/2020/December/5fd1d3d2_screenshot-2020-12-10-at-12.30.38-pm/screenshot-2020-12-10-at-12.30.38-pm.png', 'https://video.udacity-data.com/topher/2020/December/5fd1d4de_screenshot-2020-12-10-at-12.33.42-pm/screenshot-2020-12-10-at-12.33.42-pm.png']",https://www.youtube.com/embed/Masbxs2NJnQ
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.12  Demo: Authentication and Authorization using JWT,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When is a JWT generated by the server?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When the user sends a request for a secure resource</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When the user logs in successfully</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When the user logs out successfully</p></div>', '<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong>: In the demo video above, you can ignore the log statements, such as, <code class=""chakra-code css-1u83yg1"">log.info()</code> and <code class=""chakra-code css-1u83yg1"">log.error()</code> as of now. You will learn about logging in the next lesson.</p>\n</blockquote>\n<h3 class=""chakra-heading css-k57syw"">Solution</h3>\n<p class=""chakra-text css-o3oz8b"">The complete code followed in the video above is available in the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c4-Security-and-DevOps/tree/1.Auth"">1.Auth branch of the course Github repository<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Facing difficulty while following the video above or have issues with the new branch? Refer to the <strong>Troubleshooting Tips</strong> on the next page.</p>\n<hr aria-orientation=""horizontal"" aria-hidden=""true"" class=""chakra-divider css-zmjcvi"">\n<h3 class=""chakra-heading css-k57syw"">Add the Maven dependency</h3>\n<p class=""chakra-text css-o3oz8b"">Add the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mvnrepository.com/artifact/com.auth0/java-jwt"">Java JWT Maven dependency<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> to your <code class=""chakra-code css-1u83yg1"">pom.xml</code></p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>com.auth0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>java-jwt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>3.11.0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Note: The version may vary in the demo video above, and the current version available.</p>\n</blockquote>\n<p class=""chakra-text css-o3oz8b"">Refer to the list of available algorithms, and the usage (create, verify, decode a token) of the above library in the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/auth0/java-jwt/blob/master/README.md"">README<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> here.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Create the security package</h3>\n<p class=""chakra-text css-o3oz8b"">As demonstrated in the video above, create the <code class=""chakra-code css-1u83yg1"">src/main/java/com/example/demo/security</code> folder and the Java file to place in that folder are available for view/download at the bottom of the current page.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> - If you download the Java files attached below, then the system will automatically change the name (letter-case) of the file.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The details of the Java files are explained below:</p>\n<h3 class=""chakra-heading css-k57syw"">1. JWTAuthenticationFilter.java</h3>\n<p class=""chakra-text css-o3oz8b"">This custom class is responsible for the authentication process. This class extends the <code class=""chakra-code css-1u83yg1"">UsernamePasswordAuthenticationFilter</code> class, which is available under both <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mvnrepository.com/artifact/org.springframework.security/spring-security-web""><strong>spring-security-web</strong><span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> and <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web""><strong>spring-boot-starter-web</strong><span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> dependency. The Base class parses the user credentials (username and a password). You can have a look at all the available methods of the Base class <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">We have overridden the following two methods:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">attemptAuthentication()</code> - It performs actual authentication by parsing (also called filtering) the user credentials.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Authentication</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">attemptAuthentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpServletRequest</span><span> req</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                                          </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpServletResponse</span><span> res</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">try</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>      </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span> credentials </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ObjectMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>              </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">readValue</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>req</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getInputStream</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>      </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> authenticationManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticate</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>              </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UsernamePasswordAuthenticationToken</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>                      credentials</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getUsername</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                      credentials</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                      </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ArrayList</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">catch</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IOException</span><span> e</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>      </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">RuntimeException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>e</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">successfulAuthentication()</code> - This method is originally present in the parent of the Base class. After overriding, this method will be called after a user logs in successfully. Below, it is generating a String token (JWT) for this user.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">protected</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">successfulAuthentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpServletRequest</span><span> req</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                                      </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpServletResponse</span><span> res</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                                      </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FilterChain</span><span> chain</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>                                      </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Authentication</span><span> auth</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IOException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ServletException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> token </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> JWT</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">create</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>          </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">withSubject</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold; opacity: 1;"">org</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold; opacity: 1;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold; opacity: 1;"">springframework</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold; opacity: 1;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold; opacity: 1;"">security</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold; opacity: 1;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold; opacity: 1;"">core</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold; opacity: 1;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold; opacity: 1;"">userdetails</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold; opacity: 1;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> auth</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getPrincipal</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getUsername</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>          </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">withExpiresAt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Date</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">currentTimeMillis</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityConstants</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>EXPIRATION_TIME</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>          </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sign</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">HMAC512</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityConstants</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>SECRET</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getBytes</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  res</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addHeader</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityConstants</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>HEADER_STRING</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityConstants</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>TOKEN_PREFIX </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> token</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">2. SecurityConstants.java</h3>\n<p class=""chakra-text css-o3oz8b"">This class contains the literal constants that are used in the <em class=""chakra-text css-o3oz8b"">JWTAuthenticationFilter</em> class.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">3. JWTAuthenticationVerficationFilter.java</h3>\n<p class=""chakra-text css-o3oz8b"">This class is responsible for the <strong>authorization</strong> process. This class extends the <code class=""chakra-code css-1u83yg1"">BasicAuthenticationFilter</code> class. It overrides on method, and defines another custom method.</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Custom method - <code class=""chakra-code css-1u83yg1"">getAuthentication()</code> - It validates the token read from the Authorization header.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-javascript"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token maybe-class-name"">UsernamePasswordAuthenticationToken</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getAuthentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token parameter maybe-class-name"">HttpServletRequest</span><span class=""token parameter""> req</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>     </span><span class=""token known-class-name"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> token </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> req</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getHeader</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token maybe-class-name"">SecurityConstants</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61);"">HEADER_STRING</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>     </span><span class=""token control-flow"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>token </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!=</span><span> </span><span class=""token null nil"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>         </span><span class=""token known-class-name"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> user </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">JWT</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">require</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">HMAC512</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token maybe-class-name"">SecurityConstants</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61);"">SECRET</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getBytes</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">build</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                 </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">verify</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>token</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">replace</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token maybe-class-name"">SecurityConstants</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61);"">TOKEN_PREFIX</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                 </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getSubject</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>         </span><span class=""token control-flow"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>user </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!=</span><span> </span><span class=""token null nil"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>             </span><span class=""token control-flow"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UsernamePasswordAuthenticationToken</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token null nil"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ArrayList</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>         </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>         </span><span class=""token control-flow"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token null nil"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>     </span><span class=""token control-flow"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token null nil"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">Overridden method - <code class=""chakra-code css-1u83yg1"">doFilterInternal()</code>- This method is used when we have multiple roles, and a policy for RBAC.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span> </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">protected</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">doFilterInternal</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpServletRequest</span><span> req</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpServletResponse</span><span> res</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FilterChain</span><span> chain</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> \n</span><span>         </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IOException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ServletException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> header </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> req</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getHeader</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityConstants</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>HEADER_STRING</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>     </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>header </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">||</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!</span><span>header</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">startsWith</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityConstants</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>TOKEN_PREFIX</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>         chain</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">doFilter</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>req</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> res</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>         </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>     </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UsernamePasswordAuthenticationToken</span><span> authentication </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getAuthentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>req</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>     </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityContextHolder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getContext</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setAuthentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>     chain</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">doFilter</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>req</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> res</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">4. WebSecurityConfiguration.java</h3>\n<p class=""chakra-text css-o3oz8b"">After defining the authentication and authorization modules, we need to configure them on the Spring Security filter chain. The <code class=""chakra-code css-1u83yg1"">WebSecurity</code> class is a custom implementation of the default web security configuration provided by Spring Security. In this class, we have overridden two overloaded methods:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">configure(HttpSecurity)</code> - Defines public resources. Below, we have set the <code class=""chakra-code css-1u83yg1"">SIGN_UP_URL</code> endpoint as public. The <code class=""chakra-code css-1u83yg1"">http.cors()</code> is used to make the Spring Security support the CORS (Cross-Origin Resource Sharing) and CSRF (Cross-Site Request Forgery). Read more <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/cors.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-scss"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span> </span><span class=""token rule"" style=""color: rgb(15, 43, 61);"">@Override</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\n</span><span class=""token"" style=""color: rgb(15, 43, 61);""> protected void </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">configure</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">HttpSecurity http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);""> throws Exception</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>     http.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">cors</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">and</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">csrf</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">disable</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authorizeRequests</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>             .</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">antMatchers</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>HttpMethod.POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> SecurityConstants.SIGN_UP_URL</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">permitAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>             .</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">anyRequest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticated</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>             .</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">and</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>             .</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addFilter</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>new </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">JWTAuthenticationFilter</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticationManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>             .</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addFilter</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>new </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">JWTAuthenticationVerficationFilter</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticationManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>             .</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sessionManagement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sessionCreationPolicy</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>SessionCreationPolicy.STATELESS</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">configure(AuthenticationManagerBuilder)</code> - It declares the BCryptPasswordEncoder as the encoding technique, and loads user-specific data.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span> </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">protected</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">configure</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationManagerBuilder</span><span> auth</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Exception</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>     auth</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">parentAuthenticationManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticationManagerBean</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>         </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">userDetailsService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>userDetailsService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>         </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">passwordEncoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>bCryptPasswordEncoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">5. UserDetailsServiceImpl.java</h3>\n<p class=""chakra-text css-o3oz8b"">It implements the <code class=""chakra-code css-1u83yg1"">UserDetailsService</code> interface, and defines only one method that retrieves the User obejct from the database:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UserDetails</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">loadUserByUsername</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> username</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UsernameNotFoundException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span> user </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> userRepository</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findByUsername</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>username</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>user </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UsernameNotFoundException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>username</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold; opacity: 1;"">org</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold; opacity: 1;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold; opacity: 1;"">springframework</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold; opacity: 1;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold; opacity: 1;"">security</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold; opacity: 1;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold; opacity: 1;"">core</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold; opacity: 1;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold; opacity: 1;"">userdetails</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold; opacity: 1;"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getUsername</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Collections</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">emptyList</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">First we need to add passwords to user accounts. To do this we need to add some things to our code to do hashing and password storage</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a new <code class=""chakra-code css-1u83yg1"">BcryptPasswordEncoder</code> in the main class</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a <code class=""chakra-code css-1u83yg1"">BcryptPasswordEncoder</code> field to the <code class=""chakra-code css-1u83yg1"">UserController</code>  class with <code class=""chakra-code css-1u83yg1"">@Autowired</code> annotation so it\'s constructed for you</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add two fields to <code class=""chakra-code css-1u83yg1"">CreateUserRequest</code>: <code class=""chakra-code css-1u83yg1"">password</code> and <code class=""chakra-code css-1u83yg1"">confirmPassword</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a salt field to the <code class=""chakra-code css-1u83yg1"">UserEntity</code> and store a randomly generated salt with the password</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In the user controller, where new users are created, add logic to make sure the two fields match; add some form of length/complexity validation, and use the <code class=""chakra-code css-1u83yg1"">BcryptPasswordEncoder</code> to store the hashed password with salt appended</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create the security package containing the provided Java files</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Recommended Read</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">StackOverflow discussion thread on <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://stackoverflow.com/questions/41480102/how-spring-security-filter-chain-works"">How Spring Security Filter Chain works<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/guides/topicals/spring-security-architecture"">Spring Security Architecture<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Supporting Materials</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/December/5fd0c058_jwtauthenticationfilter/jwtauthenticationfilter.java"">JWTAuthenticationFilter.java<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/December/5fd0c0a9_jwtauthenticationverficationfilter/jwtauthenticationverficationfilter.java"">JWTAuthenticationVerficationFilter.java<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/December/5fd0c0c6_securityconstants/securityconstants.java"">SecurityConstants.java<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/December/5fd0c0e5_userdetailsserviceimpl/userdetailsserviceimpl.java"">UserDetailsServiceImpl.java<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/December/5fd0c105_websecurityconfiguration/websecurityconfiguration.java"">WebSecurityConfiguration.java<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],https://www.youtube.com/embed/lwCAIem7jqQ
Java Web Developer,COURSE 5:Security and DevOps,Lesson 1: Authentication and Authorization,1.13  Troubleshooting Tips,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Verify or change the Java SDK version</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""4"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>How do I change the language level for a particular Module?</strong><br>\nGo to the <strong>Project Structure</strong>, and view/edit the language level. The language level must be the same as the  SDK version chosen for the project.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Set/verify the language level for the individual Module</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""5"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>How do I change the default Java compiler for all projects?</strong><br>\nYou can go to the following option in the IDE to view/set the Java compiler version:</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: View/change the Java compiler version</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""6"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>How do I import a project from Github into the IntelliJ IDE?</strong><br>\nYou can import a project available in a Github repository (or any of its branches) directly into your IDE. You can even perform all standard operations within your IDE, such as, add, commit, push, pull, merge, switch branch, etc. For more info, refer <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/help/idea/import-project-or-module-wizard.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ol>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> - If the imported project is not shown as a Maven project, simply right-click on the <code class=""chakra-code css-1u83yg1"">pom.xml</code> file, and choose to add it as a Maven project.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add the link to the Github repository in the VCS</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Perform all standard Github operations, using the VCS menu</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">VCS operations pop-up. Use this option to switch between Github branches. Don\'t forget to periodically (invalidate cache and) restart your IDE.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""7"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>My issue is not listed above</strong><br>\nRefer to the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/help/idea/troubleshooting-common-maven-issues.html#maven_compiler_problem"">Troubleshooting common Maven issues<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> - official guide.</li></ol></div>']","['https://video.udacity-data.com/topher/2020/December/5fcf519d_screenshot-2020-12-07-at-5.20.42-pm/screenshot-2020-12-07-at-5.20.42-pm.png', 'https://video.udacity-data.com/topher/2020/December/5fcf51fb_screenshot-2020-12-08-at-3.23.51-pm/screenshot-2020-12-08-at-3.23.51-pm.png', 'https://video.udacity-data.com/topher/2020/December/5fcf537c_screenshot-2020-12-08-at-3.24.30-pm/screenshot-2020-12-08-at-3.24.30-pm.png', 'https://video.udacity-data.com/topher/2020/December/5fd1d821_screenshot-2020-12-07-at-4.00.18-pm/screenshot-2020-12-07-at-4.00.18-pm.png', 'https://video.udacity-data.com/topher/2020/December/5fd1d84d_screenshot-2020-12-08-at-5.14.11-pm/screenshot-2020-12-08-at-5.14.11-pm.png', 'https://video.udacity-data.com/topher/2020/December/5fd1d884_screenshot-2020-12-08-at-5.15.03-pm/screenshot-2020-12-08-at-5.15.03-pm.png']",
Java Web Developer,COURSE 5:Security and DevOps,Lesson 2: Testing and Logging,2.1  Lesson Overview,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Suppose you have an eCommerce application and you want to find out the number of user requests per second. Is this the kind of information logging could give you?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Yes, that\'s a good example of logging.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">No, that is not really related to logging.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Let\'s start with the Testing refresher.</p></div>']",[],https://www.youtube.com/embed/Zek2MbmVtKs
Java Web Developer,COURSE 5:Security and DevOps,Lesson 2: Testing and Logging,2.2  Testing - Types,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match each type of functional testing with its description.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Tests a very small piece or unit of code.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Unit</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Testing how projects interact with each other.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Integration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Make sure the basic use case is met.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Sanity/Smoke</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Make sure that the software is inclusive to differently abled users.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Accessibility</p></div>']",[],https://www.youtube.com/embed/YlCVrRHDhDg
Java Web Developer,COURSE 5:Security and DevOps,Lesson 2: Testing and Logging,2.3  Testing - JUnit Practice - I,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We\'ll now go through a hands-on example as a refresher to JUnit. To follow along, you can download or switch to the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c4-Security-and-DevOps/tree/2.UnitTestStarter"">2.UnitTestStarter branch of the GitHub repository<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What does the <code class=""chakra-code css-1u83yg1"">pom.xml</code> file contain?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Before going further, be sure that you\'ve done the following:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Cloned the repo or switched the branch in the IDE.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Imported the code into IntelliJ</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Looked over the methods in the starter code (we\'ll be writing tests for them shortly)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spend at least a few moments thinking about what types of tests you might want to write</p></div>', '<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong>: The JUnit dependency version may vary in the demo video above, and the current version available.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Go ahead and see if you can find the Maven dependency.\n(Google is your friend!)</p>\n<p class=""chakra-text css-o3oz8b"">If you have any trouble finding it, no worries—Sareeta will show how in the next video.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I found the Maven dependency!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I\'ve added the dependency to the starter code (if you\'re not sure how to do this, just check out the video below).</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Solution</strong>: You can add <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mvnrepository.com/artifact/org.mockito/mockito-core"">Mockito Core<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> Maven dependency for Mockito.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">&lt;!-- https://mvnrepository.com/artifact/org.mockito/mockito-core --&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.mockito</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>mockito-core</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>2.23.4</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Before you move on, be sure that you\'ve tried the following things for yourself:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add the <code class=""chakra-code css-1u83yg1"">HelperTest</code> class like Sareeta showed in the video above</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Try some of the different <code class=""chakra-code css-1u83yg1"">assert</code> methods (such as <code class=""chakra-code css-1u83yg1"">assertEquals</code>)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">See if you can write a JUnit test (in <code class=""chakra-code css-1u83yg1"">HelperTest</code>) for the <code class=""chakra-code css-1u83yg1"">getMergedList</code> method. Once you\'ve given it a shot, you can check out our example below to compare.</p>\n<p class=""chakra-text css-o3oz8b"">(As always, if you run into trouble and don\'t quite get it working, no worries—the point is simply to practice and to learn!)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I wrote a JUnit test (in <code class=""chakra-code css-1u83yg1"">HelperTest</code>) for the <code class=""chakra-code css-1u83yg1"">getMergedList</code> method</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Solution Code</h3>\n<p class=""chakra-text css-o3oz8b"">Below is the solution code for all of the tests. We encourage you to try out as many of these as you like and compare your code with the examples. <font color=""green"">As always, it\'s possible your code might look a bit different and still accomplishes the end goal!</font></p>\n<div id=""spoiler_1"" style=""display: none;"">\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">//Necessary imports</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HelperTest</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Before</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">init</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t\t </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""init executed""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\t \n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@After</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">teardown</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t\t </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""teardown executed""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""test""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""test1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\t\t\n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">validate_getCount</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> empNames </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Arrays</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">asList</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""sareeta""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""john""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Helper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getCount</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>empNames</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">validate_3lengthString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> empNames </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Arrays</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">asList</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""sareeta""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Jeff""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""sam""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Helper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getStringsOfLength3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>empNames</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">verify_list_is_squared</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t      </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> yrsOfExperience </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Arrays</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">asList</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">13</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">4</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">15</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">6</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">17</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">8</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">19</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t      </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> expected </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Arrays</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">asList</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">169</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">16</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">225</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">36</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">289</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">64</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">361</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">4</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">9</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t      </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>expected</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Helper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getSquareList</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>yrsOfExperience</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">verify_merged_list</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> empNames </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Arrays</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">asList</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""sareeta""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""john""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t      </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""sareeta, john""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Helper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getMergedList</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>empNames</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">verify_getMax</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t      </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> empLevel </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Arrays</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">asList</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">7</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">7</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t      </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">7</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Helper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getStats</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>empLevel</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getMax</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// This method must be public and static</span><span>\n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@BeforeClass</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">initClass</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t\t </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""init Class executed""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\t\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\t\n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@AfterClass</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">teardownclass</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t\t </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""teardown Class executed""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>\t</span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">verify_ArrayListTest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t      </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> yrsOfExperience </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span class=""token"" style=""color: rgb(2, 124, 124);"">13</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">4</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">15</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">6</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">17</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">8</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">19</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t      </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> expected </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span class=""token"" style=""color: rgb(2, 124, 124);"">13</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">4</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">15</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">6</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">17</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">8</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">19</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t      </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertArrayEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>expected</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> yrsOfExperience</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n</div>\n<button type=""button"" id=""myButton1"" onclick=""if(document.getElementById(\'spoiler_1\') .style.display==\'none\') {document.getElementById(\'spoiler_1\') .style.display=\'\'}else{document.getElementById(\'spoiler_1\') .style.display=\'none\'}if (document.getElementById(\'myButton1\').innerHTML==\'Show Solution\') {document.getElementById(\'myButton1\').innerHTML=\'Hide Solution\';}else{document.getElementById(\'myButton1\').innerHTML = \'Show Solution\';}"">Show Solution</button></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What are important features of JUnit?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It is an open source framework.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Provides Annotation to identify the test methods.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Provides Assertions for testing expected results.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JUnit shows test progress in a bar that is green if test is going fine and it turns red when a test fails.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All of the above</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What does annotations @ do in JUnit test-cases?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Designate a test to run before/after a method is called or a class is instantiated.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test certain conditions based on the actual and expected output.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resource</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/junit-team/junit4/wiki/Getting-started"">Official tutorial on getting started with JUnit<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/6TdPhGKTUmM
Java Web Developer,COURSE 5:Security and DevOps,Lesson 2: Testing and Logging,2.4  Testing - JUnit Practice - II,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As we just saw in the video, you can check out <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://junit.sourceforge.net/javadoc/org/junit/Assert.html"">this page<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for a comprehensive list of all of the methods that the JUnits <code class=""chakra-code css-1u83yg1"">Assert</code> class contains.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What do assert methods do in a test-case?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">test certain conditions based on actual and expected output.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">make an assumption that the test case is failed.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">throws an AssertionException with a custom message if the comparison fails.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here are some Junit annotations. See if you can match each one with its purpose.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Runs before every test to do common, repeated setup</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@Before</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Runs once, before all tests, to do common, needed-only-once setup</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@BeforeClass</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Runs after every test to do common, repeated teardown</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@After</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Runs once, after all tests, to do common, needed-only-once teardown</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@AfterClass</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Solution</h3>\n<p class=""chakra-text css-o3oz8b"">The complete code followed in the video above is available in the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c4-Security-and-DevOps/tree/3.UnitTestSolution"">3.UnitTestSolution <span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> branch of the Github repository.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Parameterized Tests allow you to do what?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Ignore test failures</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Display how much of your code was tested</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run the same test with different parameters</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Ignore certain tests</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Refer - <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations"">JUnit 5 Documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, and name three more annotations (@) which we have not discussed above.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Resource</h3>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/junit-team/junit4/wiki/Parameterized-tests"">Official tutorial on Parameterized tests<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']",[],https://www.youtube.com/embed/VLuhu3OESuo
Java Web Developer,COURSE 5:Security and DevOps,Lesson 2: Testing and Logging,2.5  Testing - Code Coverage,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What is <strong>code coverage</strong>?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Code coverage is the percentage of code that is run by automated tests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Code coverage is the percentage of code that is not run by automated tests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Code coverage is the percentage of code that is actively used during the running of the program.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What is a typical code coverage percentage that a developer should aim for?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">10%</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">0%</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">80%</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">100%</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It\'s important to know how to use your IDE to find the code coverage of your tests. So before going further, take a few minutes and see if you can do that.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run the test methods you\'ve written so far in a particular class (one that has code coverage) and make sure you can identify the % coverage for that code</p></div>']",[],https://www.youtube.com/embed/L6GMayyvBNU
Java Web Developer,COURSE 5:Security and DevOps,Lesson 2: Testing and Logging,2.6  Testing - Mockito,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">True or False: In unit testing, a <strong>Mock</strong> object (or a method) substitutes an actual instance (or an implementation).</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">True</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">False</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Before moving on, make sure that you\'ve done the following in the eCommerce application:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add <code class=""chakra-code css-1u83yg1"">TestUtils</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add <code class=""chakra-code css-1u83yg1"">UserController</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Increased the test coverage percent (remember you\'re shooting for 80% here!)</p></div>']",[],https://www.youtube.com/embed/14Okwxla5l8
Java Web Developer,COURSE 5:Security and DevOps,Lesson 2: Testing and Logging,2.7  Testing - Best Practices,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here are the topics mentioned in the above video, which you may want to consider diving into when you have time:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit4/javadoc/4.12/org/junit/rules/ExpectedException.html"">Exceptions<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://stormpath.com/blog/7-tips-writing-unit-tests-java"">Writing Great Unit Tests<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.vogella.com/tutorials/Mockito/article.html"">Advanced Mockito<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://powermock.github.io/"">PowerMock<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://testng.org/doc/"">TestNg<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following are best practices for testing</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Keep unit tests minimal, only test 1 unit at a time</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Don\'t test configuration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Mock external services</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Only assert what you need to</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What\'s the difference between a ""defect"" and a ""failure"" in software testing?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When an issue reaches the end customer, it is called a failure; when it is identified and resolved internally, it is referred to as a defect.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">They mean the same thing.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When an issue reaches the end customer, it is called a defect; when it is identified and resolved internally, it is referred to as a failure.</p></div>']",[],https://www.youtube.com/embed/7jAekgd00PM
Java Web Developer,COURSE 5:Security and DevOps,Lesson 2: Testing and Logging,2.8  Logging - SLF4J and Log4J,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">SLF4J</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">SLF4J allows the end-user to plug-in the desired logging framework at deployment time.  Using SLF4J is particularly useful for enterprise applications because individual embedded components have different logging requirements. In addition, SLF4J API is backward compatible and easy to implement. For stand-alone applications, we may invoke the logging framework of our choice directly.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">SLF4J-Log4J Dependency</h4>\n<p class=""chakra-text css-o3oz8b"">For Log4j v2, we would need to include the <strong>SLF4J-Log4j binding</strong> Maven dependency into <code class=""chakra-code css-1u83yg1"">pom.xml</code> as:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.slf4j</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>slf4j-log4j12</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>1.7.25</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">You can find this SLF4J-Log4j Maven dependency <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Note: The version of the dependency above may change over time.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You can check out the SLF4J manual <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.slf4j.org/manual.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> and Log4j manual <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://logging.apache.org/log4j/2.0/manual/index.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. If you don\'t want to read it now, then we suggest you still have a quick look and bookmark it for later reference!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">I\'ve opened the link and bookmark the page (and maybe read a little bit too!).</p></div>']",[],https://www.youtube.com/embed/SyLVZsE3_UQ
Java Web Developer,COURSE 5:Security and DevOps,Lesson 2: Testing and Logging,2.9  Logging - Log Levels,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Log4J is most often used to create an instance of the Logger interface from the LogManager and then call the methods on this interface. Assume there is a <code class=""chakra-code css-1u83yg1"">MyClass.java</code>, inside which we need to create an instance of <code class=""chakra-code css-1u83yg1"">Logger</code> interface by using either of the following ways:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">slf4j</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Logger</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">slf4j</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LoggerFactory</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Inside the class</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">final</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Logger</span><span> log </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LogManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getLogger</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MyClass</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> \n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">final</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Logger</span><span> log </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LoggerFactory</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getLogger</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MyClass</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Then, we can use any of the in-built log-levels in any method of <code class=""chakra-code css-1u83yg1"">MyClass.java</code>, as follows:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-lua"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">//</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">...</span><span>\n</span><span> log</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">trace</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""the built-in TRACE level""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> log</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">debug</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""the built-in DEBUG level""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> log</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">notice</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""a custom level: a NOTICE message""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> log</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">info</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""the built-in INFO level""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> log</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">warn</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""the built-in WARN level""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> log</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">error</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""the built-in ERROR level""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> log</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fatal</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""the built-in FATAL level""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">//</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">...</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Following are the in-built log-levels in <em class=""chakra-text css-o3oz8b"">highest</em> to the <em class=""chakra-text css-o3oz8b"">lowest</em> order of logging:</p>\n<div class=""index-module--table-responsive--1zG6k""><div class=""chakra-table__container css-136ya47""><table class=""chakra-table index-module--table--8j68C index-module--table-striped--3HHC- css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Log-Level</strong></th><th class=""css-zl9m57""><strong>Description</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Trace</td><td class=""css-1eywhk4"">Logs the fine-grained information. This is a high (most detailed) level of logging. </td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Debug</td><td class=""css-1eywhk4"">Logs the information necessary for debugging. </td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Info</td><td class=""css-1eywhk4"">Used for logging the status messages or any desirable field value</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Warn</td><td class=""css-1eywhk4"">Used for logging potentially unexpected/dangerous situations</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Error</td><td class=""css-1eywhk4"">Used for logging Exception and minor Error events</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Fatal</td><td class=""css-1eywhk4"">Used for logging very severe Error events that might lead the application to collapse.</td></tr></tbody></table></div>\n</div>\n<p class=""chakra-text css-o3oz8b"">We can define custom log-levels as well. The guide to defining custom log-levels is available <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://logging.apache.org/log4j/2.x/manual/customloglevels.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match the log levels with their description:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The ""lowest"" level, for logging incredibly detailed statistics and other detailed information</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Debug</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For logging standard, non-error information</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Info</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For logging non-fatal errors that can maybe be recovered from</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Warn</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For logging fatal errors that are unrecoverable</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Error</p></div>']",[],https://www.youtube.com/embed/Ji9CeW7trDE
Java Web Developer,COURSE 5:Security and DevOps,Lesson 2: Testing and Logging,2.10  Logging - Log4J Example,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You can continue with the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c4-Security-and-DevOps/tree/1.Auth"">1.Auth branch of the Github repo<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, and make changes as shown in the video above.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Before moving on, be sure that you\'ve tried out using log4J for yourself. In particular, be sure that you have:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identified where you need to add logs and why</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Added info logs in the project</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identified and added debug logs in the project</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Why is logging important?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It’s needed to understand how your application behaves in a production environment, and to be able to debug any issues.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To tell the user what happened.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To send emails.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To display test results.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Conclusion</h3>\n<p class=""chakra-text css-o3oz8b"">If you have been following along, you should be able to:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Explain the basics of Logging</li><li class=""css-cvpopp"">Differentiate between the SLF4J library (API) and Log4J framework</li><li class=""css-cvpopp"">Implement Log4J in the eCommerce application</li></ul></div>']",[],https://www.youtube.com/embed/OVZuylA3zAE
Java Web Developer,COURSE 5:Security and DevOps,Lesson 3: Splunk,3.1  Splunk,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Machine-generated data</h3>\n<p class=""chakra-text css-o3oz8b"">Machine-generated data refers to the data generated by application logs, server logs, network devices, sensors, IoT, cloud services, or mobile services. The data could be structured or unstructured.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Structured data has clearly defined data-types and a particular pattern e.g., relational data. It resides in a database, on which we can run queries.</li><li class=""css-cvpopp"">Unstructured data has no specific pattern e.g., textual log messages, reviews on the eCommerce platform.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Challenges without Splunk</h3>\n<p class=""chakra-text css-o3oz8b"">Machine-generated data is challenging to analyze because:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Its volume is high</li><li class=""css-cvpopp"">Sometimes it is unstructured, thus requires a pre-processing</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Benefits</h3>\n<p class=""chakra-text css-o3oz8b"">Splunk helps generate information from machine-generated data and provides insights quickly. It helps to scale the data input limitlessly. It also provides machine learning capabilities to build auto-alert systems. Splunk helps the user to leverage machine-generated data in gauging the system performance, investigating the failure conditions, developing the business matrix, data visualization, and many more benefits.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Choose all that apply - Benefits of Splunk:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Analyzes <strong>high</strong> volume of machine-generated data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Pre-processes the data as well</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Helps to scale the data input limitlessly</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Builds auto-alert systems</p></div>']",[],https://www.youtube.com/embed/EQg0xJswATI
Java Web Developer,COURSE 5:Security and DevOps,Lesson 3: Splunk,3.2  Indexing in Splunk,[],[],https://www.youtube.com/embed/0mctvNViWoE
Java Web Developer,COURSE 5:Security and DevOps,Lesson 3: Splunk,3.3  Deployment Models,"['<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Recommended read</h4>\n<p class=""chakra-text css-o3oz8b"">Read more about <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.splunk.com/Documentation/Splunk/8.0.1/Capacity/ComponentsofaSplunkEnterprisedeployment"">Components of a Splunk Enterprise deployment<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. In addition, we recommend you to read more about <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.splunk.com/Documentation/Splunk/8.0.1/Forwarding/Aboutforwardingandreceivingdata"">Forwarders<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> and <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.splunk.com/Documentation/Splunk/8.0.1/Indexer/Aboutindexesandindexers"">Indexers<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Deployment Topology</h3>\n<p class=""chakra-text css-o3oz8b"">There could be different deployment topology based on the requirements of the project. The following are the examples:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Single host - independent search heads manage searches for a group of independent indexers.</li><li class=""css-cvpopp"">High Availability -  a group of indexers replicate data among themselves to ensure high data availability.</li><li class=""css-cvpopp"">Multiple data store clustering - a group of search heads share search management responsibilities.</li><li class=""css-cvpopp"">Multiple datastore peering - common in larger deployments. It is similar to the pattern of high availability, except that the search management function is handled by a search head cluster instead of individual search heads.</li></ul>\n<p class=""chakra-text css-o3oz8b"">You can find the Splunk deployment guide <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.splunk.com/themes/splunk_com/img/assets/pdfs/education/SplunkDeploymentGuide2_1.pdf"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>']",[],https://www.youtube.com/embed/nxqqldlHWnQ
Java Web Developer,COURSE 5:Security and DevOps,Lesson 3: Splunk,3.4  Installation,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In this section, we\'ll go over how to install Splunk on your local system, on AWS, and on Microsoft Azure.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Important note</strong>: If you are using the Udacity generated AWS account to create an instance of <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://aws.amazon.com/marketplace/pp/prodview-l6oos72bsyaks"">Splunk Enterprise<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, you can choose up to <strong>t2.small</strong> or <strong>t3.small</strong> instance size, instead of the default <strong>c4.xxxx</strong>. You can set the remaining fields with the default values. See a sample configuration in the snapshot below:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Creating a Splunk instances from the AWS marketplace. Ensure to choose up to <em class=""chakra-text css-o3oz8b"">t2.small</em> or <em class=""chakra-text css-o3oz8b"">t3.small</em> instance size.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Once the instance is up and running, you can login to Splunk Web UI at this address <code class=""chakra-code css-1u83yg1"">http://&lt;PublicIP&gt;:8000</code> . As of version 7.x.x onwards, the default password has been updated to:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-http"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token header header-name"" style=""color: rgb(15, 43, 61); font-weight: bold;"">username</span><span class=""token header"" style=""color: rgb(15, 43, 61);"">:</span><span class=""token header""> </span><span class=""token header header-value"">admin</span><span>\n</span><span></span><span class=""token header header-name"" style=""color: rgb(15, 43, 61); font-weight: bold;"">password</span><span class=""token header"" style=""color: rgb(15, 43, 61);"">:</span><span class=""token header""> </span><span class=""token header header-value"">SPLUNK-&lt;instance id&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">For example:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-css"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>admin\n</span>SPLUNK-i-0c2e6c58673d972cb</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">See the snapshot of a running Splunk instance below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Accessing the Splunk instance at <code class=""chakra-code css-1u83yg1"">http://&lt;PublicIP&gt;:8000</code></p></div>']",[],https://www.youtube.com/embed/FjlyhX5Wb4w
Java Web Developer,COURSE 5:Security and DevOps,Lesson 3: Splunk,3.5  Adding Data to Splunk,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The dataset used in the above video can be obtained from the <em class=""chakra-text css-o3oz8b"">TransStats</em> site <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=505&amp;Link=0"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.<br>\n(<em class=""chakra-text css-o3oz8b"">US Department of Transportation, Bureau of Transportation Statistics, 1995 American Travel Survey. URL: <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://nhts.ornl.gov"">https://nhts.ornl.gov<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</em>)</p>\n<p class=""chakra-text css-o3oz8b"">You can download the exact dataset by selecting the same options as the Instructor does in the video—or if you prefer, you can experiment with selecting some different options to get a variation on the data. This is just for purposes of demonstration and experimentation, so getting the exact data that the Instructor uses in the video is not essential.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What are the components of Splunk?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Forwarders, Indexers and Search Heads.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Forwarders, atoms and molecules</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Forwarders, nodes and servers</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Forwarders, clouds and monitors</p></div>']",[],https://www.youtube.com/embed/CLVMFCn8t68
Java Web Developer,COURSE 5:Security and DevOps,Lesson 3: Splunk,3.6  SPL Commands,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Splunk uses <strong>Search Processing Language</strong> or <strong>SPL</strong>. Let\'s have a look at some useful SPL commands.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Below are some commands that would be great for you to try out. (Don\'t feel like you have to try all of these right this moment, but do give at least three or four of them a go!)</p>\n<p class=""chakra-text css-o3oz8b"">For details, you can refer to the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.splunk.com/pdfs/solution-guides/splunk-quick-reference-guide.pdf"">Splunk Quick-Reference Guide<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">chart/timechart</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">dedup</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">eval</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">fields</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">head</code> and <code class=""chakra-code css-1u83yg1"">tail</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">lookup</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">rename</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">rex</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">search</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">sort</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">stats</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">table</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">top</code> and <code class=""chakra-code css-1u83yg1"">rare</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">where</code></p></div>']",[],https://www.youtube.com/embed/SceItRuqsr8
Java Web Developer,COURSE 5:Security and DevOps,Lesson 3: Splunk,3.7  Forwarders,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Splunk forwarders consume data and send it to an indexer.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Types of Forwarders</h3>\n<p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Universal</em>, <em class=""chakra-text css-o3oz8b"">Light</em>, and <em class=""chakra-text css-o3oz8b"">Heavy</em> are the three types of forwarders. These forwarders forward data from one Splunk Enterprise instance (data input) to another Splunk Enterprise instance (indexer or any other forwarder) or even to a non-Splunk system. The difference in the working of these three types of forwarders lies in internal working, such as event filtering, event routing, and the footprint (memory, CPU load).</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Universal forwarders provide reliable, secure data collection from remote sources and forward that data into Splunk software for indexing and consolidation. They can scale to tens of thousands of remote systems, collecting terabytes of data.</li><li class=""css-cvpopp"">Light forwarders are deprecated ones, which consumes small CPU and memory resources. It has much more limited functionality.</li><li class=""css-cvpopp"">Heavy forwarders consume the maximum CPU and memory resources, but less than an indexer. It has most of the features available, except that it cannot perform distributed searches.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Refer here - <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.splunk.com/Documentation/Splunk/8.0.1/Forwarding/Typesofforwarders"">https://docs.splunk.com/Documentation/Splunk/8.0.1/Forwarding/Typesofforwarders<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for a comparative study on forwarders.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What are the different types of forwarders?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Universal, Light, and Heavy</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Specialized and non specialized</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Native and cloud</p></div>']",[],https://www.youtube.com/embed/cdAc0l47yzI
Java Web Developer,COURSE 5:Security and DevOps,Lesson 3: Splunk,3.8  Introduction to Visualization and More,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If you haven\'t already, we encourage you to follow along with the examples shown above and try Splunk out for yourself. Below are the general tasks you should try in Splunk at least once.</p>\n<p class=""chakra-text css-o3oz8b"">In addition to the above walkthroughs, you may also find it helpful to check out the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.splunk.com/Documentation/Splunk/7.3.0/Viz/Visualizationreference"">Splunk visualization reference<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Generate a table of your choice.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Generate a chart of your choice.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a custom visualization of your choice.</p></div>']",[],https://www.youtube.com/embed/7dNl6rxzeO8
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.1  Introduction,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Overarching system diagram</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In this lesson, you will learn the various technologies that aid with the process of Continuous Integration / Continuous Delivery (CI/CD). By the end of the lesson, you will be able to:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Create a Git repository in GitHub, and run a few basic commands</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Introduce the Docker, Container, and Images</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Create and connect to the EC2 instances on AWS,</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Configure the Jenkins console to automate the CI/CD pipeline</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">The first few pages of this lesson will make you familiar with the necessary third party tools/softwares, such as Github, AWS, Docker, and Jenkins. All these concepts play an essential role in the different phases of CI/CD pipeline. <font color=""red""> Bear with us for learning these tools from their official documentation, though we will demonstrate the usage in our videos. </font></p></div>']",['https://video.udacity-data.com/topher/2021/February/60239d17_copy-of-ci-cd-pipeline/copy-of-ci-cd-pipeline.png'],https://www.youtube.com/embed/7xIcv9ORvWs
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.2  CI/CD,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A CI/CD Pipeline under DevOps model to show quick delivery and evolution of software</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What does CI/CD help us achieve?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CI/CD helps us deploy changes into production as quickly as possible while minimizing risks in software quality assurance and compliance.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CI/CD helps erase logs</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CI/CD helps us to write tests</p></div>']",['https://video.udacity-data.com/topher/2020/May/5ed0cff4_images/images.png'],
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.3  Git,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What’s the current most-popular version control tool?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Git</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">SVN</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">CVS</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Bazzar</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Fork the project repository</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp"">Clone the remote repository to your local machine using terminal (Mac/Linux)/Gitbash(Windows). You will require to download <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://git-scm.com/downloads"">Git<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> before running the following commands :</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">git</span><span> clone https://github.com/</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>YourGithubUserName</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span><span>/nd035-c4-Security-and-DevOps.git\n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">cd</span><span> nd035-c4-Security-and-DevOps</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Alternatively, you can clone it directly into your IntelliJ IDE.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Clone the forked repository, now called ""remote"" for you.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Alternatively, clone the forked repository directly into your IntelliJ IDE</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""3"" class=""css-13a5a39""><li class=""css-cvpopp"">Make any changes in the repository, and push the changes back to the remote repository.\n<strong>Optional</strong>: If you were doing the changes in a text editor, such as Visual Studio Code, you could use the following commands to push the changes back to the remote.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Verify the remote. The default name of remote is ""origin""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">git</span><span> remote -v\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Open the code in IntelliJ or any editor. </span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Make any change, as small as adding one comment to your code</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Add the changes to the ""staging"" area: New, Modified, and Deleted files</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">git</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">add</span><span> -A \n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Commit your changes with a message to the reader of your repo</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">git</span><span> commit -m </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""my comment""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Push all changes back to the remote</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">git</span><span> push</span></code></div></div></pre></div>']","['https://video.udacity-data.com/topher/2021/February/6023aa2e_screenshot-2021-02-10-at-3.08.04-pm/screenshot-2021-02-10-at-3.08.04-pm.png', 'https://video.udacity-data.com/topher/2021/February/6023aa49_screenshot-2021-02-10-at-3.08.31-pm/screenshot-2021-02-10-at-3.08.31-pm.png', 'https://video.udacity-data.com/topher/2021/February/6023aa98_screenshot-2021-02-10-at-3.07.03-pm/screenshot-2021-02-10-at-3.07.03-pm.png']",https://www.youtube.com/embed/j4v7SkHFlko
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.4  AWS,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Is AWS a <strong>”perfect”</strong> solution to deploy any enterprise application on cloud?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Yes</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">No</p></div>']",[],https://www.youtube.com/embed/3PK5Nv4Fe5w
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.5  Course - AWS Sign In and Costs,"['<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Ensure that you do not have a pop-up blocker installed; it may prevent the new tab from launching.  Please be sure to allow pop-ups from Udacity.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Animation of launching the AWS console</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Important Points to Remember</h3>\n<h4 class=""chakra-heading css-1dlhxqh""><strong>1. Session limit</strong></h4>\n<p class=""chakra-text css-o3oz8b""><span>Note that there is a certain <strong>session time limit</strong>. If reached, you will automatically be timed out. As long as you have not used your entire allocated budget, your work will be saved.  You can re-launch using the same ""Launch Cloud Gateway"" button in the left navigation menu to return to your session. </span></p>\n<h4 class=""chakra-heading css-1dlhxqh""><strong>2. Default AWS region</strong></h4>\n<p class=""chakra-text css-o3oz8b"">The default AWS region for you will be US East (N. Virginia) (<code class=""chakra-code css-1u83yg1"">us-east-1</code> ). In case you need more than one region for your work you can use <code class=""chakra-code css-1u83yg1"">us-east-2</code>, <code class=""chakra-code css-1u83yg1"">us-west-1</code> or <code class=""chakra-code css-1u83yg1"">us-west-2</code>. Note: You would not have permissions to access regions other than <code class=""chakra-code css-1u83yg1"">us-east-1</code>, <code class=""chakra-code css-1u83yg1"">us-east-2</code>, <code class=""chakra-code css-1u83yg1"">us-west-1</code>, and <code class=""chakra-code css-1u83yg1"">us-west-2</code>.</p>\n<h4 class=""chakra-heading css-1dlhxqh""><strong>3. The budget allocated for you</strong></h4>\n<p class=""chakra-text css-o3oz8b"">All AWS services are a pay-as-you-go service. Udacity has set a budget for each student to complete their course work.  Please understand that these credits are limited and available for you to use judiciously. <b> <font color=""red"">The budget for this entire course is $25. </font></b> Although, we find about $10 sufficient for most to complete this course.</p>\n<h4 class=""chakra-heading css-1dlhxqh""><b>4. <font color=""red""> Shut down your resources | No extra credits </font></b></h4>\n<p class=""chakra-text css-o3oz8b"">We recommend you <strong>shut down/delete every AWS resource</strong> (e.g., EC2, Sagemaker, Database, EMR, CloudFormation) immediately after the usage or if you are stepping away for a few hours. Otherwise, you will run out of your allocated budget.\n<b><font color=""red""> Udacity will not provide additional credits.</font></b> In case you exhaust your credits:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>You will lose your progress on the AWS console.</strong></li><li class=""css-cvpopp""><strong>You will have to use your personal AWS account to finish the remaining ND.</strong>\nEven if you are in the middle of the project/exercise and need to step away, you must shut down your resources. You can re-instantiate them later. To better understand pricing, see the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://aws.amazon.com/pricing/"">AWS Pricing<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for all available services. &gt; For reference, any service available to you @$0.1/hour or higher should be monitored closely and shut down immediately after use or if you are stepping away.  &gt;</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Check the pricing at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://aws.amazon.com/pricing/"">https://aws.amazon.com/pricing/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh""><strong>5. Tracking your usage</strong></h4>\n<p class=""chakra-text css-o3oz8b"">You need to make sure that you have an adequate budget available to complete your project/task. <b><font color=""red"">If you hit your budget, your session will time out and your work will be lost and unrecoverable. </font></b>.</p>\n<p class=""chakra-text css-o3oz8b"">Track your usage on the AWS web console. Go to <strong>AWS Cost Explorer</strong>, and view the spending by selecting a <strong>Date Range</strong>. The starting date should be your <em class=""chakra-text css-o3oz8b"">Date of Enrollment</em> in this course.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">AWS Cost Management Dashboard</p></div>', '<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Note: The <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://console.aws.amazon.com/billing/home#/"">AWS Billing Dashboard<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> might show extra costs as the AWS accounts provided by Udacity are reused once students graduate from a course. So the best way to check costs is using the AWS Cost Explorer by setting the appropriate Date Range as discussed above.</p>\n</blockquote>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Monitoring costs using the AWS Cost Explorer is a good skill to learn!</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""6"" class=""css-13a5a39""><li class=""css-cvpopp""><span style=""color: red;""><strong>IMPORTANT</strong></span>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh""><strong>Concurrent/Parallel instance launch</strong></h4>\n</li></ul>\nWe do not support launching multiple EC2, RDS, or Sagemaker instances unless specifically mentioned in the classroom. Your AWS account will be suspended if you attempt at launching concurrent instances where they not required.\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh""><strong>Personal Information in AWS</strong></h4>\n</li></ul>\n<strong>Please do not add</strong> any type of personal information to the AWS account and resources provided by Udacity for this course. This includes: <em class=""chakra-text css-o3oz8b"">email addresses</em>, <em class=""chakra-text css-o3oz8b"">resource names</em>, <em class=""chakra-text css-o3oz8b"">tags</em>, <em class=""chakra-text css-o3oz8b"">phone number</em>, <em class=""chakra-text css-o3oz8b"">name</em>, etc.\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh""><strong>Deleting and Reusing Accounts</strong></h4>\n</li></ul>\nUdacity will delete all resources in AWS accounts after six months of inactivity to ensure proper resource utilization and data security. Deleting resources means that all work will be lost and will need to be redone.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> -<br>\nAs you are given a temporary AWS user account with <strong>limited</strong> permissions, you might not be able to avail <strong>all</strong> AWS services. We have allowed the necessary ones only. If you see a few warning messages related to insufficient permissions, you can ignore them and proceed with your practice.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select all of the true statements about AWS usage.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Any service at $0.1/hour or higher should be monitored closely and shut down immediately after use to avoid exhausting your budget</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All progress on the AWS console will be saved even if you exhaust your budget</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Most students have completed the program using about $10 from their budget</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You will have to work with your personal AWS account to finish the program if you exhaust your budget</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You can track your monthly usage of credits within the AWS billing dashboard</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You may use an existing personal or federated AWS account for this program.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What is the default AWS region set to?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">US East (Ohio) (us-east-2)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">US East (N. Virginia) (us-east-1)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">US West (N. California) (us-west-1)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">US West (Oregon) (us-west-2)</p></div>']",['https://video.udacity-data.com/topher/2021/April/60828d1d_screenshot-2021-04-16-at-2.55.57-pm/screenshot-2021-04-16-at-2.55.57-pm.png'],
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.6  Conclusion,[],[],
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.7  EC2 - Launch an Instance,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: AWS Management Console. You can select any AWS service from here.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp"">Have a look at the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://console.aws.amazon.com/ec2/v2/home"">EC2 Dashboard<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. The EC2 Dashboard is home to a variety of related services, such as Amazon Machine Images, Elastic Block Store (EBS), Load Balancer, and Auto Scaling.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: EC2 Dashboard.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Choose AMI. The <strong>Quick Start</strong> provides a list of basic AMIs.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Step 2 - Choose an Instance Type</h3>\n<p class=""chakra-text css-o3oz8b"">Instance Type offers varying combinations of CPUs, memory (GB), storage (GB), types of network performance, and availability of IPv6 support. AWS offers a variety of instance types, based on the configuration you choose. <strong>Prefer to choose any one of those types supported by a free tier account</strong>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Choose an Instance Type.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select the hardware configuration of your instance. The <code class=""chakra-code css-1u83yg1"">t2.micro</code> instance type, which is available under the <strong>free tier</strong>, is selected by default. It has 1 vCPU, 2.5 GHz, 1 GiB memory, the default root volume, and supports additional EBS storage.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Step 3 - Configure Instance Details</h3>\n<p class=""chakra-text css-o3oz8b"">Provide the instance count and configuration details, such as network, subnet, behavior, monitoring, etc.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Configure Instance Details. The wizard will populate the default values for all fields.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Step 4 - Add Storage</h3>\n<p class=""chakra-text css-o3oz8b"">You can choose to attach either SSD or Standard Magnetic drive to your instance.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Add Storage. You can edit the setting of the default root volume or attach additional EBS volumes.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Step 5 - Add Tags</h3>\n<p class=""chakra-text css-o3oz8b"">A tag serves as a label that you can attach to multiple AWS resources, such as volumes, instances, users, or roles. Tagging helps in easy search and grouping resources for various purposes.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Add Tags. Tags help to categorize the resources across AWS services. It works as a label.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Step 6 - Configure Security Group</h3>\n<p class=""chakra-text css-o3oz8b"">Attach a set of firewall rules to your instance(s) that controls the incoming traffic to your instance(s).</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Security Groups. It defines the firewall rules, such as the protocol to open to network traffic and the set of valid IP addresses. By default, SSH protocol is used for a Linux instance, and RDP for a Windows instance. HTTP and HTTPS allow Internet traffic to reach your instance.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Step 7 -  Review</h3>\n<p class=""chakra-text css-o3oz8b"">Review your instance details before the launch.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Review</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Step 8 - Download Key Pair</h3>\n<p class=""chakra-text css-o3oz8b"">AWS generates a pair of public and private (encrypted) keys, that help in logging into the EC2 instance. Download the private key (.pem file) locally. The public key will be stored on the EC2 instance, while the private key will be available to download locally, <em class=""chakra-text css-o3oz8b""><strong>just once</strong></em>. In case, if the private key file (.pem) is misplaced or lost, the AWS doesn\'t allow regenerating the private key.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Download Private Key</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: EC2 dashboard → Instances dashboard showing a running instance. You can select the checkbox against the instance you wish to connect/stop/terminate/view details. In this dashboard, you will see all your instances, their properties, and configuration details.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> - Do not forget to shut down/terminate every AWS resource after use. You can instantiate them again when you\'d come back.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">Now, in one of your hands-on exercises next, you will have the chance to spin up your own EC2 Instance.</em>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Recommended Read</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-best-practices.html"">Best practices for Amazon EC2<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']","['https://video.udacity-data.com/topher/2020/November/5fb6775d_screenshot-2020-11-19-at-6.18.11-pm/screenshot-2020-11-19-at-6.18.11-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fb6780e_screenshot-2020-11-19-at-6.46.25-pm/screenshot-2020-11-19-at-6.46.25-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fbb5c30_screenshot-2020-11-19-at-6.50.13-pm/screenshot-2020-11-19-at-6.50.13-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fb67893_screenshot-2020-11-19-at-6.52.45-pm/screenshot-2020-11-19-at-6.52.45-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fb678c1_screenshot-2020-11-19-at-6.57.24-pm/screenshot-2020-11-19-at-6.57.24-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fb678ed_screenshot-2020-11-19-at-6.58.35-pm/screenshot-2020-11-19-at-6.58.35-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fb6791f_screenshot-2020-11-19-at-7.03.14-pm/screenshot-2020-11-19-at-7.03.14-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fb67951_screenshot-2020-11-19-at-7.05.19-pm/screenshot-2020-11-19-at-7.05.19-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fb67a0f_screenshot-2020-11-19-at-7.08.01-pm/screenshot-2020-11-19-at-7.08.01-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fb67a6c_screenshot-2020-11-19-at-7.10.55-pm/screenshot-2020-11-19-at-7.10.55-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fb6945b_screenshot-2020-11-19-at-9.18.12-pm/screenshot-2020-11-19-at-9.18.12-pm.png']",
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.8  EC2 Dashboard,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Let\'s have an overview of the information available on the EC2 dashboard.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: EC2 Dashboard</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The details of the items highlighted in red above are:</p>\n<h3 class=""chakra-heading css-k57syw"">1. Resource Summary</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">It presents the summary of all the EC2 resources running in a particular region. Currently, it is showing one instance (running state), one key pair, zero load balancers, two security groups, and one volume (storage). A few of these resources, such as key-pairs, security groups, and load balancers are modular in nature, meaning, they can be re-utilized to launch another EC2 instance.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">2. Instances</h3>\n<p class=""chakra-text css-o3oz8b"">The simplest form of the EC2 Instance is the pay as you go, the on-demand instance, and that\'s this type of instance created using the default Launch wizard available on the EC2 dashboard. It\'s just the normal one pay as you go.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Instances</strong> - It shows the list and details of the instances running in a given region.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Instance Types</strong> - It shows the list of instance types (different combinations of hardware - CPU, storage, memory, architecture) available to launch a new instance.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Launch Templates</strong> - These are the scripts that contain configuration information written either in JSON or YAML format to automate instance launches, simplify permission policies, and enforce best practices across your organization.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Spot Requests</strong> - Spot is where you actually bid on an instance. If the price falls below your bid, the instance is automatically spun up and if the price goes above your bid, the server is automatically terminated. So this is good if you have an application that has a flexible start and stop time.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Reserved Instances</strong> - This is where you sign a contract for your EC2 Instance in either one to three years and you get a huge discount. So, this is good when you know the steady-state for your applications and you want to pay upfront.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Dedicated Hosts</strong> - This is where you have your own dedicated hardware. You may have license requirements for certain software packages that say no multi-tenancy. Meaning that you cannot run that application on a shared server. So Dedicated Hosts would solve that problem.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Capacity Reservations</strong> - This allows you to reserve the desired capacity (count) of instances in a particular availability zone. The reserved capacity is charged at the selected instance type’s On-Demand rate whether an instance is running in it or not.</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">See the detailed summary of all types and purchasing options <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">3. Images</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">AWS provides an option to create custom <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html"">AMIs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Alternatively, you can use Images owned by Amazon and others. The AMI dashboard shows the Images owned by you. You can build a custom Image by using the <strong>EC2 Image Builder</strong> wizard available on this dashboard.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">4. Elastic Block Store (EBS)</h3>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">In simple words, you can think of EBS as an external hard drive that we attach to the server for additional storage.</p>\n</blockquote>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Volumes</strong> - It shows the list and details of all the volumes currently available to use. You can re-purpose a volume, meaning, you can anytime attach or detach a volume to any instance. You can create new volumes by using the <strong>Create Volume</strong> wizard. AWS provides the option to have a variety of volumes, such as general-purpose solid-state drive (SSD), provisioned SSD, general hard-disk (HDD), throughput-optimized HDD, or magnetic drives. Each type of volume has a different serving capacity, such as the number of I/O operations per second.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Snapshots</strong> - A snapshot is the saved state of the data in the (existing) volume at a particular moment. Snapshots can be used to transfer volumes from one instance to another or saving the state for future use.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Lifecycle Manager</strong> - It helps to schedule and manage the creation and deletion of EBS snapshots.</p>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: EC2 Dashboard (Scrolled down)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">5. Network &amp; Security</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Security Groups</strong> -\nA security group acts as firewall rules that control the traffic for EC2 instances or virtual private clouds (VPC). You can define multiple security groups. A given security group can be assigned to multiple EC2 instances.</li></ul>\n<p class=""chakra-text css-o3oz8b"">When you launch an instance, you can specify one or more security groups. You can modify the rules for a security group at any time; the new rules are automatically applied to all instances that are associated with the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html"">security group<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Elastic IP addresses</strong> -\nAn Elastic IP address is a <em class=""chakra-text css-o3oz8b"">static</em> IPv4 address. Assume you have a server running on an EC2 instance, that has a specific IP address. In case, the instance fails, the back-up instance will spin up. The back-up instance will have a <em class=""chakra-text css-o3oz8b"">different</em> IP address, which will require you to update the IP address used in your client application. This problem can be solved by using the elastic IP address. An <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html"">Elastic IP address<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> can mask the failure of an instance by remapping the current IP address to another instance in your account.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Placement Group</strong> - You can imagine the EC2 instances as VMs running on the real servers in a data center. By default, the EC2 instances that you launch will be spread out across underlying hardware. But, sometimes there is a requirement to place the group of interdependent instances to meet the needs of your workload.  AWS allows to place the instances based on either of the following <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html"">placement strategies<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> - cluster (tightly packed), partition (logically grouped), or spread evenly across the underlying hardware.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Key Pairs</strong> - A <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html"">key-pair<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> is pair of (encrypted) public and (unencrypted PEM encoded) private keys. The public key is placed automatically on the instance, and the private key is made available to the user, just once. You can only log in to your running instance with the help of your private key.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Network Interfaces</strong> - A <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html"">network interface<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> represents a virtual network card in a VPC, and it has a both private and public IP addresses. When you create an instance, a default network interface is attached to it. In this dashboard, you can create and attach additional network interfaces to any instance. An EC2 instance can have multiple network interfaces.</p>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">6. Load Balancing</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Load Balancer</strong> - A load balancer distributes the incoming traffic across multiple <em class=""chakra-text css-o3oz8b"">targets</em>, such as EC2 instances in one or more Availability Zones. AWS supports three types of load balancers: <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html"">Application Load Balancers<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html"">Network Load Balancers<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> (new), and <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/introduction.html"">Classic Load Balancers<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> (might become deprecated soon).</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">7. EC2 Auto Scaling</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">It is a <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html"">service<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> that automatically launches/terminates EC2 instances based on user-defined scaling policies, scheduled actions, and health checks. It ensures that you have a specified number of instances always up and running. You can specify the minimum and maximum count of instances. This service uses <em class=""chakra-text css-o3oz8b"">launch templates</em>, i.e., a script containing the configuration details of the instances that will be launched automatically.</li></ul></div>']","['https://video.udacity-data.com/topher/2020/November/5fb699a0_screenshot-2020-11-19-at-9.35.40-pm/screenshot-2020-11-19-at-9.35.40-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fb69989_screenshot-2020-11-19-at-9.39.59-pm/screenshot-2020-11-19-at-9.39.59-pm.png']",
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.9  EC2 - Connect to Linux Instance,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You can connect to your Linux/Ubuntu EC2 instance using the private key generated by AWS. To get started, start your instance and connect to it, as shown in the snapshot below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Connect to the selected instance. Note the public DNS.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Recently, AWS has launched the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect.html"">EC2 Instance Connect<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> wizard, which can help you to connect directly from the EC2 dashboard. Alternatively, you can use SSH as well.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: You can connect using the <strong>EC2 Instance Connect</strong> wizard.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Connect using SSH. <strong>Copy</strong> the commands and follow the steps mentioned above.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Change the Private key file permissions</strong><br>\nOpen an SSH client/terminal. Navigate to the directory where you have your private key (.pem) file in your local machine, and change the permissions to hide it from the public for SSH to work, using the command</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-groovy"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>chmod </span><span class=""token"" style=""color: rgb(2, 124, 124);"">400</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>path of </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> key </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>pem file locally</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Connect using the Public DNS</strong><br>\nYou will log-in using the default name. The default username for Ubuntu instances is <code class=""chakra-code css-1u83yg1"">ubuntu</code>, and for Linux, it is <code class=""chakra-code css-1u83yg1"">ec2-user</code>.  The list of default usernames is available <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ol>\n<p class=""chakra-text css-o3oz8b"">Connect to your instance using its public DNS, as</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ssh</span><span> -i </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>path of private key .pem </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">file</span><span> locally</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>public DNS</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The successful login will show you a prompt as shown in the snapshot below:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Successful login using SSH. Notice the private IPv4 address at the prompt is <code class=""chakra-code css-1u83yg1"">172.31.23.177</code>, which you can also see in your EC2 dashboard.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp"">You will need to have your PuTTY Private Key (.ppk) file locally. For this reason, we will use <em class=""chakra-text css-o3oz8b"">PuTTYgen</em> utility to convert the .pem file to .ppk format.\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Run the <em class=""chakra-text css-o3oz8b"">PuTTYgen</em> in your machine.</li><li class=""css-cvpopp"">Click <strong>Load</strong>, as shown in the snapshot below.</li><li class=""css-cvpopp"">Browse and load the .pem key into the <em class=""chakra-text css-o3oz8b"">PuTTYgen</em> and then click on <strong>Save private key</strong> to save the key in .ppk format without a passphrase.</li></ul>\n</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""3"" class=""css-13a5a39""><li class=""css-cvpopp"">Run the <em class=""chakra-text css-o3oz8b"">PuTTY</em> to connect to the EC2 instance.</li><li class=""css-cvpopp"">Get the public DNS / IP address of your EC2 instance (host) from your AWS EC2 dashboard. Then, enter the public DNS / IP address of your EC2 instance (host) into the <em class=""chakra-text css-o3oz8b"">PuTTY</em> . See snapshot below.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""5"" class=""css-13a5a39""><li class=""css-cvpopp"">Click on Connection → Data to enter the default username as <code class=""chakra-code css-1u83yg1"">ubuntu</code> for Ubuntu, or <code class=""chakra-code css-1u83yg1"">ec2-user</code> for Linux based OS. The list of default usernames are listed <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp"">Click on Connection → SSH → Auth to upload the .ppk file. See the snapshot below:</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""7"" class=""css-13a5a39""><li class=""css-cvpopp"">If everything is set up correctly, a terminal window would open up to log you into your Linux/Ubuntu EC2 instance.</li></ol></div>']","['https://video.udacity-data.com/topher/2020/November/5fbe05b0_screenshot-2020-11-25-at-12.47.06-pm/screenshot-2020-11-25-at-12.47.06-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fbe05cc_screenshot-2020-11-25-at-12.47.50-pm/screenshot-2020-11-25-at-12.47.50-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fbe05fb_screenshot-2020-11-25-at-12.48.04-pm/screenshot-2020-11-25-at-12.48.04-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fbe0856_screenshot-2020-11-25-at-1.01.00-pm/screenshot-2020-11-25-at-1.01.00-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e72767e_screenshot-2020-03-14-at-7.21.47-pm/screenshot-2020-03-14-at-7.21.47-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e727698_screenshot-2020-03-14-at-7.26.48-pm/screenshot-2020-03-14-at-7.26.48-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e7276b2_screenshot-2020-03-14-at-7.39.44-pm/screenshot-2020-03-14-at-7.39.44-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e7276cd_screenshot-2020-03-14-at-7.46.42-pm/screenshot-2020-03-14-at-7.46.42-pm.png']",
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.10  Monitor your AWS Costs and Credits,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://console.aws.amazon.com/billing/home#/"">AWS Billing Dashboard<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If your account has been created within one year from the current date, your <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://console.aws.amazon.com/billing/home#/"">AWS Billing Dashboard<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> will also show the resource usage statistics for the free tier services. See the snapshot below:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Snapshot: Resource usage statistics for top-free tier services.</p></div>']","['https://video.udacity-data.com/topher/2020/May/5ec71862_screen-shot-2020-05-21-at-5.07.48-pm/screen-shot-2020-05-21-at-5.07.48-pm.png', 'https://video.udacity-data.com/topher/2020/November/5fbb70d9_screenshot-2020-11-23-at-12.54.53-pm/screenshot-2020-11-23-at-12.54.53-pm.png']",
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.11  Docker,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<center>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Term</strong></th><th class=""css-zl9m57""><strong>Definition</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Dockerfile</td><td class=""css-1eywhk4"">A file containing instructions on how to translate an application into an image that can be run in containers</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Base Image</td><td class=""css-1eywhk4"">A set of common dependencies built into a Docker image that acts as a starting point to build an application’s Docker images to reduce build times</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Image</td><td class=""css-1eywhk4"">A snapshot of dependencies and code used by Docker containers to run an application</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Container</td><td class=""css-1eywhk4"">Grouped software dependencies and packages that make it easier and more reliable to deploy software</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">DockerHub</td><td class=""css-1eywhk4"">A centralized place, called Container Registry, to store container images</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Ephemeral</td><td class=""css-1eywhk4"">Software property where an application is expected to be short-lived</td></tr></tbody></table></div>\n</center>\n---</div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">How does it work?</h3>\n<p class=""chakra-text css-o3oz8b"">Let me give you an overview of the flow of execution for creating a container:</p>\n<center>\n<p class=""chakra-text css-o3oz8b""><strong>Dockerfile → Docker Image → Docker container</strong></p>\n</center>\nThe steps shown above are:\n1. **Write a Dockerfile**:<br> It is a text document that contains the commands a user would execute on the command line to assemble an image. In this file, you can specify the necessary environments and dependencies. For example, see a Dockerfile below:\n```bash\n# Pull the ""tomcat"" image. The community maintains this image. \nFROM tomcat \n# Copy all files present in the current folder to the ""/usr/local/tomcat/webapps""  folder \nCOPY ./*.* /usr/local/tomcat/webapps\n```\nIn the example above, every time you create a container, it will have the tomcat web server installed. In addition, all the contents of the current directory will also be copied to the */usr/local/tomcat/webapps* folder of each container. See another Dockerfile [example here](https://github.com/docker/labs/blob/master/beginner/static-site/Dockerfile). <br>\nSee the [Dockerfile reference](https://docs.docker.com/engine/reference/builder/) for possible commands you can use. <br><br>\n<ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Build an Image</strong>:<br> Use the <code class=""chakra-code css-1u83yg1"">docker build</code> command to build an image from the Dockerfile. Usually, we execute this command from the same directory where the Dockerfile is present.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># This command will look for a Dockerfile in the `pwd`, and create myImage</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> build  --tag myImage  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span>OPTIONS</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> path_where_to_store_the_image </span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">You can store your images online at DockerHub as well, so that you/anyone can ""pull"" them on any other machine, anytime. We can even use the pre-created Docker images maintained by the community. <br><br></p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">You can by-pass the two steps mentioned above by directly pulling a pre-created image from the DockerHub to your local machine, and then create and run containers using that image. For example, you can pull an image by running the command below in your terminal:</p>\n</blockquote>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> pull tomcat:latest</span></code></div></div></pre>\n<ol role=""list"" start=""3"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Create and run a Container</strong>:<br> After creating an image, you can use it to create as many Containers as you want on any platform. Each container will have the same environment and dependencies to run a copy of your application. The following command creates and runs a new container:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> run --name myContainer myImage</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select all statements that are correct with regard to Docker Image.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It is a portable package that contains the application and its dependencies.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An image can be instantiated multiple numbers of times to create ""containers"".</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We have to install a software ""Docker Desktop"" to be able to create images and instantiate containers</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Images can be stored locally, as well as online at DockerHub</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What is a container?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A server which runs your application directly on it</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A bundled environment containing the tools, libraries, and other components to run an application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A testing framework</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">How to Install Docker?</h3>\n<p class=""chakra-text css-o3oz8b"">We will deploy our application on a Virtual Machine (VM) on Amazon Web Service (AWS) cloud. The VM that we will use would be a Linux machine, where we will install the Docker as</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-shell"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Install Docker</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> yum </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">install</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Add the current user to the ""docker"" group</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">usermod</span><span> -a -G </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token environment"" style=""color: rgb(15, 43, 61);"">$USER</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Start Docker service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">service</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> start</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Alternatively, if you wish to install Docker locally, you can refer to the official <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.docker.com/desktop/"">""Download and Install""<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> section.</p>\n<h3 class=""chakra-heading css-k57syw"">Basic Commands</h3>\n<p class=""chakra-text css-o3oz8b"">The following are basic commands used with Docker:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">docker build .</code> will run the Dockerfile to create an image. A Dockerfile is a text file that contains commands as a step-by-step recipe on how to build up your image. <em class=""chakra-text css-o3oz8b""><strong>In our case, we would not use a Dockerfile because we will use a pre-created <code class=""chakra-code css-1u83yg1"">jenkinsci/blueocean</code> image to instantiate a container.</strong></em> For more details about Dockerfile, refer the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.docker.com/get-started/part2/"">Build and run your image<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> page.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">docker images</code> will print all the available images</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">docker run {IMAGE_ID}</code> will create and run a container with the specified image</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">docker exec -it {CONTAINER_ID} bash</code> will open a bash terminal inside the container</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">docker ps</code> will print all the running containers</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">docker kill {CONTAINER_ID}</code> will terminate the container</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">There are many more commands that are beyond the scope of this exercise, however, you can refer to this <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.docker.com/engine/reference/commandline/docker/"">Reference manual<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> anytime. <strong>We will see the instructor using a few of these commands in the final consolidated demonstration on ""Bringing it all Together"" page.</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An important command is:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> container </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">help</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">It will show you all possible docker commands related to a container.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Output of <code class=""chakra-code css-1u83yg1"">docker container help</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match the term with its corresponding definition.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Dockerfile</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Docker Container</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Docker Image</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Container Registry</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An ephemeral application that is deployed as one unit</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application and its dependencies grouped with execution instructions</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Centralized resource for storing images</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Instructions on how to translate application code into an image</p></div>']",['https://video.udacity-data.com/topher/2021/February/60262bda_screenshot-2021-02-12-at-12.48.12-pm/screenshot-2021-02-12-at-12.48.12-pm.png'],https://www.youtube.com/embed/E2QjRCyCo8c
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.12  Docker - II,"['<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Connect to your EC2 instance using SSH.</strong>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Open the terminal, go to the folder where you have downloaded the key-pair (say <em class=""chakra-text css-o3oz8b"">AWS_EC2_DemoKey.pem</em>) and run:</li></ul>\n</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">chmod</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">400</span><span> AWS_EC2_DemoKey.pem</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">If you are a Windows user, you will have to use the PuTTy utility to convert the <em class=""chakra-text css-o3oz8b"">.pem</em> to <em class=""chakra-text css-o3oz8b"">.ppk</em> and then SSH into your EC2 instance.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">SSH into your EC2 instance:</li></ul>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-apache"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>ssh -i ""AWS_EC2_DemoKey.pem"" ec2-user@ec2-18-224-137-188.us-east-2.compute.amazonaws.com</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The IP address and key filename will be different in your case.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">SSH login steps</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A successful login to EC2 instance. See the prompt.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""3"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Install Docker</strong><br>\nRun the following commands to install Docker:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># update the existing packages</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> yum update\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># download and install Docker</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> yum </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">install</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Add the $USER user to the ""docker"" user group </span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># The current $USER is ec2-user</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">usermod</span><span> -a -G </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token environment"" style=""color: rgb(15, 43, 61);"">$USER</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">reboot</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The last command above will reboot the EC2 instance, and hence, your connection will be closed. <strong>Reconnect to your EC2 instance after 2 minutes,</strong> using the same SSH command:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ssh</span><span> -i </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""AWS_EC2_DemoKey.pem""</span><span> ec2-user@ec2-18-224-137-188.us-east-2.compute.amazonaws.com</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""4"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Create and run your first Container</strong><br>\nJenkins community provides various (open-source) images that anyone can use to create and run containers. Using images bypasses the need to write a Dockerfile.</li></ol>\n<p class=""chakra-text css-o3oz8b"">We will take a pre-created Apache server image, <code class=""chakra-code css-1u83yg1"">httpd </code>, available in the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://hub.docker.com/_/httpd?tab=description&amp;page=1&amp;ordering=last_updated"">Docker hub here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, as shown in the snapshots below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We are using <em class=""chakra-text css-o3oz8b"">Option 2</em> to use this image. Though, you can view the corresponding Dockerfile in <em class=""chakra-text css-o3oz8b"">Option 1</em>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Run the following commands to start the Docker:</li></ul>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># start Docker service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">service</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> start\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Check if the Docker engine is running</span><span>\n</span><span>systemctl show --property ActiveState </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Create and run a container from an existing image. Run this command in in the EC2 instance\'s terminal:</li></ul>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> run -dit --name myApacheServer -p </span><span class=""token"" style=""color: rgb(2, 124, 124);"">8080</span><span>:80 -v apacheData:/usr/local/apache2/htdocs/ -v myPages:/var/www/html httpd:2.4\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Check the currently running containers</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ps</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The command above will automatically <code class=""chakra-code css-1u83yg1"">pull</code> the <code class=""chakra-code css-1u83yg1"">httpd:2.4</code> image from the DockerHub to the EC2 instance, meaning it will perform the job of the following command:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> pull httpd:2.4</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The various options used in the command above are:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">--name create a name for your container</li><li class=""css-cvpopp"">-p specifies port on which the Apache server will run</li><li class=""css-cvpopp"">-d detached mode, meaning run the container in the background</li><li class=""css-cvpopp"">-v will bind a volume to persist the data of the Apache server. This is important because when we will restart the container, we would want the Apache related data (configuration, user-data, plugins) to be present there.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Then, check the output in your local browser, by copy-pasting the EC2 instance\'s public IP and appending with (Apache\'s) default port 8080.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Output at <strong><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.224.137.188:8080/"">http://18.224.137.188:8080/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""5"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Serve a custom HTML page</strong><br>\nApache server can serve your custom HTML page. We have provided a <strong>sample.html</strong> file in the Resources section of the current page, that you can download and use along with the commands below.</li></ol>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Download the <em class=""chakra-text css-o3oz8b"">sample.html</em> file from Udacity classroom page to your local machine. <br><br></p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Copy the <em class=""chakra-text css-o3oz8b"">sample.html</em> file from your local computer to the EC2 instance. <strong>Run this command from your local terminal</strong>:</p>\n</li></ul>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-ruby"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>scp </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>i AWS_EC2_DemoKey</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>pem sample</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>html ec2</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>user@</span><span class=""token"" style=""color: rgb(2, 124, 124);"">18.224</span><span class=""token"" style=""color: rgb(2, 124, 124);"">.137</span><span class=""token"" style=""color: rgb(2, 124, 124);"">.188</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>home</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>ec2</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>user</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>sample</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>html</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Of course, replace the IP address, as applicable to you. <br><br></p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Copy the <em class=""chakra-text css-o3oz8b"">sample.html</em> from EC2 instance to the currently running container at the default path for Apache server. <strong>Run this command from EC2 instance\'s terminal</strong>:</li></ul>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Check if you have the file in your root directory</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ls</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Check the currently running containers</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ps</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Copy the container ID and use it in the command below</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">cp</span><span> sample.html 5b5b034f995c:/usr/local/apache2/htdocs/sample.html</span></code></div></div></pre>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Check the output at <code class=""chakra-code css-1u83yg1"">&lt;Public IP of the EC2 instance&gt;:8080/sample.html</code></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Check if the container is running using <code class=""chakra-code css-1u83yg1"">docker ps</code> command</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Output at <strong><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.224.137.188:8080/sample.html"">http://18.224.137.188:8080/sample.html<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""6"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Stop Container and Docker</strong><br>\nStop a particular container using its ID.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Stop</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> stop </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>container_ID</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Remove</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> container </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">rm</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>container_ID</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Stop the docker services using the commands:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">service</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> stop</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Useful Tip</h3>\n<p class=""chakra-text css-o3oz8b"">Beyond this exercise, if you want to run any command in the container, then you have two options to do so:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Use bash shell into the container</strong><br>\nFind the container name/ID using <code class=""chakra-code css-1u83yg1"">docker ps</code> command, and run:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Use ""docker exec -it &lt;container name&gt; bash""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">exec</span><span> -it myContainer </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">bash</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Install Maven dependency</span><span>\n</span><span>apk </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">add</span><span> maven</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b""><br><br></p>\n<ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>User <code class=""chakra-code css-1u83yg1"">docker exec</code> command</strong><br>\nFind the container ID using <code class=""chakra-code css-1u83yg1"">docker ps</code> command, and run:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">exec</span><span> -it 5b5b034f995c  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>command</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span><span> </span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Supporting Materials</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2021/February/6024056c_sample/sample.html"">sample.html<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']","['https://video.udacity-data.com/topher/2021/February/6023cdc4_screenshot-2021-02-10-at-5.39.36-pm/screenshot-2021-02-10-at-5.39.36-pm.png', 'https://video.udacity-data.com/topher/2021/February/6023ce2e_screenshot-2021-02-10-at-5.44.00-pm/screenshot-2021-02-10-at-5.44.00-pm.png', 'https://video.udacity-data.com/topher/2021/February/6023f48b_screenshot-2021-02-10-at-8.26.07-pm/screenshot-2021-02-10-at-8.26.07-pm.png', 'https://video.udacity-data.com/topher/2021/February/6023f4a7_screenshot-2021-02-10-at-8.26.51-pm/screenshot-2021-02-10-at-8.26.51-pm.png', 'https://video.udacity-data.com/topher/2021/February/6023f548_screenshot-2021-02-10-at-8.31.19-pm/screenshot-2021-02-10-at-8.31.19-pm.png', 'https://video.udacity-data.com/topher/2021/February/6023fae8_screenshot-2021-02-10-at-8.54.21-pm/screenshot-2021-02-10-at-8.54.21-pm.png', 'https://video.udacity-data.com/topher/2021/February/6023f516_screenshot-2021-02-10-at-8.30.07-pm/screenshot-2021-02-10-at-8.30.07-pm.png']",
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.13  Jenkins,"['<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong>: In the final demo, <strong>you will not require to install Jenkins manually on any machine</strong>. Instead, Jenkins will come preinstalled in the Docker container that you will create from an already available Docker image. Recall that a Docker container is an isolated computing environment in the EC2 instance.</p>\n</blockquote>\n<p class=""chakra-text css-o3oz8b"">However, if we were not using a Docker container, you would install Jenkins manually in the EC2 instance (a Linux machine). Therefore, let\'s learn Jenkins\'s basics and how we can install it on a Linux machine, in general.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A CI/CD Pipeline showing the role of Jenkins automation server building and deploying multiple environments on the server available in the Cloud</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following are the CI/CD Pipeline tools?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Travis CI</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Jenkins</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">GitHub</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">AWS</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select all statements that are correct with regard to a CI/CD pipeline?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A pipeline helps you automate steps in your software delivery process, such as initiating automatic builds, tests and then deploying to the server (Amazon EC2 instances).</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A pipeline rebuilds, and deploys every time there is a change in code.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The code must be available in a version control system such as GitHub or the cloud storage.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Jenkins GUI saves the administrator password at the specified location on the machine it is installed.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""3"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Copy-paste the admin password:</strong> On the terminal, where you have connected to the Linux EC2 instance, view the content of the password file using the command</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">cat</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>path copied </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">in</span><span> the previous step</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">It will show the default administrator password. You can copy and paste this password in the console (browser) to log in.</p>\n<ol role=""list"" start=""4"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Install default plugins:</strong> After successful login, you may choose to install default plugins.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Install suggested plugins</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Default plugins getting installed</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""5"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Set up admin credentials:</strong> Provide a username, password, and other details for yourself. You will have to use the same credentials when you\'ll come back to the current Jenkins console in the future.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""6"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Dashboard:</strong> Next, it will show you a success message and take you to the Jenkins dashboard.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Jenkins dashboard</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""7"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Shut down:</strong> Shut down the EC2 instance you have been using in the above tutorial steps because you will create a new EC2 instance for the upcoming demo.</li></ol>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Reason:</strong> In the current EC2 instance, the Jenkins service is running on port 8080. However, in the next demo, we want this port available for another purpose, running a container service. So, it may create a conflict and confusion for you.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">[Optional] Additional Tutorials</h3>\n<p class=""chakra-text css-o3oz8b"">Make yourself familiarized with the Jenkins pipeline implementation by following along below guided tutorials:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jenkins.io/doc/pipeline/tour/hello-world/"">Creating your first Pipeline<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jenkins.io/doc/tutorials/build-a-java-app-with-maven/#stopping-and-restarting-jenkins"">Build a Java app with Maven<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What language is Jenkins written in?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Python</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Ruby</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Scala</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Java</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What is <code class=""chakra-code css-1u83yg1"">Jenkinsfile</code>?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A text file that contains the definition of a Jenkins Pipeline.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A file that can be written in either of two types of syntax - Declarative or Scripted.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A configuration file that can define steps to be performed in different stages through the specified agent.</p></div>']","['https://video.udacity-data.com/topher/2021/February/6023b157_ci-cd-pipeline/ci-cd-pipeline.png', 'https://video.udacity-data.com/topher/2020/May/5ed0f0fb_screenshot-2020-03-14-at-6.04.20-pm/screenshot-2020-03-14-at-6.04.20-pm.png', 'https://video.udacity-data.com/topher/2020/May/5ed0f190_screenshot-2020-03-14-at-6.26.15-pm/screenshot-2020-03-14-at-6.26.15-pm.png', 'https://video.udacity-data.com/topher/2020/May/5ed0f1bf_screenshot-2020-03-14-at-6.29.34-pm/screenshot-2020-03-14-at-6.29.34-pm.png', 'https://video.udacity-data.com/topher/2020/May/5ed0f1fb_screenshot-2020-03-14-at-6.47.42-pm/screenshot-2020-03-14-at-6.47.42-pm.png', 'https://video.udacity-data.com/topher/2020/May/5ed0f21d_screenshot-2020-03-14-at-6.49.34-pm/screenshot-2020-03-14-at-6.49.34-pm.png', 'https://video.udacity-data.com/topher/2020/May/5ed0f232_screenshot-2020-03-14-at-6.53.29-pm/screenshot-2020-03-14-at-6.53.29-pm.png']",https://www.youtube.com/embed/FINqfPE5C0E
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.14  Bringing it all Together,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The following steps are demonstrated in the video above:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Launch an AWS EC2 instance</strong><br>\nUsing <em class=""chakra-text css-o3oz8b"">Amazon Linux 2 AMI</em> and <em class=""chakra-text css-o3oz8b"">t2.micro</em> instance type. This EC2 instance would already have the Docker package available on it. In addition, choose the following configuration:</li></ol>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Choose a default VPC, public subnet, and enable the auto-assign public IP</li><li class=""css-cvpopp"">For the security group, allow TCP traffic on port 80 and 8080, and SSH traffic on port 22 from anywhere. Leave the remaining values as the defaults.</li><li class=""css-cvpopp"">Download a new key-pair or use the existing one.</li></ul>\n<ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Connect to the EC2 instance</strong><br>\nUse SSH to connect to your Linux EC2 instance:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Assuming the key name is AWS_EC2_DemoKey.pem available in the pwd</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">chmod</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">400</span><span> AWS_EC2_DemoKey.pem\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Assuming the public DNS is: ec2-18-221-37-196.us-east-2.compute.amazonaws.com</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ssh</span><span> -i </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""AWS_EC2_DemoKey.pem""</span><span> ec2-user@ec2-18-221-37-196.us-east-2.compute.amazonaws.com</span></code></div></div></pre>\n<ol role=""list"" start=""3"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Install Docker</strong><br>\nAfter successful connection, install the Docker, add the current user to the user-group, and reboot:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># update the existing packages</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> yum update\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># download and install Docker</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> yum </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">install</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Add the $USER user to the ""docker"" user group </span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># The current $USER is ec2-user</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">usermod</span><span> -a -G </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token environment"" style=""color: rgb(15, 43, 61);"">$USER</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">reboot</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The last command above will reboot the EC2 instance, and hence, your connection will be closed. Reconnect to your EC2 instance after 2 minutes, using the same SSH command as used in the previous step.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://hub.docker.com/r/jenkinsci/blueocean/"">jenkinsci/blueocean<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> Docker image in Docker hub</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""4"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Create and run your Container</strong><br>\nIn this final demo, we are using another Docker image, <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://hub.docker.com/r/jenkinsci/blueocean/"">jenkinsci/blueocean<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, so that you do not have to write any Dockerfile. Let\' start the Docker, create and run a container from this image.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># start Docker service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">service</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> start\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Check if the Docker engine is running</span><span>\n</span><span>systemctl show --property ActiveState </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Create and run a new Container using the ""jenkinsci/blueocean"" image</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> run -u root -d --name myContainer -p </span><span class=""token"" style=""color: rgb(2, 124, 124);"">8080</span><span>:8080 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""</span><span class=""token environment"" style=""color: rgb(15, 43, 61);"">$HOME</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""</span><span>:/home jenkinsci/blueocean</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">In the command above, the various options are:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">--name create a name for your container, say <strong>myContainer</strong>. However, the demo has shown the <strong>jenkins</strong> as container name.</li><li class=""css-cvpopp"">-p specifies a port on which the Jenkins server will run. Basically, <code class=""chakra-code css-1u83yg1"">-p 8080:8080 </code> mapping 8080 of the host (EC2 instance) to the 8080 of the container.</li><li class=""css-cvpopp"">-d detached mode, meaning the container will run in the background</li><li class=""css-cvpopp"">-v is binding a volume to persist the data of the Jenkins server. This is important because when we will restart the container, we would want the Jenkins related data (configuration, user-data, plugins) to be present there. We are binding three volumes.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">-v jenkins-data:/var/jenkins_home</code> is the first volume as the default home directory of Jenkins</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">-v ""$HOME"":/home</code> is the second volume for user-specific data</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">-v /var/run/docker.sock:/var/run/docker.sock</code> is the third volume where we have defined a docker socket in the container. This one will help to execute docker commands from within the container. Have a look at this <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://stackoverflow.com/questions/35110146/can-anyone-explain-docker-sock#:~:text=137-,docker.,defaults%20to%20use%20UNIX%20socket.&amp;text=There%20might%20be%20different%20reasons,Docker%20socket%20inside%20a%20container."">discussion<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more details.</li></ul>\n<p class=""chakra-text css-o3oz8b"">At this stage, the Jenkins console will come up on the 8080 port, say <strong><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.221.37.196:8080"">http://18.221.37.196:8080<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></strong> in your local browser. <strong>But, we need to generate an additional RSA key-pair (public and private) to secure the pipeline. We will place the public key in the Github account, and private key in the Jenkins console.</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Start Docker, and run a container</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""5"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Create an RSA key pair inside the container</strong><br>\nBefore login into the Jenkins console, let\'s create an RSA key pair inside the container. Recall that if you want to run any command inside of the container, then you first open a bash shell into the container, as shown below:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Open a shell into myContainer. The container name may vary in your case</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">exec</span><span> -it myContainer </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">bash</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Since our project is a Maven project, we need to install Maven in the container</span><span>\n</span><span>apk </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">add</span><span> maven\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Generate RSA key-pair. It will generate a public and private key. </span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># We will place the public key in the Github account, and the private key in the Jenkins console</span><span>\n</span>ssh-keygen -t rsa\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># View the private key</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">cat</span><span> /root/.ssh/id_rsa\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># View the pubic key </span><span>\n</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">cat</span><span> /root/.ssh/id_rsa.pub</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">First-time admin login to Jenkins console at EC2 instance\'s public IP appended with 8080 port. (Say, <strong><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.221.37.196:8080"">http://18.221.37.196:8080<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></strong>). The IP address will vary in your case.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""6"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Admin login to Jenkins console</strong><br>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Go to the AWS dashboard to copy the public IP address of your Linux EC2 instance. Paste the public IP address into your browser, and append with <code class=""chakra-code css-1u83yg1"">:8080</code> port. For the first time, it will open up the Jenkins console GUI. It will ask you the admin password for the first-time.</li><li class=""css-cvpopp"">The Jenkins admins password can be found at two places, in the host EC2 instance, and inside the container.</li></ul>\n</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Run the following commands in the host EC2 instance\'s terminal</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ps</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Use the container ID from the command above</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> logs </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>conatiner_id</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Since our Jenkins server is running inside of the container, therefore the admin password will also be stored there as well.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Open the bash into the container</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">exec</span><span> -it myContainer </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">bash</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># View the file</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">cat</span><span> /var/jenkins_home/secrets/initialAdminPassword</span></code></div></div></pre>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Paste the admin password into the Jenkins console, say <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.221.37.196:8080"">http://18.221.37.196:8080<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> in your local browser, install the suggested plugins, and create the admin account. See the snapshots below.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Admin password in the logs of the host EC2 instance.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Admin password inside the container</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Jenkins dashboard</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""7"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Add private key to Jenkins global credentials</strong><br>\nAt the Jenkins console, go to <strong>Manage Jenkins</strong> → <strong>Manage Credentials</strong> →\t<strong>Global credentials</strong> to create an SSH username and paste the private key. Recall that you can view the private key from the <strong>bash into the container</strong> as:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Open the bash into the container, if you have exited from the bash</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">exec</span><span> -it myContainer </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">bash</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># View the private key</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">cat</span><span> /root/.ssh/id_rsa</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">See the snapshots below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Manage Jenkins</strong> → <strong>Manage Credentials</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a new <strong>Global credential</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Paste the private key here. Note the <strong>Kind</strong> of credentials above.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""8"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Add public key to Github repository</strong><br>\nLet\'s add the corresponding public key into the Github repository. Note that this is a good practice to use a pair of a public-private key. Go to the <strong>repository in your Github account</strong> → <strong>Settings</strong> → <strong>Deploy keys</strong> page. Paste the public key here. Recall that you can view the public key from the <strong>bash into the container</strong> as:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># View the pubic key </span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">cat</span><span> /root/.ssh/id_rsa.pub</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Go to Deploy keys settings</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add the public key</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">9  <strong>Jenkins console: Create and build the first Job</strong></p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Create the <strong>Freestyle project</strong> type job, say <strong>myFirstJob</strong>, or choose any other name. Enter the details as mentioned below:</li></ul>\n<center>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Tab</strong></th><th class=""css-zl9m57""><strong>Field</strong></th><th class=""css-zl9m57""><strong>Value</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">General</td><td class=""css-1eywhk4"">Github project</td><td class=""css-1eywhk4"">Provide your Github repository URL</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Source Code Management</td><td class=""css-1eywhk4"">Git</td><td class=""css-1eywhk4"">Check</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">Repository URL</td><td class=""css-1eywhk4"">Provide your Github repository URL</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">Credentials</td><td class=""css-1eywhk4"">Choose the one you\'ve created in the Global credentials</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Build</td><td class=""css-1eywhk4"">Add build step</td><td class=""css-1eywhk4"">Invoke top-level Maven targets</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">Goals</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">package</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">POM</td><td class=""css-1eywhk4"">Specify the POM file path relative to your repository home, such as <br> <code class=""chakra-code css-1u83yg1"">starter_code/pom.xml</code></td></tr></tbody></table></div>\n</center>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Save the job, and click on the ""Build Now"" option. </div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Build success</p></div>']","['https://video.udacity-data.com/topher/2021/February/6024ddc0_screenshot-2021-02-11-at-12.46.59-pm/screenshot-2021-02-11-at-12.46.59-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024e08e_screenshot-2021-02-11-at-1.11.35-pm/screenshot-2021-02-11-at-1.11.35-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024e0c1_screenshot-2021-02-11-at-1.13.53-pm/screenshot-2021-02-11-at-1.13.53-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024eb11_screenshot-2021-02-11-at-1.51.38-pm/screenshot-2021-02-11-at-1.51.38-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024eb2b_screenshot-2021-02-11-at-1.51.48-pm/screenshot-2021-02-11-at-1.51.48-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024eb61_screenshot-2021-02-11-at-1.52.20-pm/screenshot-2021-02-11-at-1.52.20-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024ebfb_screenshot-2021-02-11-at-2.03.46-pm/screenshot-2021-02-11-at-2.03.46-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024efa8_screenshot-2021-02-11-at-2.12.45-pm/screenshot-2021-02-11-at-2.12.45-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024efd5_screenshot-2021-02-11-at-2.13.23-pm/screenshot-2021-02-11-at-2.13.23-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024f085_screenshot-2021-02-11-at-2.15.51-pm/screenshot-2021-02-11-at-2.15.51-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024f4a3_screenshot-2021-02-11-at-2.35.38-pm/screenshot-2021-02-11-at-2.35.38-pm.png', 'https://video.udacity-data.com/topher/2021/February/6024f4d7_screenshot-2021-02-11-at-2.36.36-pm/screenshot-2021-02-11-at-2.36.36-pm.png', 'https://video.udacity-data.com/topher/2021/February/602516ff_screenshot-2021-02-11-at-5.07.15-pm/screenshot-2021-02-11-at-5.07.15-pm.png']",https://www.youtube.com/embed/fNB2EFivAwY
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.15  Deployment - I,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We have learned how to create the build using the Jenkins pipeline. The next crucial step is deploying the build generated from the Jenkins pipeline. In easy words, deployment refers to running the application on a machine with a (Tomcat) web server already running.</p>\n<p class=""chakra-text css-o3oz8b"">Considering that Jenkins generated a build (.war) file in a container residing on an EC2 host. Now, there are a <strong>few options</strong> to install and run the Tomcat web server:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Install Tomcat on the same host EC2 instance</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Install Tomcat in a new container residing on the same host EC2 instance</strong></p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Install Tomcat on a new EC2 instance</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Install Tomcat in a new container residing on a <em class=""chakra-text css-o3oz8b"">new</em> EC2 instance</p>\n</li></ol>\n<p class=""chakra-text css-o3oz8b"">For the current exercise, let\'s go with <strong>option 2</strong> above. Therefore the new system diagram will look like:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Refined overarching system diagram</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Why another container?</strong><br>\nIn addition to the portability of the application, another advantage of using a new container is:</li></ul>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">A container has no resource constraints and can use as much of a given resource as the host\'s kernel scheduler allows. Source <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.docker.com/config/containers/resource_constraints/#:~:text=By%20default%2C%20a%20container%20has,of%20the%20docker%20run%20command."">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On the same EC2 instance where you have created the Jenkins server container, we will create a new container using a pre-created <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://hub.docker.com/_/tomcat"">tomcat<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> image available at Dockerhub. It will require a few configurations before running our application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>tomcat</strong> Docker image</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Initial Setup</h3>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Firewall rules</strong><br>\nEnsure that you are working on the same EC2 instance where you have installed the Jenkins container.  Recall that Jenkins was accessible on port <code class=""chakra-code css-1u83yg1"">8080</code> from your local browser, therefore we will run Tomcat on a different port, say <code class=""chakra-code css-1u83yg1"">8888</code>.  For this, reason, you will have to <strong>edit the security group of your EC2 instance to allow traffic on <code class=""chakra-code css-1u83yg1"">8888</code></strong>. See the snapshots below.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Edit the security group</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Edit Inbound rules to allow traffic on port 8888 of the EC2 instance.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Checking on the EC2 instance</strong><br>\nReconnect to your EC2 instance, and ensure that the docker services are running:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Note that the Public IP addresses of an EC2 instance keep changing after every reboot</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Replace the key file name and DNS as applicable to you</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ssh</span><span> -i </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""AWS_EC2_DemoKey.pem""</span><span> ec2-user@ec2-18-222-193-10.us-east-2.compute.amazonaws.com\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Start Docker service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">service</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> start\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Check if the Docker engine is running</span><span>\n</span><span>systemctl show --property ActiveState </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Check the stopped containers</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ps</span><span> --filter </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""status=exited""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Check the running containers</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ps</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">If the previously created Jenkins container, <code class=""chakra-code css-1u83yg1"">myContainer</code>, is stopped, you can restart it using:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> start </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>conatiner_name/ID</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Verify the Jenkins server is up and running in your local browser on port 8080, say <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.222.193.10:8080/"">http://18.222.193.10:8080/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> . You could be prompted to provide admin credentials.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Provide the admin credentials you set up initially<br>\n(This is where the -v option comes into the picture)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Port mapping between host and containers</p></div>', '<div class=""ureact-markdown css-tc5hjw""><center>\n*Move on to the next page for further steps.*\n</center></div>']","['https://video.udacity-data.com/topher/2021/February/602638fb_copy-of-ci-cd-pipeline-1/copy-of-ci-cd-pipeline-1.png', 'https://video.udacity-data.com/topher/2021/February/60264030_screenshot-2021-02-12-at-2.15.11-pm/screenshot-2021-02-12-at-2.15.11-pm.png', 'https://video.udacity-data.com/topher/2021/February/6026435d_screenshot-2021-02-12-at-2.22.33-pm/screenshot-2021-02-12-at-2.22.33-pm.png', 'https://video.udacity-data.com/topher/2021/February/6026432b_screenshot-2021-02-12-at-2.23.31-pm/screenshot-2021-02-12-at-2.23.31-pm.png', 'https://video.udacity-data.com/topher/2021/February/602646cd_screenshot-2021-02-12-at-2.43.02-pm/screenshot-2021-02-12-at-2.43.02-pm.png', 'https://video.udacity-data.com/topher/2021/February/6026b06c_screenshot-2021-02-12-at-10.13.17-pm/screenshot-2021-02-12-at-10.13.17-pm.png']",https://www.youtube.com/embed/8M_vvo9V7_E
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.16  Deployment - II,"['<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Copy files to the default folder</strong><br>\nView the container ID, and open a bash inside the <em class=""chakra-text css-o3oz8b"">myTomcatServer</em> container:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Verify running containers</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ps</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Open a bash into the container</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">exec</span><span> -it myTomcatServer </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">bash</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">You will be taken to the default directory of Tomcat: <code class=""chakra-code css-1u83yg1"">/usr/local/tomcat</code>. Note that the Tomcat serves the application residing in the <strong>webapps</strong> folder. By default, this folder does not contain the Welcome page of Tomcat. So, let\'s copy the contents of <strong>webapps.dist</strong> directory to <strong>webapps</strong> directory.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># View the files inside the /usr/local/tomcat folder. Notice the webapps folder</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ls</span><span> -l\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Copy the files from webapps.dist to the webapps folder</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">cp</span><span> -r webapps.dist/* webapps\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Come out of the bash, when needed</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">exit</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The same output of <code class=""chakra-code css-1u83yg1"">docker ps</code> and <code class=""chakra-code css-1u83yg1"">docker container ls</code> commands. <br> Notice that the Jenkins is accessible on port 8080, while Tomcat is accessible on port 8888</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Copy the contents of <em class=""chakra-text css-o3oz8b"">webapps.dist</em> directory to <em class=""chakra-text css-o3oz8b"">webapps</em> directory</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""3"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Welcome page</strong><br>\nGo to the AWS dashboard to copy the public IP address of your Linux EC2 instance. Paste the public IP address into your browser, and append with <code class=""chakra-code css-1u83yg1"">:8888</code> port, say <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.222.193.10:8888/"">http://18.222.193.10:8888/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> . It will show you the welcome page.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Tomcat welcome page at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.222.193.10:8888/"">http://18.222.193.10:8888/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> <br>\nFeel free to navigate the directories inside the <em class=""chakra-text css-o3oz8b"">webapps</em> folder, such as  <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.222.193.10:8888/examples/"">http://18.222.193.10:8888/examples/<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">At the same time, the Jenkins server is running at port 8080</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Tomcat denying access to privileged resources, and <br>pointing us to edit the <strong>context.xml</strong> or <strong>tomcat-users.xml</strong> file.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Install a text editor in container</strong><br>\nRun the following commands from within the bash into the  <em class=""chakra-text css-o3oz8b"">myTomcatServer</em> container:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Install VIM editor because we need to edit a few files</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">apt-get</span><span> update\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">apt-get</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">install</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">vim</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Now, you can open any file to edit by using <code class=""chakra-code css-1u83yg1"">vi file_name</code> command. Open the first file to edit:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Open the file with an editor</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">vi</span><span> conf/tomcat-users.xml </span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add the highlighted lines of code in the<code class=""chakra-code css-1u83yg1"">conf/tomcat-users.xml</code> file. This file is opened in VIM editor</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Edit the <code class=""chakra-code css-1u83yg1"">tomcat-users.xml </code> file</strong><br>\nIn the XML file above, the <code class=""chakra-code css-1u83yg1"">&lt;!--</code> shows the beginning of a multi-line comment, and <code class=""chakra-code css-1u83yg1"">--&gt;</code> shows the end of a comment. Add two new roles, and assign them to a new user, <em class=""chakra-text css-o3oz8b"">admin</em>, just above the <code class=""chakra-code css-1u83yg1"">&lt;/tomcat-users&gt;</code> tag.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">role</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">rolename</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">admin-gui</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">role</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">rolename</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">manager-gui</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">role</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">rolename</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">manager-script</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">user</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">username</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">admin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">password</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">admin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">roles</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">admin-gui, manager-gui, manager-script</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">A sample code is already available in the XML file above. You may need a little help with VIM editor keys:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Press <strong>ESC</strong> + <strong>i</strong> key to enter into the Insert mode. This is the mode where you can scroll/edit in the file. Another useful mode is Visual mode, <strong>ESC</strong> + <strong>v</strong>.</li><li class=""css-cvpopp"">When you are done, press <strong>ESC</strong> + <strong>:wq</strong> to Save and quit.</li><li class=""css-cvpopp"">Press <strong>ESC</strong> + <strong>:q!</strong> to quit without saving anything. Have look at this <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://vim.rtorr.com/"">cheat sheet<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more VIM commands.</li><li class=""css-cvpopp"">To copy here is called Yank, which works only in Visual mode, <strong>ESC</strong> + <strong>v</strong>.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""3"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Edit the <code class=""chakra-code css-1u83yg1"">context.xml</code> file</strong><br></li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Find the context.xml files</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">find</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">.</span><span> -name context.xml\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Open the manager context file in VIM editor</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">vi</span><span> ./webapps/manager/META-INF/context.xml</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Comment the following line of code by append it with <code class=""chakra-code css-1u83yg1"">&lt;--</code> and putting a <code class=""chakra-code css-1u83yg1"">--&gt;</code> at the end.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">Valve</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">className</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">org.apache.catalina.valves.RemoteAddrValve</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">\t\t  </span><span class=""token"" style=""color: rgb(2, 124, 124);"">allow</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Use the arrow keys to navigate in the file, and VIM commands to add <code class=""chakra-code css-1u83yg1"">&lt;--</code> and <code class=""chakra-code css-1u83yg1"">--&gt;</code> at suitable places. See the snapshot below:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Find the <code class=""chakra-code css-1u83yg1"">context.xml</code> files</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Comment out the highlighted code in the <code class=""chakra-code css-1u83yg1"">context.xml</code> file</p></div>', '<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong>: A new user is required in our deployment because Jenkins (from another container) will attempt to push the application build to the Tomcat server (current container). We will see a way to share these credentials with Jenkins to allow pushing the build here.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""4"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Restart the Tomcat server</strong><br>\nRun the following commands from within the bash into the <em class=""chakra-text css-o3oz8b"">myTomcatServer</em> container:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Shutdown the server</span><span>\n</span> ./bin/shutdown.sh </code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">It will stop the container as well. Restart the <em class=""chakra-text css-o3oz8b"">myTomcatServer</em> container:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> start myTomcatServer</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Now, the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.222.193.10:8888/manager/html"">http://18.222.193.10:8888/manager/html<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> will ask you for manager-gui credentials before showing the manager page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Prompt asking for Tomcat manager-gui password</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Output at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.222.193.10:8888/manager/html"">http://18.222.193.10:8888/manager/html<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>']","['https://video.udacity-data.com/topher/2021/February/602653f2_screenshot-2021-02-12-at-3.38.44-pm/screenshot-2021-02-12-at-3.38.44-pm.png', 'https://video.udacity-data.com/topher/2021/February/602655ea_screenshot-2021-02-12-at-3.46.13-pm/screenshot-2021-02-12-at-3.46.13-pm.png', 'https://video.udacity-data.com/topher/2021/February/602659dc_screenshot-2021-02-12-at-3.58.46-pm/screenshot-2021-02-12-at-3.58.46-pm.png', 'https://video.udacity-data.com/topher/2021/February/60265b41_screenshot-2021-02-12-at-4.10.55-pm/screenshot-2021-02-12-at-4.10.55-pm.png', 'https://video.udacity-data.com/topher/2021/February/60265cad_screenshot-2021-02-12-at-4.16.17-pm/screenshot-2021-02-12-at-4.16.17-pm.png', 'https://video.udacity-data.com/topher/2021/February/60268bf1_screenshot-2021-02-12-at-4.40.04-pm/screenshot-2021-02-12-at-4.40.04-pm.png', 'https://video.udacity-data.com/topher/2021/February/60268bb0_screenshot-2021-02-12-at-5.10.42-pm/screenshot-2021-02-12-at-5.10.42-pm.png', 'https://video.udacity-data.com/topher/2021/February/60268ab5_screenshot-2021-02-12-at-5.12.29-pm/screenshot-2021-02-12-at-5.12.29-pm.png', 'https://video.udacity-data.com/topher/2021/February/60266ad3_screenshot-2021-02-12-at-5.14.17-pm/screenshot-2021-02-12-at-5.14.17-pm.png', 'https://video.udacity-data.com/topher/2021/February/60266a90_screenshot-2021-02-12-at-5.14.42-pm/screenshot-2021-02-12-at-5.14.42-pm.png']",https://www.youtube.com/embed/-rG6O9ZzGfI
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.17  Deployment - III,"['<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Add Plugins</strong><br>\nOn the Jenkins console, go to the Manage Jenkins → Manage Plugins section. Here you can add new ones, or update the existing plugins. For our deployment, we need to add the following two plugins:</li></ol>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Deploy to container plugin</strong>: This plugin takes a war/ear file and deploys that to a running remote application server at the end of a build.</li><li class=""css-cvpopp""><strong>Maven Integration plugin</strong>: This plugin is used for building Maven jobs.</li></ul>\n<p class=""chakra-text css-o3oz8b"">The snapshots below show that we have already installed them on our Jenkins. In your case, search with name on the <strong>Available</strong> tab, and install.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Manage Plugins</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Deploy to container plugin</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Maven Integration plugin</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""2"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Configure Java and Maven on Jenkins</strong><br>\nWhile building and deploying the application, the right compatible version of Java Maven should be present on the Jenkins server. You can check the version of Java and Maven from inside of the Jenkins container:</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Open a shell into the Jenkins container</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">exec</span><span> -it myContainer </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">bash</span><span>\n</span>java -version\n<span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">echo</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">$JAVA_HOME</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># We already installed Maven using the command ""apk add maven"" earlier</span><span>\n</span>mvn -version</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Go to the Jenkins console, and open the Manage Jenkins → Global Tool Configuration settings.</p>\n<center>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Section</strong></th><th class=""css-zl9m57""><strong>Field</strong></th><th class=""css-zl9m57""><strong>Value</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">JDK</td><td class=""css-1eywhk4"">JDK Name</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">JDK1.8</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">JAVA_HOME</td><td class=""css-1eywhk4"">The output of <code class=""chakra-code css-1u83yg1"">echo $JAVA_HOME</code>, <br>such as <code class=""chakra-code css-1u83yg1"">/opt/java/openjdk</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Maven</td><td class=""css-1eywhk4"">Maven Name</td><td class=""css-1eywhk4"">Check the version using <code class=""chakra-code css-1u83yg1"">mvn -version</code> <br>in your container, such as Maven 3.6.3</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">Install automatically</td><td class=""css-1eywhk4"">Check</td></tr></tbody></table></div>\n</center>\n---</div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JDK section in Global Tool Configuration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Check Java and Maven version in Jenkins container</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Maven section in Global Tool Configuration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""3"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Configure the Job</strong><br>\nIf you already have a <strong>Job</strong> created from the earlier demo, go ahead and configure it again. Else, create a new <strong>Freestyle project</strong> type job, say <em class=""chakra-text css-o3oz8b"">myFirstJob</em>. (Feel free to check the Pipeline project type, next time).</li></ol>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Use the following configuration details, and leave the remaining as default:</li></ul>\n<center>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Section</strong></th><th class=""css-zl9m57""><strong>Field</strong></th><th class=""css-zl9m57""><strong>Value</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">General</td><td class=""css-1eywhk4"">Description</td><td class=""css-1eywhk4"">Text of your choice</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">Github project</td><td class=""css-1eywhk4"">Provide your Github repository URL</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Source Code Management</td><td class=""css-1eywhk4"">Git</td><td class=""css-1eywhk4"">Check</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">Repository URL</td><td class=""css-1eywhk4"">Provide your Github repository URL</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">Credentials</td><td class=""css-1eywhk4"">Choose the one you\'ve created in the Global credentials</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Build Triggers</td><td class=""css-1eywhk4"">Poll SCM → Schedule</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1""> ***   **</code><br> It means poll the code every minute. <br> Youcan also use <code class=""chakra-code css-1u83yg1"">H*   *** </code> to poll once per hour</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Build Environment</td><td class=""css-1eywhk4"">Delete workspace before build starts</td><td class=""css-1eywhk4"">Check<br>Jenkins creates a workspace where it stores <br> the build file, such as WAR. In our case, this workspace <br> will be available in the Jenkins container</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Build</td><td class=""css-1eywhk4"">Add build step</td><td class=""css-1eywhk4"">Invoke top-level Maven targets</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">Goals</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">clean compile package</code> <br> <em class=""chakra-text css-o3oz8b"">clean</em> - delete the existing target folder<br><em class=""chakra-text css-o3oz8b"">compile</em> - compile source code<br><em class=""chakra-text css-o3oz8b"">package</em> - package the application to WAR file. <br>Note that the package type in POM.xml is WAR</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4""></td><td class=""css-1eywhk4"">POM</td><td class=""css-1eywhk4"">Specify the POM file path relative to your repository home, <br>such as  <code class=""chakra-code css-1u83yg1"">starter_code/pom.xml</code></td></tr></tbody></table></div></center></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Above configuration might seem familiar to you. The section responsible for deployment to the target container is <strong>Post-build Actions</strong>. In this section, choose the <strong>Deploy war/ear to a container</strong> option, and use the following configuration details:</li></ul>\n<center>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Field</strong></th><th class=""css-zl9m57""><strong>Value</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">WAR/EAR files</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">**/*.war</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Context path</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">myApp</code><br>Context represents a single web application running within a given instance of Tomcat.</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Containers</td><td class=""css-1eywhk4"">Choose Tomcat 9 <br><em class=""chakra-text css-o3oz8b"">(Because our Tomcat container is having v9)</em></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Credentials</td><td class=""css-1eywhk4"">Add a new credentials<br> Add Global credentials with username/password as admin/admin .<br> Recall that we created these credentials in the Tomcat container, <code class=""chakra-code css-1u83yg1"">tomcat-users.xml</code> file</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Tomcat URL</td><td class=""css-1eywhk4"">&lt;<strong>Private IP</strong> of <strong>host</strong> EC2 instance&gt;:8888<br>Recall that we had mapped 8888 port of host with the 8080 port of Tomcat container</td></tr></tbody></table></div>\n</center>\n&nbsp; &nbsp; &nbsp; &nbsp; The reason we are using the **Private IP** of **host** EC2 instance is because the public one keeps changing with time. </div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Post-build Actions → Deploy war/ear to a container settings</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" start=""4"" class=""css-13a5a39""><li class=""css-cvpopp""><strong>Build and Verify</strong><br>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Save the job, and click on the ""Build Now"" option.</li></ul>\n</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Successful deployment</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Jenkins dashboard showing the SUCCESS status of the <em class=""chakra-text css-o3oz8b"">myFirstJob</em></p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Verify the deployment in the running Tomcat container. If you are logged out of the SSH connection, then reconnect to the host EC2 instance. Open a shell into the Tomcat container, and check the contents of the <strong>webapps</strong> folder. You must notice the newly created <strong>myApp</strong> folder there.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The deployed WAR file and the correponding extracted folder</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The Jenkins deployed the WAR file, and the Tomcat server automatically extracts it to a folder.</li></ul>\n<br>\n**Congratulations! You have finished your first pipeline deployment on the cloud.**</div>', '<div class=""ureact-markdown css-tc5hjw""><hr aria-orientation=""horizontal"" aria-hidden=""true"" class=""chakra-divider css-zmjcvi"">\n<h3 class=""chakra-heading css-k57syw"">Optional Step</h3>\n<h4 class=""chakra-heading css-1dlhxqh"">Verify if Tomcat can automatically extract the WAR file present inside the <em class=""chakra-text css-o3oz8b"">webapps</em> folder</h4>\n<p class=""chakra-text css-o3oz8b"">Let\'s copy a <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://tomcat.apache.org/tomcat-7.0-doc/appdev/sample/"">Sample Application<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Download the <strong>sample.war</strong> file from the link above. We have also attached the same file at the bottom of this page.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Copy the <strong>sample.war</strong> file from the local computer to the host EC2 instance:</p>\n</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-ruby"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>scp </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>i AWS_EC2_DemoKey</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>pem </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">..</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>Desktop</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>sample</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>war ec2</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>user@</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3.141</span><span class=""token"" style=""color: rgb(2, 124, 124);"">.40</span><span class=""token"" style=""color: rgb(2, 124, 124);"">.172</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">:</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>home</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>ec2</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span>user</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>sample</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>war</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">In the command above:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The key file is present inside the current folder.</li><li class=""css-cvpopp"">The sample.war file is downloaded from the link mentioned above, and present in the<code class=""chakra-code css-1u83yg1"">../Desktop/</code> folder.</li><li class=""css-cvpopp"">The <code class=""chakra-code css-1u83yg1"">3.141.40.172</code> is the public IP address of the EC2 instance</li><li class=""css-cvpopp"">The target folder is <code class=""chakra-code css-1u83yg1"">home/ec2-user/</code>\nYou can tweak the command above as applicable to you.</li></ul>\n<ol role=""list"" start=""3"" class=""css-13a5a39""><li class=""css-cvpopp"">Once the <strong>sample.war</strong> file is transferred to the host EC2 instance, copy the same file to the container.</li></ol>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-groovy"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span># The sample</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>war file must be present </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">in</span><span> the home directory of the logged</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">in</span><span> user\n</span>ls\n<span># Copy the file to the </span><span class=""token gstring"" style=""color: rgb(221, 17, 68);"">""myTomcatServer""</span><span> container\n</span><span>docker cp sample</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>war myTomcatServer</span><span class=""token"" style=""color: rgb(15, 43, 61);"">:</span><span class=""token"" style=""color: rgb(0, 153, 38);"">/usr/</span><span>local</span><span class=""token"" style=""color: rgb(0, 153, 38);"">/tomcat/</span><span>webapps</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span></code></div></div></pre>\n<ol role=""list"" start=""4"" class=""css-13a5a39""><li class=""css-cvpopp"">Tomcat will automatically extract the sample.war file present inside the <em class=""chakra-text css-o3oz8b"">webapps</em> folder. You can check the output at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://18.222.193.10:8888/sample"">http://18.222.193.10:8888/sample<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> URL.</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">To download the supporting material below, right-click on the file name and select the ""<em class=""chakra-text css-o3oz8b"">Save Link As...</em>""  (Chrome or Firefox) / ""<em class=""chakra-text css-o3oz8b"">Download Linked File As...</em>""  (Safari) / ""<em class=""chakra-text css-o3oz8b"">Save As...</em>"" (Windows Edge) option.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Supporting Materials</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2021/March/605c8afd_sample/sample.war"">sample.war<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']","['https://video.udacity-data.com/topher/2021/February/60268a2b_screenshot-2021-02-12-at-5.36.05-pm/screenshot-2021-02-12-at-5.36.05-pm.png', 'https://video.udacity-data.com/topher/2021/February/602689ee_screenshot-2021-02-12-at-5.36.50-pm/screenshot-2021-02-12-at-5.36.50-pm.png', 'https://video.udacity-data.com/topher/2021/February/602689d2_screenshot-2021-02-12-at-5.38.23-pm/screenshot-2021-02-12-at-5.38.23-pm.png', 'https://video.udacity-data.com/topher/2021/February/60268931_screenshot-2021-02-12-at-5.40.40-pm/screenshot-2021-02-12-at-5.40.40-pm.png', 'https://video.udacity-data.com/topher/2021/February/6026724a_screenshot-2021-02-12-at-5.48.33-pm/screenshot-2021-02-12-at-5.48.33-pm.png', 'https://video.udacity-data.com/topher/2021/February/60268943_screenshot-2021-02-12-at-5.39.50-pm/screenshot-2021-02-12-at-5.39.50-pm.png', 'https://video.udacity-data.com/topher/2021/February/6026a4f7_screenshot-2021-02-12-at-9.14.05-pm/screenshot-2021-02-12-at-9.14.05-pm.png', 'https://video.udacity-data.com/topher/2021/February/6026a4c2_screenshot-2021-02-12-at-9.21.54-pm/screenshot-2021-02-12-at-9.21.54-pm.png', 'https://video.udacity-data.com/topher/2021/February/6026a9d9_screenshot-2021-02-12-at-9.45.00-pm/screenshot-2021-02-12-at-9.45.00-pm.png', 'https://video.udacity-data.com/topher/2021/February/6026a896_screenshot-2021-02-12-at-9.35.32-pm/screenshot-2021-02-12-at-9.35.32-pm.png']",https://www.youtube.com/embed/MmR4Rm1_lIo
Java Web Developer,COURSE 5:Security and DevOps,Lesson 4: CI/CD,4.18  Another Deployment,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Recall that there were a few options to decide where to run the target Tomcat server. We have already seen how to run a Tomcat server in a new container residing on the <strong>same host EC2 instance</strong>, and deploy our application to it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">System overarching diagram - I</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Now, let\'s consider one more possibility: Run the Tomcat in a new container residing on a <strong>new EC2 instance</strong>, and deploy our application to it. See the diagram below to understand the system-flow:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">System overarching diagram - II</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">1. Launch a new host EC2 instance</h4>\n<p class=""chakra-text css-o3oz8b"">Launch a new EC2 instance, based on <code class=""chakra-code css-1u83yg1"">Amazon Linux 2 AMI</code> and <code class=""chakra-code css-1u83yg1"">t2.small</code>/<code class=""chakra-code css-1u83yg1"">t2.micro</code>. Let\'s name it <strong>Host_2</strong>, assuming we already have Jenkins running inside a container on <em class=""chakra-text css-o3oz8b"">Host_1</em>.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">2. Install docker on EC2 instance</h4>\n<p class=""chakra-text css-o3oz8b"">Connect to Host_2 using SSH, and install docker:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># update the existing packages</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> yum update\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span>  yum </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">install</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span></code></div></div></pre>\n<h4 class=""chakra-heading css-1dlhxqh"">3. Create a new user for Docker management, and add that user to Docker (default) group.</h4>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">useradd</span><span> host2admin\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">passwd</span><span> host2admin\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Add the host2admin user to the ""docker"" user group </span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">usermod</span><span> -aG </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> host2admin\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Add the $USER user to the ""docker"" user group. The current $USER is ec2-user</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">usermod</span><span> -a -G </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token environment"" style=""color: rgb(15, 43, 61);"">$USER</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">reboot</span></code></div></div></pre>\n<h4 class=""chakra-heading css-1dlhxqh"">4. Start services</h4>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Reconnect using SSH. The public IP will change after reboot</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">service</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> start\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Verify that you can run docker commands without sudo.</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> run hello-world</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">5. Write a Dockerfile under /opt/docker/ directory</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Create the /opt/docker/ directory</li></ul>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">su</span><span> -\n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">cd</span><span> /opt\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">mkdir</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">cd</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">vi</span><span> Dockerfile</span></code></div></div></pre>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Add the following to the new Dockerfile</li></ul>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Pull base image </span><span>\n</span>From tomcat:8-jre8 \n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Maintainer</span><span>\n</span><span>MAINTAINER </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Udacity""</span><span> \n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># copy war file on to container </span><span>\n</span>COPY ./*.war /usr/local/tomcat/webapps</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">6. Allow Jenkins\' access to the Docker</h4>\n<p class=""chakra-text css-o3oz8b"">Jenkins will attempt to write files in the Docker as the newly created user ""host2admin"". Therefore, enable the password-based authentication</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">vi</span><span> /etc/ssh/sshd_config\n</span><span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Comment the passwordauthentication line</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">service</span><span> sshd restart</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Change ownership permissions, allowing the new user ""host2admin"" to write here</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">chown</span><span> -R host2admin:host2admin /opt/docker/\n</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sudo</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">service</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> restart</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">7. Login to Jenkins console and add Docker server to execute commands from Jenkins</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Manage Jenkins → Manager plugins → Install ""<em class=""chakra-text css-o3oz8b"">Publish over SSH</em>"" plugin</li><li class=""css-cvpopp"">Manage Jenkins → Configure system →  Publish over SSH → Add the new host IP address and credentials of the newly created user</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Go to <em class=""chakra-text css-o3oz8b"">Configure system</em>*, and provide details to publish over SSH</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">8. Create Jenkins job</h4>\n<p class=""chakra-text css-o3oz8b"">Create a new job, <strong>mySecondJob</strong> (Type: Maven project), and configure with the following details (leaving remaining details as default):</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Source Code Management</strong><br>\nRepository : <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/YOUR_USERNAME/nd035-c4-Security-and-DevOps"">https://github.com/YOUR_USERNAME/nd035-c4-Security-and-DevOps<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> <br>\nBranches to build : */master</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Build</strong><br>\nRoot POM: pom.xml<br>\nGoals and options: clean install package</p>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Post Steps</strong><br>\nAdd post-build steps: Choose <strong>Send files or execute commands over SSH</strong><br>\nName: Host_2 (Choose Verbose mode)<br>\nSource files: <code class=""chakra-code css-1u83yg1"">webapp/target/*.war</code><br>\nRemove prefix: <code class=""chakra-code css-1u83yg1"">webapp/target</code><br>\nRemote directory: <code class=""chakra-code css-1u83yg1"">//opt//docker</code> <br>\nExec command[s]:</li></ul>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> stop demo_container</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>  \n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">rm</span><span> -f demo_container</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> stop demo_image</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>  \n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">rm</span><span> -f demo_image</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> \n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> image </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">rm</span><span> -f demo_image</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> \n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">cd</span><span> /opt/docker</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> \n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> build -t demo_image </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">.</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The commands above will remove any existing container/image with the given name, and create a fresh new image, <code class=""chakra-code css-1u83yg1"">demo_image</code>, inside the current <code class=""chakra-code css-1u83yg1"">/opt/docker/</code> directory. Add another <strong>Transfer Set</strong>, and use the following execution command:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">docker</span><span> run -d --name demo_container -p </span><span class=""token"" style=""color: rgb(2, 124, 124);"">8888</span><span>:8080 demo_image</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The command above will create a new container, <code class=""chakra-code css-1u83yg1"">demo_container</code> using the <code class=""chakra-code css-1u83yg1"">demo_image</code> created in the previous command.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Transfer set - I</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Transfer set - II</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">9. Execute Jenkins job</h4>\n<p class=""chakra-text css-o3oz8b"">Check images and containers again on the <em class=""chakra-text css-o3oz8b"">Host_2</em>. A new <em class=""chakra-text css-o3oz8b"">demo_image</em> and <em class=""chakra-text css-o3oz8b"">demo_container</em> will get created through the Jenkins job.</p>\n<h4 class=""chakra-heading css-1dlhxqh"">10. Access web application from the browser</h4>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">Host_2_Public_IP</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>:8888/myApp</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">There is nothing to display in the <em class=""chakra-text css-o3oz8b"">/usr/local/tomcat/webapps/myApp</em> folder on Tomcat; therefore it will show you a <strong>404 error</strong>. But, if you use a wholly developed application, it will display the content accordingly.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Congratulations! You have set up your second DevOps pipeline. That\'s great!</p>\n</blockquote></div>']","['https://video.udacity-data.com/topher/2021/February/602a2ead_screenshot-2021-02-15-at-1.45.43-pm/screenshot-2021-02-15-at-1.45.43-pm.png', 'https://video.udacity-data.com/topher/2021/February/602a351e_screenshot-2021-02-15-at-2.17.04-pm/screenshot-2021-02-15-at-2.17.04-pm.png', 'https://video.udacity-data.com/topher/2021/February/602a63d1_screenshot-2021-02-15-at-5.36.24-pm/screenshot-2021-02-15-at-5.36.24-pm.png', 'https://video.udacity-data.com/topher/2021/February/602a6524_screenshot-2021-02-15-at-5.41.49-pm/screenshot-2021-02-15-at-5.41.49-pm.png', 'https://video.udacity-data.com/topher/2021/February/602a6539_screenshot-2021-02-15-at-5.41.20-pm/screenshot-2021-02-15-at-5.41.20-pm.png', 'https://video.udacity-data.com/topher/2021/February/602a6565_screenshot-2021-02-15-at-5.41.31-pm/screenshot-2021-02-15-at-5.41.31-pm.png']",https://www.youtube.com/embed/6ywkbl8eNvY
Java Web Developer,COURSE 5:Security and DevOps,Lesson 5: eCommerce Application,5.1  Instructions,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In this final part of the course, you\'ll complete the eCommerce application. This will give you some additional practice and demonstrate that you\'ve learned the key security and DevOps skills from this course. After successful completion of the project, here are some of the specific things you will have shown you are able to do:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Demonstrate correct handling of authorization with proper security using JWT.</li><li class=""css-cvpopp"">Write tests and meet an acceptable code coverage level.</li><li class=""css-cvpopp"">Identify the correct metrics for logging, in order to monitor a system.</li><li class=""css-cvpopp"">Index metrics to Splunk.</li><li class=""css-cvpopp"">Demonstrate configuration and automation of the CI/CD pipeline.</li></ul>\n<p class=""chakra-text css-o3oz8b"">That\'s a lot, and we hope that after completing your project you feel proud of having learned so many new skills!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note:</strong> For the sake of thoroughness, these instructions go over all the steps needed for the project—but if you\'ve been following along with the walkthroughs in the course, you will already have been working with this code and implemented some of the necessary changes! If you skipped those walkthroughs, we suggest you go back and do them now, and then come back here to finish the remainder of the project.</p>\n</blockquote>\n<p class=""chakra-text css-o3oz8b"">You\'ll start with a template for the complete application, written in Java using Spring Boot, Hibernate ORM, and the H2 database. Your goal will be to take this template and add proper authentication and authorization controls so users can only access their data, and that data can only be accessed in a secure way. You\'ll do this using a combination of usernames and passwords for authentication, as well as JSON Web Tokens (JWT) to handle the authorization.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You can find all of the starter code, along with instructions for how to carry out the project, at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c4-Security-and-DevOps"">this GitHub repository<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">Here\'s how to get started:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If you haven\'t already, make a copy of the repository on your own GitHub account. The master branch serves as the starter code for the project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Read through the project <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c4-Security-and-DevOps/blob/master/README.md"">README<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> file. The first part of the README gives an overview of the project, and the second part describes instructions that you can follow to implement authentication modules in the application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Check out the project <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://review.udacity.com/#!/rubrics/2654/view"">rubric<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> to see exactly what your reviewer will be looking for when they grade your project.</p></div>']",[],
Java Web Developer,COURSE 5:Security and DevOps,Lesson 5: eCommerce Application,5.2  Project Rubric,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Demonstrate appropriate repository management using git.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All project code has been organized properly and is in git, with proper branching.</p>\n<p class=""chakra-text css-o3oz8b"">No extra files have been included using <code class=""chakra-code css-1u83yg1"">.gitignore</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Demonstrate correct handling of authorization with proper security using JWT.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">App validates authentication of the user to let them into the project. Proper JWT headers are present and utilized correctly.</p>\n<p class=""chakra-text css-o3oz8b"">The following are only accessible after authenticated:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Logged in, user profile</li><li class=""css-cvpopp"">Cart details</li><li class=""css-cvpopp"">Purchase History</li><li class=""css-cvpopp"">Password should check some length requirement and a confirmation field in the request to check for typos</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write proper tests for the above module and meet an acceptable code coverage level.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Code coverage of 60% is met through tests. The tests include sanity and regression test cases and take care of negative tests as well.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify the correct metrics to log, to monitor the system and Index metrics to Splunk.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The code traces at least the following:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">CreateUser request successes</li><li class=""css-cvpopp"">CreateUser request failures</li><li class=""css-cvpopp"">Exceptions</li><li class=""css-cvpopp"">order requests successes</li><li class=""css-cvpopp"">order requests failures</li></ul>\n<p class=""chakra-text css-o3oz8b"">Logs are indexed to Splunk.</p>\n<p class=""chakra-text css-o3oz8b"">The code sets up at least one alert (of your choice) for the system. For example:\nCreate dashboard for success rate per minute of any one CreateUser and order, and take a screenshot.</p>\n<p class=""chakra-text css-o3oz8b"">Screenshots are provided showing some query results and the alert setup.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Demonstrate configuration and automation of the CI/CD pipeline.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The submission manages build and deployment of the application with Jenkins:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Submission includes logs or screenshot showing successful Jenkins build and project setup</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Setup Jenkins in docker and submit a screenshot of the result</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Create a docker image for the project and deploy it to a docker container; submit a screenshot of the result</p>\n</li></ol></div>']",[],
Java Web Developer,COURSE 5:Security and DevOps,Lesson 5: eCommerce Application,5.3  Submit Project,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Great job, 👏, Your project meets all the requirements that too in one go!! Kudos to you for that. 😄</p>\n<p class=""chakra-text css-o3oz8b"">I\'m assuming this was your last project remaining of this Nanodegree, congratulations on completing the projects successfully! 🔥</p>\n<p class=""chakra-text css-o3oz8b"">The amount of hard work and thinking that you have put in can be clearly seen. ✌👏</p>\n<p class=""chakra-text css-o3oz8b"">Keep up the good work! 👊 You clearly have a bright future infront of you. 🤩😎</p>\n<p class=""chakra-text css-o3oz8b"">Here are some helpful links to help you improve even more -</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://piotrminkowski.com/2021/01/13/spring-boot-tips-tricks-and-techniques/"">Spring Boot Tips, Tricks and Techniques<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://auth0.com/blog/spring-boot-authorization-tutorial-secure-an-api-java/"">Spring Boot Authorization Tutorial: Secure an API<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.baeldung.com/mockito-series"">Mockito Tutorial<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul>\n<p class=""chakra-text css-o3oz8b"">I wish you all the best for the upcoming challenges.✌</p>\n<p class=""chakra-text css-o3oz8b"">Keep up the good work! 👊</p>\n<p class=""chakra-text css-o3oz8b"">Stay Udacious and Stay Safe!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Demonstrate correct handling of authorization with proper security using JWT.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">App validates authentication of the user to let them into the project. Proper JWT headers are present and utilized correctly.</p>\n<p class=""chakra-text css-o3oz8b"">The following are only accessible after authenticated:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Logged in, user profile</li><li class=""css-cvpopp"">Cart details</li><li class=""css-cvpopp"">Purchase History</li><li class=""css-cvpopp"">Password should check some length requirement and a confirmation field in the request to check for typos</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Demonstrate appropriate repository management using git.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All project code has been organized properly and is in git, with proper branching.</p>\n<p class=""chakra-text css-o3oz8b"">No extra files have been included using <code class=""chakra-code css-1u83yg1"">.gitignore</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write proper tests for the above module and meet an acceptable code coverage level.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Code coverage of 60% is met through tests. The tests include sanity and regression test cases and take care of negative tests as well.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify the correct metrics to log, to monitor the system and Index metrics to Splunk.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The code traces at least the following:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">CreateUser request successes</li><li class=""css-cvpopp"">CreateUser request failures</li><li class=""css-cvpopp"">Exceptions</li><li class=""css-cvpopp"">order requests successes</li><li class=""css-cvpopp"">order requests failures</li></ul>\n<p class=""chakra-text css-o3oz8b"">Logs are indexed to Splunk.</p>\n<p class=""chakra-text css-o3oz8b"">The code sets up at least one alert (of your choice) for the system. For example:\nCreate dashboard for success rate per minute of any one CreateUser and order, and take a screenshot.</p>\n<p class=""chakra-text css-o3oz8b"">Screenshots are provided showing some query results and the alert setup.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Demonstrate configuration and automation of the CI/CD pipeline.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The submission manages build and deployment of the application with Jenkins:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Submission includes logs or screenshot showing successful Jenkins build and project setup</li></ul></div>']","['https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/55810/1726508911/Screenshot__1152_.png', 'https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/55810/1726508911/Screenshot__1155_.png', 'https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/55810/1726508911/Screenshot__1156_.png', 'https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/55810/1726508911/Screenshot__1153_.png', 'https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/55810/1726508911/Screenshot__1154_.png', 'https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/55810/1726509262/Screenshot__1157_.png']",
